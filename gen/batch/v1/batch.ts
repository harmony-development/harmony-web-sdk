// @generated by protobuf-ts 1.0.13 with parameters long_type_string,optimize_code_size,generate_dependencies,optimize_code_size
// @generated from protobuf file "batch/v1/batch.proto" (package "protocol.batch.v1", syntax proto3)
// tslint:disable
import { RpcTransport } from "@protobuf-ts/runtime-rpc";
import { MethodInfo } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * AnyRequest is a generic message supporting any unary request.
 *
 * @generated from protobuf message protocol.batch.v1.AnyRequest
 */
export interface AnyRequest {
    /**
     * The endpoint to which the request is being sent.
     *
     * @generated from protobuf field: string endpoint = 1;
     */
    endpoint: string;
    /**
     * The request data.
     *
     * @generated from protobuf field: bytes request = 2;
     */
    request: Uint8Array;
}
/**
 * Used in `Batch` endpoint.
 *
 * @generated from protobuf message protocol.batch.v1.BatchRequest
 */
export interface BatchRequest {
    /**
     * The list of requests to be executed in the batch.
     *
     * @generated from protobuf field: repeated protocol.batch.v1.AnyRequest requests = 1;
     */
    requests: AnyRequest[];
}
/**
 * Used in `Batch` endpoint.
 *
 * @generated from protobuf message protocol.batch.v1.BatchResponse
 */
export interface BatchResponse {
    /**
     * The list of responses to the requests.
     *
     * @generated from protobuf field: repeated bytes responses = 1;
     */
    responses: Uint8Array[];
}
/**
 * Used in `BatchSame` endpoint.
 *
 * @generated from protobuf message protocol.batch.v1.BatchSameRequest
 */
export interface BatchSameRequest {
    /**
     * The endpoint to call for all requests.
     *
     * @generated from protobuf field: string endpoint = 1;
     */
    endpoint: string;
    /**
     * The list of requests to be executed in the batch.
     *
     * @generated from protobuf field: repeated bytes requests = 2;
     */
    requests: Uint8Array[];
}
/**
 * Used in `BatchSame` endpoint.
 *
 * @generated from protobuf message protocol.batch.v1.BatchSameResponse
 */
export interface BatchSameResponse {
    /**
     * The list of responses to the requests.
     *
     * @generated from protobuf field: repeated bytes responses = 1;
     */
    responses: Uint8Array[];
}
/**
 * Service to batch requests.
 *
 * @generated from protobuf service protocol.batch.v1.BatchService
 */
export interface IBatchServiceClient {
    /**
     * Batch requests.
     * Does not support batching stream requests.
     * Batched requests should be verified and an error should be thrown if they
     * are invalid.
     *
     * @generated from protobuf rpc: Batch(protocol.batch.v1.BatchRequest) returns (protocol.batch.v1.BatchResponse);
     */
    batch(input: BatchRequest, options?: RpcOptions): UnaryCall<BatchRequest, BatchResponse>;
    /**
     * BatchSame allows batching for requests using the same endpoint.
     * This allows for additional network optimizations since the endpoint doesn't
     * have to be sent for every request.
     *
     * @generated from protobuf rpc: BatchSame(protocol.batch.v1.BatchSameRequest) returns (protocol.batch.v1.BatchSameResponse);
     */
    batchSame(input: BatchSameRequest, options?: RpcOptions): UnaryCall<BatchSameRequest, BatchSameResponse>;
}
/**
 * Type for protobuf message protocol.batch.v1.AnyRequest
 */
class AnyRequest$Type extends MessageType<AnyRequest> {
    constructor() {
        super("protocol.batch.v1.AnyRequest", [
            { no: 1, name: "endpoint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "request", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
export const AnyRequest = new AnyRequest$Type();
/**
 * Type for protobuf message protocol.batch.v1.BatchRequest
 */
class BatchRequest$Type extends MessageType<BatchRequest> {
    constructor() {
        super("protocol.batch.v1.BatchRequest", [
            { no: 1, name: "requests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AnyRequest }
        ]);
    }
}
export const BatchRequest = new BatchRequest$Type();
/**
 * Type for protobuf message protocol.batch.v1.BatchResponse
 */
class BatchResponse$Type extends MessageType<BatchResponse> {
    constructor() {
        super("protocol.batch.v1.BatchResponse", [
            { no: 1, name: "responses", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
export const BatchResponse = new BatchResponse$Type();
/**
 * Type for protobuf message protocol.batch.v1.BatchSameRequest
 */
class BatchSameRequest$Type extends MessageType<BatchSameRequest> {
    constructor() {
        super("protocol.batch.v1.BatchSameRequest", [
            { no: 1, name: "endpoint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "requests", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
export const BatchSameRequest = new BatchSameRequest$Type();
/**
 * Type for protobuf message protocol.batch.v1.BatchSameResponse
 */
class BatchSameResponse$Type extends MessageType<BatchSameResponse> {
    constructor() {
        super("protocol.batch.v1.BatchSameResponse", [
            { no: 1, name: "responses", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
export const BatchSameResponse = new BatchSameResponse$Type();
/**
 * Service to batch requests.
 *
 * @generated from protobuf service protocol.batch.v1.BatchService
 */
export class BatchServiceClient implements IBatchServiceClient {
    readonly typeName = "protocol.batch.v1.BatchService";
    readonly methods: MethodInfo[] = [
        { service: this, name: "Batch", localName: "batch", I: BatchRequest, O: BatchResponse },
        { service: this, name: "BatchSame", localName: "batchSame", I: BatchSameRequest, O: BatchSameResponse }
    ];
    constructor(private readonly _transport: RpcTransport) {
    }
    batch(input: BatchRequest, options?: RpcOptions): UnaryCall<BatchRequest, BatchResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<BatchRequest, BatchResponse>("unary", this._transport, method, opt, i);
    }
    batchSame(input: BatchSameRequest, options?: RpcOptions): UnaryCall<BatchSameRequest, BatchSameResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<BatchSameRequest, BatchSameResponse>("unary", this._transport, method, opt, i);
    }
}
