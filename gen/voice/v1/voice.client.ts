// @generated by protobuf-ts 2.0.6 with parameter long_type_string,optimize_code_size,generate_dependencies,optimize_code_size
// @generated from protobuf file "voice/v1/voice.proto" (package "protocol.voice.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { VoiceService } from "./voice";
import type { StreamStateResponse } from "./voice";
import type { StreamStateRequest } from "./voice";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ConnectResponse } from "./voice";
import type { ConnectRequest } from "./voice";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Harmony service for facilitating voice operations using WebRTC.
 *
 * @generated from protobuf service protocol.voice.v1.VoiceService
 */
export interface IVoiceServiceClient {
    /**
     * Endpoint to connect to a voice channel.
     *
     * @generated from protobuf rpc: Connect(protocol.voice.v1.ConnectRequest) returns (protocol.voice.v1.ConnectResponse);
     */
    connect(input: ConnectRequest, options?: RpcOptions): UnaryCall<ConnectRequest, ConnectResponse>;
    /**
     * Endpoint to stream states of a voice connection.
     *
     * @generated from protobuf rpc: StreamState(protocol.voice.v1.StreamStateRequest) returns (stream protocol.voice.v1.StreamStateResponse);
     */
    streamState(input: StreamStateRequest, options?: RpcOptions): ServerStreamingCall<StreamStateRequest, StreamStateResponse>;
}
/**
 * Harmony service for facilitating voice operations using WebRTC.
 *
 * @generated from protobuf service protocol.voice.v1.VoiceService
 */
export class VoiceServiceClient implements IVoiceServiceClient, ServiceInfo {
    typeName = VoiceService.typeName;
    methods = VoiceService.methods;
    options = VoiceService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Endpoint to connect to a voice channel.
     *
     * @generated from protobuf rpc: Connect(protocol.voice.v1.ConnectRequest) returns (protocol.voice.v1.ConnectResponse);
     */
    connect(input: ConnectRequest, options?: RpcOptions): UnaryCall<ConnectRequest, ConnectResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConnectRequest, ConnectResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Endpoint to stream states of a voice connection.
     *
     * @generated from protobuf rpc: StreamState(protocol.voice.v1.StreamStateRequest) returns (stream protocol.voice.v1.StreamStateResponse);
     */
    streamState(input: StreamStateRequest, options?: RpcOptions): ServerStreamingCall<StreamStateRequest, StreamStateResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamStateRequest, StreamStateResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
