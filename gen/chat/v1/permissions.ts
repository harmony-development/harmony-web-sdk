// @generated by protobuf-ts 2.0.6 with parameter long_type_string,optimize_code_size,generate_dependencies,optimize_code_size
// @generated from protobuf file "chat/v1/permissions.proto" (package "protocol.chat.v1", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
import { ItemPosition } from "../../harmonytypes/v1/types";
/**
 * Object representing a single permission node.
 *
 * @generated from protobuf message protocol.chat.v1.Permission
 */
export interface Permission {
    /**
     * the permission matcher. (example: roles.manage)
     *
     * @generated from protobuf field: string matches = 1;
     */
    matches: string;
    /**
     * whether the permission is allowed or not.
     *
     * @generated from protobuf field: bool ok = 2;
     */
    ok: boolean;
}
/**
 * Object representing a role without the ID.
 *
 * @generated from protobuf message protocol.chat.v1.Role
 */
export interface Role {
    /**
     * the role name.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * the role color.
     *
     * @generated from protobuf field: int32 color = 2;
     */
    color: number;
    /**
     * whether the role is hoisted or not.
     *
     * @generated from protobuf field: bool hoist = 3;
     */
    hoist: boolean;
    /**
     * whether the role is mentionable or not.
     *
     * @generated from protobuf field: bool pingable = 4;
     */
    pingable: boolean;
}
/**
 * Object representing a role with it's ID.
 *
 * @generated from protobuf message protocol.chat.v1.RoleWithId
 */
export interface RoleWithId {
    /**
     * ID of the role.
     *
     * @generated from protobuf field: uint64 role_id = 1;
     */
    roleId: string;
    /**
     * The role data.
     *
     * @generated from protobuf field: protocol.chat.v1.Role role = 2;
     */
    role?: Role;
}
/**
 * Used in the `QueryHasPermission` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.QueryHasPermissionRequest
 */
export interface QueryHasPermissionRequest {
    /**
     * the guild ID to query permissions for
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * the channel ID to query permissions for. If not set, it will query
     * permissions for the guild.
     *
     * @generated from protobuf field: optional uint64 channel_id = 2;
     */
    channelId?: string;
    /**
     * the user ID to query permissions for (if not provided, the current user is
     * assumed).
     *
     * @generated from protobuf field: optional uint64 as = 4;
     */
    as?: string;
    /**
     * the permission node to check for.
     *
     * @generated from protobuf field: string check_for = 3;
     */
    checkFor: string;
}
/**
 * Used in the `QueryHasPermission` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.QueryHasPermissionResponse
 */
export interface QueryHasPermissionResponse {
    /**
     * the permissions for the given node.
     *
     * @generated from protobuf field: bool ok = 1;
     */
    ok: boolean;
}
/**
 * Used in the `SetPermissions` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.SetPermissionsRequest
 */
export interface SetPermissionsRequest {
    /**
     * the guild ID to set permissions for.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * the channel ID to set permissions for. Only set if the role is for a
     * channel.
     *
     * @generated from protobuf field: optional uint64 channel_id = 2;
     */
    channelId?: string;
    /**
     * the role ID to set permissions for.
     *
     * @generated from protobuf field: uint64 role_id = 3;
     */
    roleId: string;
    /**
     * the permission list to give.
     *
     * There is no "perms_to_take" because not given permissions are by
     * default not allowed.
     *
     * @generated from protobuf field: repeated protocol.chat.v1.Permission perms_to_give = 4;
     */
    permsToGive: Permission[];
}
/**
 * Used in the `SetPermissions` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.SetPermissionsResponse
 */
export interface SetPermissionsResponse {
}
/**
 * Used in the `GetPermissions` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.GetPermissionsRequest
 */
export interface GetPermissionsRequest {
    /**
     * the guild ID to get permissions for.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * the channel ID to get permissions for. Only applicable for roles in a
     * channel.
     *
     * @generated from protobuf field: optional uint64 channel_id = 2;
     */
    channelId?: string;
    /**
     * the role ID to get permissions for.
     *
     * @generated from protobuf field: uint64 role_id = 3;
     */
    roleId: string;
}
/**
 * Used in the `GetPermissions` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.GetPermissionsResponse
 */
export interface GetPermissionsResponse {
    /**
     * the permissions list for the given role.
     *
     * @generated from protobuf field: repeated protocol.chat.v1.Permission perms = 1;
     */
    perms: Permission[];
}
/**
 * Used in the `MoveRole` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.MoveRoleRequest
 */
export interface MoveRoleRequest {
    /**
     * the guild ID to move the role in.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * the role ID to move.
     *
     * @generated from protobuf field: uint64 role_id = 2;
     */
    roleId: string;
    /**
     * the new position of the role.
     *
     * @generated from protobuf field: protocol.harmonytypes.v1.ItemPosition new_position = 3;
     */
    newPosition?: ItemPosition;
}
/**
 * Used in the `MoveRole` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.MoveRoleResponse
 */
export interface MoveRoleResponse {
}
/**
 * Used in the `GetGuildRoles` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.GetGuildRolesRequest
 */
export interface GetGuildRolesRequest {
    /**
     * the guild ID to get roles for.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
}
/**
 * Used in the `GetGuildRoles` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.GetGuildRolesResponse
 */
export interface GetGuildRolesResponse {
    /**
     * the list of roles in the guild.
     *
     * @generated from protobuf field: repeated protocol.chat.v1.RoleWithId roles = 1;
     */
    roles: RoleWithId[];
}
/**
 * Used in the `AddGuildRole` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.AddGuildRoleRequest
 */
export interface AddGuildRoleRequest {
    /**
     * the guild ID to add the role to.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * the role name.
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * the role color.
     *
     * @generated from protobuf field: int32 color = 3;
     */
    color: number;
    /**
     * whether the role is hoisted or not.
     *
     * @generated from protobuf field: bool hoist = 4;
     */
    hoist: boolean;
    /**
     * whether the role is mentionable or not.
     *
     * @generated from protobuf field: bool pingable = 5;
     */
    pingable: boolean;
}
/**
 * Used in the `AddGuildRole` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.AddGuildRoleResponse
 */
export interface AddGuildRoleResponse {
    /**
     * the ID of the newly created role.
     *
     * @generated from protobuf field: uint64 role_id = 1;
     */
    roleId: string;
}
/**
 * Used in the `DeleteGuildRole` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.DeleteGuildRoleRequest
 */
export interface DeleteGuildRoleRequest {
    /**
     * the guild ID to delete the role from.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * the role ID to delete.
     *
     * @generated from protobuf field: uint64 role_id = 2;
     */
    roleId: string;
}
/**
 * Used in the `DeleteGuildRole` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.DeleteGuildRoleResponse
 */
export interface DeleteGuildRoleResponse {
}
/**
 * Used in the `ModifyGuildRole` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.ModifyGuildRoleRequest
 */
export interface ModifyGuildRoleRequest {
    /**
     * the ID of the guild where the role is located
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * the ID of the role to modify
     *
     * @generated from protobuf field: uint64 role_id = 2;
     */
    roleId: string;
    /**
     * the new name of the role
     *
     * @generated from protobuf field: optional string new_name = 3;
     */
    newName?: string;
    /**
     * the new color of the role
     *
     * @generated from protobuf field: optional int32 new_color = 4;
     */
    newColor?: number;
    /**
     * the new hoist status of the role
     *
     * @generated from protobuf field: optional bool new_hoist = 5;
     */
    newHoist?: boolean;
    /**
     * the new pingable status of the role
     *
     * @generated from protobuf field: optional bool new_pingable = 6;
     */
    newPingable?: boolean;
}
/**
 * Used in the `ModifyGuildRole` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.ModifyGuildRoleResponse
 */
export interface ModifyGuildRoleResponse {
}
/**
 * Used in the `ManageUserRoles` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.ManageUserRolesRequest
 */
export interface ManageUserRolesRequest {
    /**
     * the ID of the guild where the user is being managed
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * the ID of the user to modify
     *
     * @generated from protobuf field: uint64 user_id = 2;
     */
    userId: string;
    /**
     * the IDs of the roles to add
     *
     * @generated from protobuf field: repeated uint64 give_role_ids = 3;
     */
    giveRoleIds: string[];
    /**
     * the IDs of the roles to remove
     *
     * @generated from protobuf field: repeated uint64 take_role_ids = 4;
     */
    takeRoleIds: string[];
}
/**
 * Used in the `ManageUserRoles` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.ManageUserRolesResponse
 */
export interface ManageUserRolesResponse {
}
/**
 * Used in the `GetUserRoles` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.GetUserRolesRequest
 */
export interface GetUserRolesRequest {
    /**
     * the ID of the guild where the user is located
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * the ID of the user to get roles for
     *
     * @generated from protobuf field: uint64 user_id = 2;
     */
    userId: string;
}
/**
 * Used in the `GetUserRoles` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.GetUserRolesResponse
 */
export interface GetUserRolesResponse {
    /**
     * a list of IDs of the roles the user has
     *
     * @generated from protobuf field: repeated uint64 roles = 1;
     */
    roles: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Permission$Type extends MessageType<Permission> {
    constructor() {
        super("protocol.chat.v1.Permission", [
            { no: 1, name: "matches", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ok", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Permission
 */
export const Permission = new Permission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Role$Type extends MessageType<Role> {
    constructor() {
        super("protocol.chat.v1.Role", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "color", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "hoist", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "pingable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Role
 */
export const Role = new Role$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleWithId$Type extends MessageType<RoleWithId> {
    constructor() {
        super("protocol.chat.v1.RoleWithId", [
            { no: 1, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "role", kind: "message", T: () => Role }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.RoleWithId
 */
export const RoleWithId = new RoleWithId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryHasPermissionRequest$Type extends MessageType<QueryHasPermissionRequest> {
    constructor() {
        super("protocol.chat.v1.QueryHasPermissionRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "as", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "check_for", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.QueryHasPermissionRequest
 */
export const QueryHasPermissionRequest = new QueryHasPermissionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryHasPermissionResponse$Type extends MessageType<QueryHasPermissionResponse> {
    constructor() {
        super("protocol.chat.v1.QueryHasPermissionResponse", [
            { no: 1, name: "ok", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.QueryHasPermissionResponse
 */
export const QueryHasPermissionResponse = new QueryHasPermissionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPermissionsRequest$Type extends MessageType<SetPermissionsRequest> {
    constructor() {
        super("protocol.chat.v1.SetPermissionsRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "perms_to_give", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Permission }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.SetPermissionsRequest
 */
export const SetPermissionsRequest = new SetPermissionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPermissionsResponse$Type extends MessageType<SetPermissionsResponse> {
    constructor() {
        super("protocol.chat.v1.SetPermissionsResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.SetPermissionsResponse
 */
export const SetPermissionsResponse = new SetPermissionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPermissionsRequest$Type extends MessageType<GetPermissionsRequest> {
    constructor() {
        super("protocol.chat.v1.GetPermissionsRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.GetPermissionsRequest
 */
export const GetPermissionsRequest = new GetPermissionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPermissionsResponse$Type extends MessageType<GetPermissionsResponse> {
    constructor() {
        super("protocol.chat.v1.GetPermissionsResponse", [
            { no: 1, name: "perms", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Permission }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.GetPermissionsResponse
 */
export const GetPermissionsResponse = new GetPermissionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoveRoleRequest$Type extends MessageType<MoveRoleRequest> {
    constructor() {
        super("protocol.chat.v1.MoveRoleRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "new_position", kind: "message", T: () => ItemPosition }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.MoveRoleRequest
 */
export const MoveRoleRequest = new MoveRoleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoveRoleResponse$Type extends MessageType<MoveRoleResponse> {
    constructor() {
        super("protocol.chat.v1.MoveRoleResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.MoveRoleResponse
 */
export const MoveRoleResponse = new MoveRoleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGuildRolesRequest$Type extends MessageType<GetGuildRolesRequest> {
    constructor() {
        super("protocol.chat.v1.GetGuildRolesRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.GetGuildRolesRequest
 */
export const GetGuildRolesRequest = new GetGuildRolesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGuildRolesResponse$Type extends MessageType<GetGuildRolesResponse> {
    constructor() {
        super("protocol.chat.v1.GetGuildRolesResponse", [
            { no: 1, name: "roles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RoleWithId }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.GetGuildRolesResponse
 */
export const GetGuildRolesResponse = new GetGuildRolesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddGuildRoleRequest$Type extends MessageType<AddGuildRoleRequest> {
    constructor() {
        super("protocol.chat.v1.AddGuildRoleRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "color", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "hoist", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "pingable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.AddGuildRoleRequest
 */
export const AddGuildRoleRequest = new AddGuildRoleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddGuildRoleResponse$Type extends MessageType<AddGuildRoleResponse> {
    constructor() {
        super("protocol.chat.v1.AddGuildRoleResponse", [
            { no: 1, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.AddGuildRoleResponse
 */
export const AddGuildRoleResponse = new AddGuildRoleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteGuildRoleRequest$Type extends MessageType<DeleteGuildRoleRequest> {
    constructor() {
        super("protocol.chat.v1.DeleteGuildRoleRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.DeleteGuildRoleRequest
 */
export const DeleteGuildRoleRequest = new DeleteGuildRoleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteGuildRoleResponse$Type extends MessageType<DeleteGuildRoleResponse> {
    constructor() {
        super("protocol.chat.v1.DeleteGuildRoleResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.DeleteGuildRoleResponse
 */
export const DeleteGuildRoleResponse = new DeleteGuildRoleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModifyGuildRoleRequest$Type extends MessageType<ModifyGuildRoleRequest> {
    constructor() {
        super("protocol.chat.v1.ModifyGuildRoleRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "new_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "new_color", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "new_hoist", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "new_pingable", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.ModifyGuildRoleRequest
 */
export const ModifyGuildRoleRequest = new ModifyGuildRoleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModifyGuildRoleResponse$Type extends MessageType<ModifyGuildRoleResponse> {
    constructor() {
        super("protocol.chat.v1.ModifyGuildRoleResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.ModifyGuildRoleResponse
 */
export const ModifyGuildRoleResponse = new ModifyGuildRoleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManageUserRolesRequest$Type extends MessageType<ManageUserRolesRequest> {
    constructor() {
        super("protocol.chat.v1.ManageUserRolesRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "give_role_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "take_role_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.ManageUserRolesRequest
 */
export const ManageUserRolesRequest = new ManageUserRolesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManageUserRolesResponse$Type extends MessageType<ManageUserRolesResponse> {
    constructor() {
        super("protocol.chat.v1.ManageUserRolesResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.ManageUserRolesResponse
 */
export const ManageUserRolesResponse = new ManageUserRolesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserRolesRequest$Type extends MessageType<GetUserRolesRequest> {
    constructor() {
        super("protocol.chat.v1.GetUserRolesRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.GetUserRolesRequest
 */
export const GetUserRolesRequest = new GetUserRolesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserRolesResponse$Type extends MessageType<GetUserRolesResponse> {
    constructor() {
        super("protocol.chat.v1.GetUserRolesResponse", [
            { no: 1, name: "roles", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.GetUserRolesResponse
 */
export const GetUserRolesResponse = new GetUserRolesResponse$Type();
