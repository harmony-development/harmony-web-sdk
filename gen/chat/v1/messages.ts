// @generated by protobuf-ts 2.0.7 with parameter long_type_string,optimize_code_size,generate_dependencies,optimize_code_size
// @generated from protobuf file "chat/v1/messages.proto" (package "protocol.chat.v1", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
import { Metadata } from "../../harmonytypes/v1/types";
import { Emote } from "../../emote/v1/types";
import { Empty } from "../../harmonytypes/v1/types";
/**
 * Overrides provide a way to override the name and avatar of a message.
 *
 * @generated from protobuf message protocol.chat.v1.Overrides
 */
export interface Overrides {
    /**
     * the overridden username.
     *
     * @generated from protobuf field: optional string username = 1;
     */
    username?: string;
    /**
     * the overridden avatar.
     *
     * @generated from protobuf field: optional string avatar = 2;
     */
    avatar?: string;
    /**
     * @generated from protobuf oneof: reason
     */
    reason: {
        oneofKind: "userDefined";
        /**
         * a custom reason in case the builtin ones don't fit
         *
         * @generated from protobuf field: string user_defined = 3;
         */
        userDefined: string;
    } | {
        oneofKind: "webhook";
        /**
         * the override occured because of a webhook
         *
         * @generated from protobuf field: protocol.harmonytypes.v1.Empty webhook = 4;
         */
        webhook: Empty;
    } | {
        oneofKind: "systemPlurality";
        /**
         * plurality, not system as in computer
         *
         * @generated from protobuf field: protocol.harmonytypes.v1.Empty system_plurality = 5;
         */
        systemPlurality: Empty;
    } | {
        oneofKind: "systemMessage";
        /**
         * the override occured because it was made by the server
         *
         * Servers should reject messages sent by users with this override.
         *
         * @generated from protobuf field: protocol.harmonytypes.v1.Empty system_message = 6;
         */
        systemMessage: Empty;
    } | {
        oneofKind: "bridge";
        /**
         * the override occured because of bridging
         *
         * @generated from protobuf field: protocol.harmonytypes.v1.Empty bridge = 7;
         */
        bridge: Empty;
    } | {
        oneofKind: undefined;
    };
}
/**
 * The payload sent to the bot when an action is triggered.
 *
 * @generated from protobuf message protocol.chat.v1.ActionPayload
 */
export interface ActionPayload {
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "button";
        /**
         * Payload for a button
         *
         * @generated from protobuf field: protocol.chat.v1.ActionPayload.Button button = 1;
         */
        button: ActionPayload_Button;
    } | {
        oneofKind: "dropdown";
        /**
         * Payload for a dropdown
         *
         * @generated from protobuf field: protocol.chat.v1.ActionPayload.Dropdown dropdown = 2;
         */
        dropdown: ActionPayload_Dropdown;
    } | {
        oneofKind: "input";
        /**
         * Payload for a text input
         *
         * @generated from protobuf field: protocol.chat.v1.ActionPayload.Input input = 3;
         */
        input: ActionPayload_Input;
    } | {
        oneofKind: undefined;
    };
}
/**
 * The payload data for a button action
 *
 * @generated from protobuf message protocol.chat.v1.ActionPayload.Button
 */
export interface ActionPayload_Button {
    /**
     * The data from the Button action
     *
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
}
/**
 * The payload for a dropdown action
 *
 * @generated from protobuf message protocol.chat.v1.ActionPayload.Dropdown
 */
export interface ActionPayload_Dropdown {
    /**
     * The user choice from the dropdown.
     *
     * @generated from protobuf field: bytes choice = 1;
     */
    choice: Uint8Array;
}
/**
 * The payload for a text input action
 *
 * @generated from protobuf message protocol.chat.v1.ActionPayload.Input
 */
export interface ActionPayload_Input {
    /**
     * The user input.
     *
     * @generated from protobuf field: string input = 1;
     */
    input: string;
    /**
     * The bot-provided data
     *
     * @generated from protobuf field: bytes data = 2;
     */
    data: Uint8Array;
}
/**
 * Actions are interactive elements that can exist within an embed.
 *
 * @generated from protobuf message protocol.chat.v1.Action
 */
export interface Action {
    /**
     * Type of the action.
     *
     * @generated from protobuf field: protocol.chat.v1.Action.Type action_type = 1;
     */
    actionType: Action_Type;
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "button";
        /**
         * Button action.
         *
         * @generated from protobuf field: protocol.chat.v1.Action.Button button = 2;
         */
        button: Action_Button;
    } | {
        oneofKind: "dropdown";
        /**
         * Dropdown action.
         *
         * @generated from protobuf field: protocol.chat.v1.Action.Dropdown dropdown = 3;
         */
        dropdown: Action_Dropdown;
    } | {
        oneofKind: "input";
        /**
         * Input action.
         *
         * @generated from protobuf field: protocol.chat.v1.Action.Input input = 4;
         */
        input: Action_Input;
    } | {
        oneofKind: undefined;
    };
}
/**
 * A button that users can click on to trigger an action.
 *
 * @generated from protobuf message protocol.chat.v1.Action.Button
 */
export interface Action_Button {
    /**
     * The text to show on the button.
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * Action data, which should be used in the call to perform the action.
     *
     * @generated from protobuf field: bytes data = 2;
     */
    data: Uint8Array;
    /**
     * An external URL that the button links to.
     * This makes it so that tapping this button will open said URL instead
     * of triggering the action.
     *
     * @generated from protobuf field: optional string url = 3;
     */
    url?: string;
}
/**
 * A dropdown menu that users can click on to trigger an action.
 *
 * @generated from protobuf message protocol.chat.v1.Action.Dropdown
 */
export interface Action_Dropdown {
    /**
     * The text describing the dropdown.
     *
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * The options in the dropdown.
     *
     * @generated from protobuf field: repeated protocol.chat.v1.Action.Dropdown.Entry entries = 2;
     */
    entries: Action_Dropdown_Entry[];
}
/**
 * An entry in the dropdown
 *
 * @generated from protobuf message protocol.chat.v1.Action.Dropdown.Entry
 */
export interface Action_Dropdown_Entry {
    /**
     * The dropdown's UI label.
     *
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * The dropdown's associated data.
     *
     * @generated from protobuf field: bytes data = 2;
     */
    data: Uint8Array;
}
/**
 * A text input that users can type in to trigger an action.
 *
 * @generated from protobuf message protocol.chat.v1.Action.Input
 */
export interface Action_Input {
    /**
     * The label describing the input.
     *
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * Whether this text input should be a multiline one or not.
     *
     * @generated from protobuf field: bool multiline = 2;
     */
    multiline: boolean;
    /**
     * Contextual data allowing the bot to discern what the user input is for
     *
     * @generated from protobuf field: bytes data = 3;
     */
    data: Uint8Array;
}
/**
 * The action type. This is primarily used to change the look of the action to
 * the user (example: Destructive actions will have a red background).
 *
 * @generated from protobuf enum protocol.chat.v1.Action.Type
 */
export enum Action_Type {
    /**
     * a normal action.
     *
     * @generated from protobuf enum value: TYPE_NORMAL_UNSPECIFIED = 0;
     */
    NORMAL_UNSPECIFIED = 0,
    /**
     * a primary action.
     *
     * @generated from protobuf enum value: TYPE_PRIMARY = 1;
     */
    PRIMARY = 1,
    /**
     * A destructive / dangerous action.
     *
     * @generated from protobuf enum value: TYPE_DESTRUCTIVE = 2;
     */
    DESTRUCTIVE = 2
}
/**
 * Object representing a message embed.
 *
 * @generated from protobuf message protocol.chat.v1.Embed
 */
export interface Embed {
    /**
     * Title of this embed.
     *
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * Body text of this embed.
     *
     * @generated from protobuf field: optional protocol.chat.v1.FormattedText body = 2;
     */
    body?: FormattedText;
    /**
     * Color of this embed.
     *
     * @generated from protobuf field: optional int32 color = 3;
     */
    color?: number;
    /**
     * Embed heading for the header.
     *
     * @generated from protobuf field: optional protocol.chat.v1.Embed.EmbedHeading header = 4;
     */
    header?: Embed_EmbedHeading;
    /**
     * Embed heading for the footer.
     *
     * @generated from protobuf field: optional protocol.chat.v1.Embed.EmbedHeading footer = 5;
     */
    footer?: Embed_EmbedHeading;
    /**
     * Fields of this embed.
     *
     * @generated from protobuf field: repeated protocol.chat.v1.Embed.EmbedField fields = 6;
     */
    fields: Embed_EmbedField[];
}
/**
 * Object representing an embed heading.
 *
 * @generated from protobuf message protocol.chat.v1.Embed.EmbedHeading
 */
export interface Embed_EmbedHeading {
    /**
     * Text of the heading.
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * Subtext of the heading.
     *
     * @generated from protobuf field: optional string subtext = 2;
     */
    subtext?: string;
    /**
     * URL of the heading.
     *
     * @generated from protobuf field: optional string url = 3;
     */
    url?: string;
    /**
     * Icon of the heading.
     *
     * @generated from protobuf field: optional string icon = 4;
     */
    icon?: string;
}
/**
 * Object representing an embed field.
 *
 * @generated from protobuf message protocol.chat.v1.Embed.EmbedField
 */
export interface Embed_EmbedField {
    /**
     * Title of this field.
     *
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * Subtitle of this field.
     *
     * @generated from protobuf field: optional string subtitle = 2;
     */
    subtitle?: string;
    /**
     * Body text of this field (eg. a description).
     *
     * @generated from protobuf field: optional protocol.chat.v1.FormattedText body = 3;
     */
    body?: FormattedText;
    /**
     * Image URL of this field.
     *
     * @generated from protobuf field: optional string image_url = 4;
     */
    imageUrl?: string;
    /**
     * How to present this field.
     *
     * @generated from protobuf field: protocol.chat.v1.Embed.EmbedField.Presentation presentation = 5;
     */
    presentation: Embed_EmbedField_Presentation;
    /**
     * Actions of this field.
     *
     * @generated from protobuf field: repeated protocol.chat.v1.Action actions = 6;
     */
    actions: Action[];
}
/**
 * Type representing how to present an embed field.
 *
 * @generated from protobuf enum protocol.chat.v1.Embed.EmbedField.Presentation
 */
export enum Embed_EmbedField_Presentation {
    /**
     * Show the field as data.
     *
     * @generated from protobuf enum value: PRESENTATION_DATA_UNSPECIFIED = 0;
     */
    DATA_UNSPECIFIED = 0,
    /**
     * Show the field as a captioned image.
     *
     * @generated from protobuf enum value: PRESENTATION_CAPTIONED_IMAGE = 1;
     */
    CAPTIONED_IMAGE = 1,
    /**
     * Show the field as a row.
     *
     * @generated from protobuf enum value: PRESENTATION_ROW = 2;
     */
    ROW = 2
}
/**
 *
 * Minithumbnail is an extremely low-quality JPEG thumbnail.
 *
 * The resolution is usually no larger than 64x64.
 *
 * @generated from protobuf message protocol.chat.v1.Minithumbnail
 */
export interface Minithumbnail {
    /**
     * The width of the minithumbnail
     *
     * @generated from protobuf field: uint32 width = 1;
     */
    width: number;
    /**
     * The height of the minithumbnail
     *
     * @generated from protobuf field: uint32 height = 2;
     */
    height: number;
    /**
     * The JPEG data of the minithumbnail
     *
     * @generated from protobuf field: bytes data = 3;
     */
    data: Uint8Array;
}
/**
 *
 * Photo contains data about a photo.
 *
 * Photo are always JPEG, and are
 * constrained to the following rules:
 *
 * - width+height <= 10_000
 * - width <= height*20
 * - height <= width*20
 *
 * Photos are preferably no more than 10MB
 * in size, and servers may compress as necessary.
 *
 * @generated from protobuf message protocol.chat.v1.Photo
 */
export interface Photo {
    /**
     * The HMC URL of the photo.
     *
     * @generated from protobuf field: string hmc = 1;
     */
    hmc: string;
    /**
     * The filename of the photo.
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * The size of the photo.
     *
     * @generated from protobuf field: uint32 file_size = 3;
     */
    fileSize: number;
    /**
     * The height of the photo, in pixels.
     *
     * @generated from protobuf field: uint32 height = 4;
     */
    height: number;
    /**
     * The width of the photo, in pixels.
     *
     * @generated from protobuf field: uint32 width = 5;
     */
    width: number;
    /**
     * The photo's caption.
     *
     * @generated from protobuf field: protocol.chat.v1.FormattedText caption = 6;
     */
    caption?: FormattedText;
    /**
     * A thumbnail representing the photo.
     *
     * @generated from protobuf field: protocol.chat.v1.Minithumbnail minithumbnail = 7;
     */
    minithumbnail?: Minithumbnail;
}
/**
 * Object representing a generic message attachment.
 *
 * @generated from protobuf message protocol.chat.v1.Attachment
 */
export interface Attachment {
    /**
     * File ID of this attachment.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * Filename of this attachment.
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * Mimetype of this attachment.
     *
     * @generated from protobuf field: string mimetype = 3;
     */
    mimetype: string;
    /**
     * Size of this attachment.
     *
     * @generated from protobuf field: uint32 size = 4;
     */
    size: number;
    /**
     * Caption of this attachment.
     *
     * @generated from protobuf field: optional protocol.chat.v1.FormattedText caption = 5;
     */
    caption?: FormattedText;
}
/**
 * Object representing a message's content.
 *
 * @generated from protobuf message protocol.chat.v1.Content
 */
export interface Content {
    /**
     * @generated from protobuf oneof: content
     */
    content: {
        oneofKind: "textMessage";
        /**
         * Text content.
         *
         * @generated from protobuf field: protocol.chat.v1.Content.TextContent text_message = 1;
         */
        textMessage: Content_TextContent;
    } | {
        oneofKind: "embedMessage";
        /**
         * Embed content.
         *
         * @generated from protobuf field: protocol.chat.v1.Content.EmbedContent embed_message = 2;
         */
        embedMessage: Content_EmbedContent;
    } | {
        oneofKind: "attachmentMessage";
        /**
         * Attachment content.
         *
         * @generated from protobuf field: protocol.chat.v1.Content.AttachmentContent attachment_message = 3;
         */
        attachmentMessage: Content_AttachmentContent;
    } | {
        oneofKind: "photoMessage";
        /**
         * Photo content.
         *
         * @generated from protobuf field: protocol.chat.v1.Content.PhotoContent photo_message = 4;
         */
        photoMessage: Content_PhotoContent;
    } | {
        oneofKind: "inviteRejected";
        /**
         * A user rejected an invite.
         *
         * @generated from protobuf field: protocol.chat.v1.Content.InviteRejected invite_rejected = 5;
         */
        inviteRejected: Content_InviteRejected;
    } | {
        oneofKind: "inviteAccepted";
        /**
         * A user accepted an invite.
         *
         * @generated from protobuf field: protocol.chat.v1.Content.InviteAccepted invite_accepted = 6;
         */
        inviteAccepted: Content_InviteAccepted;
    } | {
        oneofKind: "roomUpgradedToGuild";
        /**
         * A user upgraded a guild from "room" to "normal".
         *
         * @generated from protobuf field: protocol.chat.v1.Content.RoomUpgradedToGuild room_upgraded_to_guild = 7;
         */
        roomUpgradedToGuild: Content_RoomUpgradedToGuild;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Object representing text content.
 *
 * @generated from protobuf message protocol.chat.v1.Content.TextContent
 */
export interface Content_TextContent {
    /**
     * Text content.
     *
     * @generated from protobuf field: protocol.chat.v1.FormattedText content = 1;
     */
    content?: FormattedText;
}
/**
 * Object representing embed content.
 *
 * @generated from protobuf message protocol.chat.v1.Content.EmbedContent
 */
export interface Content_EmbedContent {
    /**
     * Embed content.
     *
     * @generated from protobuf field: repeated protocol.chat.v1.Embed embeds = 1;
     */
    embeds: Embed[];
}
/**
 * Object representing attachment content.
 *
 * @generated from protobuf message protocol.chat.v1.Content.AttachmentContent
 */
export interface Content_AttachmentContent {
    /**
     * A list of attachments.
     *
     * @generated from protobuf field: repeated protocol.chat.v1.Attachment files = 1;
     */
    files: Attachment[];
}
/**
 * Object representing photo content.
 *
 * @generated from protobuf message protocol.chat.v1.Content.PhotoContent
 */
export interface Content_PhotoContent {
    /**
     * A list of photos.
     *
     * @generated from protobuf field: repeated protocol.chat.v1.Photo photos = 1;
     */
    photos: Photo[];
}
/**
 * Represents a user rejecting an invite.
 *
 * This can only be used by servers themselves. Servers should reject
 * messages with this content if they are sent by a user.
 *
 * @generated from protobuf message protocol.chat.v1.Content.InviteRejected
 */
export interface Content_InviteRejected {
    /**
     * User ID of the invitee.
     *
     * @generated from protobuf field: uint64 invitee_id = 1;
     */
    inviteeId: string;
    /**
     * User ID of the inviter.
     *
     * @generated from protobuf field: uint64 inviter_id = 2;
     */
    inviterId: string;
}
/**
 * Represents a user accepting an invite.
 *
 * This can only be used by servers themselves. Servers should reject
 * messages with this content if they are sent by a user.
 *
 * @generated from protobuf message protocol.chat.v1.Content.InviteAccepted
 */
export interface Content_InviteAccepted {
    /**
     * User ID of the invitee.
     *
     * @generated from protobuf field: uint64 invitee_id = 1;
     */
    inviteeId: string;
    /**
     * User ID of the inviter.
     *
     * @generated from protobuf field: uint64 inviter_id = 2;
     */
    inviterId: string;
}
/**
 * Represents a guild upgrade from "room" to "normal".
 *
 * This can only be used by servers themselves. Servers should reject
 * messages with this content if they are sent by a user.
 *
 * @generated from protobuf message protocol.chat.v1.Content.RoomUpgradedToGuild
 */
export interface Content_RoomUpgradedToGuild {
    /**
     * User ID of the user that upgraded the guild.
     *
     * @generated from protobuf field: uint64 upgraded_by = 1;
     */
    upgradedBy: string;
}
/**
 * Object representing a reaction.
 *
 * @generated from protobuf message protocol.chat.v1.Reaction
 */
export interface Reaction {
    /**
     * Emote data for this reaction.
     *
     * Emote's image ID is used as an identifier for unique reactions.
     * Emotes with the same names should be "deduplicated" by a client, by suffixing
     * their names with `~1`, `~2` and so on.
     *
     * @generated from protobuf field: protocol.emote.v1.Emote emote = 1;
     */
    emote?: Emote;
    /**
     * How many reactions this reaction has.
     *
     * @generated from protobuf field: uint32 count = 2;
     */
    count: number;
}
/**
 * A format for text
 *
 * @generated from protobuf message protocol.chat.v1.Format
 */
export interface Format {
    /**
     * where the format begins to apply to
     *
     * @generated from protobuf field: uint32 start = 1;
     */
    start: number;
    /**
     * how many characters the format is
     *
     * @generated from protobuf field: uint32 length = 2;
     */
    length: number;
    /**
     * @generated from protobuf oneof: format
     */
    format: {
        oneofKind: "bold";
        /**
         * a text format for bold text
         *
         * @generated from protobuf field: protocol.chat.v1.Format.Bold bold = 3;
         */
        bold: Format_Bold;
    } | {
        oneofKind: "italic";
        /**
         * a text format for italic text
         *
         * @generated from protobuf field: protocol.chat.v1.Format.Italic italic = 4;
         */
        italic: Format_Italic;
    } | {
        oneofKind: "underline";
        /**
         * a text format for underline text
         *
         * @generated from protobuf field: protocol.chat.v1.Format.Underline underline = 5;
         */
        underline: Format_Underline;
    } | {
        oneofKind: "monospace";
        /**
         * a text format for monospace text
         *
         * @generated from protobuf field: protocol.chat.v1.Format.Monospace monospace = 6;
         */
        monospace: Format_Monospace;
    } | {
        oneofKind: "superscript";
        /**
         * a text format for superscript text
         *
         * @generated from protobuf field: protocol.chat.v1.Format.Superscript superscript = 7;
         */
        superscript: Format_Superscript;
    } | {
        oneofKind: "subscript";
        /**
         * a text format for subscript text
         *
         * @generated from protobuf field: protocol.chat.v1.Format.Subscript subscript = 8;
         */
        subscript: Format_Subscript;
    } | {
        oneofKind: "codeBlock";
        /**
         * a text format for a codeblock
         *
         * @generated from protobuf field: protocol.chat.v1.Format.CodeBlock code_block = 9;
         */
        codeBlock: Format_CodeBlock;
    } | {
        oneofKind: "userMention";
        /**
         * a text format for a user mention
         *
         * @generated from protobuf field: protocol.chat.v1.Format.UserMention user_mention = 10;
         */
        userMention: Format_UserMention;
    } | {
        oneofKind: "roleMention";
        /**
         * a text format for a role mention
         *
         * @generated from protobuf field: protocol.chat.v1.Format.RoleMention role_mention = 11;
         */
        roleMention: Format_RoleMention;
    } | {
        oneofKind: "channelMention";
        /**
         * a text format for a channel mention
         *
         * @generated from protobuf field: protocol.chat.v1.Format.ChannelMention channel_mention = 12;
         */
        channelMention: Format_ChannelMention;
    } | {
        oneofKind: "guildMention";
        /**
         * a text format for a guild mention
         *
         * @generated from protobuf field: protocol.chat.v1.Format.GuildMention guild_mention = 13;
         */
        guildMention: Format_GuildMention;
    } | {
        oneofKind: "emoji";
        /**
         * a text format for an emoji
         *
         * @generated from protobuf field: protocol.chat.v1.Format.Emoji emoji = 14;
         */
        emoji: Format_Emoji;
    } | {
        oneofKind: "color";
        /**
         * a text format for coloured text
         *
         * @generated from protobuf field: protocol.chat.v1.Format.Color color = 15;
         */
        color: Format_Color;
    } | {
        oneofKind: "localization";
        /**
         * a text format for localization
         *
         * @generated from protobuf field: protocol.chat.v1.Format.Localization localization = 16;
         */
        localization: Format_Localization;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Bold text
 *
 * @generated from protobuf message protocol.chat.v1.Format.Bold
 */
export interface Format_Bold {
}
/**
 * Italic text
 *
 * @generated from protobuf message protocol.chat.v1.Format.Italic
 */
export interface Format_Italic {
}
/**
 * Underlined text
 *
 * @generated from protobuf message protocol.chat.v1.Format.Underline
 */
export interface Format_Underline {
}
/**
 * Monospace text
 *
 * @generated from protobuf message protocol.chat.v1.Format.Monospace
 */
export interface Format_Monospace {
}
/**
 * Superscript text
 *
 * @generated from protobuf message protocol.chat.v1.Format.Superscript
 */
export interface Format_Superscript {
}
/**
 * Subscript text
 *
 * @generated from protobuf message protocol.chat.v1.Format.Subscript
 */
export interface Format_Subscript {
}
/**
 * A larger codeblock, with a programming language specified
 * Clients should ideally not bound the width of codeblock messages,
 * possibly scrolling the codeblock horizontally separately from the
 * rest of the message
 *
 * @generated from protobuf message protocol.chat.v1.Format.CodeBlock
 */
export interface Format_CodeBlock {
    /**
     * programming language of the code block
     *
     * @generated from protobuf field: string language = 1;
     */
    language: string;
}
/**
 * Mention of a user (on the current homeserver)
 *
 * @generated from protobuf message protocol.chat.v1.Format.UserMention
 */
export interface Format_UserMention {
    /**
     * user_id of the user being mentioned
     *
     * @generated from protobuf field: uint64 user_id = 1;
     */
    userId: string;
}
/**
 * Mention of a role (on the current guild)
 *
 * @generated from protobuf message protocol.chat.v1.Format.RoleMention
 */
export interface Format_RoleMention {
    /**
     * the role being mentioned
     *
     * @generated from protobuf field: uint64 role_id = 1;
     */
    roleId: string;
}
/**
 * Mention of a channel (on the current guild)
 *
 * @generated from protobuf message protocol.chat.v1.Format.ChannelMention
 */
export interface Format_ChannelMention {
    /**
     * the channel being mentioned
     *
     * @generated from protobuf field: uint64 channel_id = 1;
     */
    channelId: string;
}
/**
 * Mention of a guild
 *
 * @generated from protobuf message protocol.chat.v1.Format.GuildMention
 */
export interface Format_GuildMention {
    /**
     * the guild being mentioned
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * which homeserver it belongs to
     *
     * @generated from protobuf field: string homeserver = 2;
     */
    homeserver: string;
}
/**
 * An emoji
 *
 * @generated from protobuf message protocol.chat.v1.Format.Emoji
 */
export interface Format_Emoji {
    /**
     * The HMC URL of the emoji
     *
     * @generated from protobuf field: string image_hmc = 1;
     */
    imageHmc: string;
    /**
     * The ID of the emoji pack the emoji is from
     *
     * @generated from protobuf field: uint64 pack_id = 2;
     */
    packId: string;
}
/**
 * Colour modification
 *
 * @generated from protobuf message protocol.chat.v1.Format.Color
 */
export interface Format_Color {
    /**
     * The kind of colour modification to apply
     *
     * @generated from protobuf field: protocol.chat.v1.Format.Color.Kind kind = 1;
     */
    kind: Format_Color_Kind;
}
/**
 * The kind of colour modification to apply
 *
 * @generated from protobuf enum protocol.chat.v1.Format.Color.Kind
 */
export enum Format_Color_Kind {
    /**
     * Dimmed colour
     *
     * @generated from protobuf enum value: KIND_DIM_UNSPECIFIED = 0;
     */
    DIM_UNSPECIFIED = 0,
    /**
     * Brightened colour
     *
     * @generated from protobuf enum value: KIND_BRIGHT = 1;
     */
    BRIGHT = 1,
    /**
     * Negative colour (usually red)
     *
     * @generated from protobuf enum value: KIND_NEGATIVE = 2;
     */
    NEGATIVE = 2,
    /**
     * Positive colour (usually green)
     *
     * @generated from protobuf enum value: KIND_POSITIVE = 3;
     */
    POSITIVE = 3,
    /**
     * Informational colour (usually blue)
     *
     * @generated from protobuf enum value: KIND_INFO = 4;
     */
    INFO = 4,
    /**
     * Warning colour (usually yellow-orange)
     *
     * @generated from protobuf enum value: KIND_WARNING = 5;
     */
    WARNING = 5
}
/**
 * Replace a part of the text with the text matching the i18n code.
 * If i18n code was not found, keep the original text.
 *
 * @generated from protobuf message protocol.chat.v1.Format.Localization
 */
export interface Format_Localization {
    /**
     * i18n code for the text.
     *
     * @generated from protobuf field: string i18n_code = 1 [json_name = "i18nCode"];
     */
    i18NCode: string;
}
/**
 * Formatted text
 *
 * @generated from protobuf message protocol.chat.v1.FormattedText
 */
export interface FormattedText {
    /**
     * The textual content of a message
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * The formats for a message
     *
     * @generated from protobuf field: repeated protocol.chat.v1.Format format = 2;
     */
    format: Format[];
}
/**
 * Object representing a message without the ID part.
 *
 * @generated from protobuf message protocol.chat.v1.Message
 */
export interface Message {
    /**
     * Metadata of this message.
     *
     * @generated from protobuf field: optional protocol.harmonytypes.v1.Metadata metadata = 1;
     */
    metadata?: Metadata;
    /**
     * Overrides of this message.
     *
     * @generated from protobuf field: protocol.chat.v1.Overrides overrides = 2;
     */
    overrides?: Overrides;
    /**
     * User ID of the user who sent this message.
     *
     * @generated from protobuf field: uint64 author_id = 3;
     */
    authorId: string;
    /**
     * When this message was created, in miliseconds since unix epoch
     *
     * @generated from protobuf field: uint64 created_at = 4;
     */
    createdAt: string;
    /**
     * The most recent time this message was edited, in milliseconds since unix epoch
     *
     * @generated from protobuf field: optional uint64 edited_at = 5;
     */
    editedAt?: string;
    /**
     * The message this message is a reply to.
     *
     * @generated from protobuf field: optional uint64 in_reply_to = 6;
     */
    inReplyTo?: string;
    /**
     * The content of the message.
     *
     * @generated from protobuf field: protocol.chat.v1.Content content = 7;
     */
    content?: Content;
    /**
     * The reactions of the message.
     *
     * @generated from protobuf field: repeated protocol.chat.v1.Reaction reactions = 8;
     */
    reactions: Reaction[];
}
/**
 * Object representing a message with it's ID.
 *
 * @generated from protobuf message protocol.chat.v1.MessageWithId
 */
export interface MessageWithId {
    /**
     * ID of the message.
     *
     * @generated from protobuf field: uint64 message_id = 1;
     */
    messageId: string;
    /**
     * The message data.
     *
     * @generated from protobuf field: protocol.chat.v1.Message message = 2;
     */
    message?: Message;
}
/**
 * Used in the `GetChannelMessages` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.GetChannelMessagesRequest
 */
export interface GetChannelMessagesRequest {
    /**
     * Guild ID of the guild that has the channel.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel to get messages from.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * The ID of the message that will be used as an "anchor" point to figure out
     * where to get the messages.
     * If not specified, the `direction` will be ignored and the newest messages
     * will be returned.
     *
     * @generated from protobuf field: optional uint64 message_id = 3;
     */
    messageId?: string;
    /**
     * On which direction to get the messages.
     *
     * - By default, it is "before", which means you will get messages before the
     * `message_id` message.
     * - If it is "around", you will get the messages around the `message_id`
     * message. This will include the `message_id` message itself, as the middle
     * item of the list returned.
     * - If it is "after", you will get the messages after the `message_id`
     * message.
     *
     * @generated from protobuf field: optional protocol.chat.v1.GetChannelMessagesRequest.Direction direction = 4;
     */
    direction?: GetChannelMessagesRequest_Direction;
    /**
     * How many messages to get.
     *
     * - If `0`, a recommended message count to return is 25. If the direction is
     * "around", the recommended value is 12.
     * - If the direction to get the messages is "around", this count will not be
     * the *total* count of messages to return, but instead the count of messages
     * to return *for each direction*, before and after.
     * - Servers should enforce their own maximum limit, and clamp this value to
     * the limit.
     *
     * @generated from protobuf field: optional uint32 count = 5;
     */
    count?: number;
}
/**
 * The direction relative to the `message_id` message to get messages from.
 *
 * @generated from protobuf enum protocol.chat.v1.GetChannelMessagesRequest.Direction
 */
export enum GetChannelMessagesRequest_Direction {
    /**
     * Get messages before the anchor.
     *
     * @generated from protobuf enum value: DIRECTION_BEFORE_UNSPECIFIED = 0;
     */
    BEFORE_UNSPECIFIED = 0,
    /**
     * Get messages around the anchor, including the anchor.
     *
     * @generated from protobuf enum value: DIRECTION_AROUND = 1;
     */
    AROUND = 1,
    /**
     * Get messages after the anchor.
     *
     * @generated from protobuf enum value: DIRECTION_AFTER = 2;
     */
    AFTER = 2
}
/**
 * Used in the `GetChannelMessages` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.GetChannelMessagesResponse
 */
export interface GetChannelMessagesResponse {
    /**
     * Has reached the top (first message) of the message history.
     *
     * @generated from protobuf field: bool reached_top = 1;
     */
    reachedTop: boolean;
    /**
     * Has reached the bottom (last message) of the message history.
     *
     * @generated from protobuf field: bool reached_bottom = 2;
     */
    reachedBottom: boolean;
    /**
     * The messages requested.
     *
     * @generated from protobuf field: repeated protocol.chat.v1.MessageWithId messages = 3;
     */
    messages: MessageWithId[];
}
/**
 * Used in the `GetMessage` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.GetMessageRequest
 */
export interface GetMessageRequest {
    /**
     * Guild ID of the guild where the channel is.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where the message is.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message you want to get.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
}
/**
 * Used in the `GetMessage` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.GetMessageResponse
 */
export interface GetMessageResponse {
    /**
     * The message requested.
     *
     * @generated from protobuf field: protocol.chat.v1.Message message = 1;
     */
    message?: Message;
}
/**
 * Used in the `DeleteMessage` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.DeleteMessageRequest
 */
export interface DeleteMessageRequest {
    /**
     * Guild ID of the guild where the channel is.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where the message is.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message you want to delete.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
}
/**
 * Used in the `DeleteMessage` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.DeleteMessageResponse
 */
export interface DeleteMessageResponse {
}
/**
 * Used in the `TriggerAction` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.TriggerActionRequest
 */
export interface TriggerActionRequest {
    /**
     * Guild ID of the guild where the channel is.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where the message is.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message you want to trigger an action in.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
    /**
     * Payload of action data.
     *
     * @generated from protobuf field: protocol.chat.v1.ActionPayload payload = 4;
     */
    payload?: ActionPayload;
}
/**
 * Used in the `TriggerAction` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.TriggerActionResponse
 */
export interface TriggerActionResponse {
}
/**
 * Used in the `SendMessage` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.SendMessageRequest
 */
export interface SendMessageRequest {
    /**
     * Guild ID of the guild where the channel is.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel you want to send a message in.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Content of the new message.
     *
     * @generated from protobuf field: protocol.chat.v1.Content content = 3;
     */
    content?: Content;
    /**
     * Echo ID of the new message. This can be used by clients to
     * determine whether a message is sent.
     *
     * @generated from protobuf field: optional uint64 echo_id = 4;
     */
    echoId?: string;
    /**
     * The overrides of this new message.
     *
     * @generated from protobuf field: optional protocol.chat.v1.Overrides overrides = 6;
     */
    overrides?: Overrides;
    /**
     * The message this new message is a reply to.
     *
     * @generated from protobuf field: optional uint64 in_reply_to = 7;
     */
    inReplyTo?: string;
    /**
     * The metadata of this new message.
     *
     * @generated from protobuf field: optional protocol.harmonytypes.v1.Metadata metadata = 5;
     */
    metadata?: Metadata;
}
/**
 * Used in the `SendMessage` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.SendMessageResponse
 */
export interface SendMessageResponse {
    /**
     * Message ID of the message sent.
     *
     * @generated from protobuf field: uint64 message_id = 1;
     */
    messageId: string;
}
/**
 * Used in the `UpdateMessageText` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.UpdateMessageTextRequest
 */
export interface UpdateMessageTextRequest {
    /**
     * Guild ID of the guild where the channel is.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where the message is.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message you want to edit the text of.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
    /**
     * New content for this message.
     *
     * @generated from protobuf field: protocol.chat.v1.FormattedText new_content = 4;
     */
    newContent?: FormattedText;
}
/**
 * Used in the `UpdateMessageText` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.UpdateMessageTextResponse
 */
export interface UpdateMessageTextResponse {
}
/**
 * Used in the `PinMessage` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.PinMessageRequest
 */
export interface PinMessageRequest {
    /**
     * Guild ID of the guild where the channel is.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where the message is.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message we want to pin.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
}
/**
 * Used in the `UnpinMessage` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.PinMessageResponse
 */
export interface PinMessageResponse {
}
/**
 * Used in the `UnpinMessage` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.UnpinMessageRequest
 */
export interface UnpinMessageRequest {
    /**
     * Guild ID of the guild where the channel is.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where the message is.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message we want to unpin.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
}
/**
 * Used in the `UnpinMessage` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.UnpinMessageResponse
 */
export interface UnpinMessageResponse {
}
/**
 * Used in the `GetPinnedMessages` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.GetPinnedMessagesRequest
 */
export interface GetPinnedMessagesRequest {
    /**
     * Guild ID of the guild where the channel is.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel we want to get pins of.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
}
/**
 * Used in the `GetPinnedMessages` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.GetPinnedMessagesResponse
 */
export interface GetPinnedMessagesResponse {
    /**
     * The IDs of the pinned messages.
     *
     * @generated from protobuf field: repeated uint64 pinned_message_ids = 1;
     */
    pinnedMessageIds: string[];
}
/**
 * Used in `AddReaction` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.AddReactionRequest
 */
export interface AddReactionRequest {
    /**
     * Guild ID of the guild where the channel is.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where the message is.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message we want to add a reaction to.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
    /**
     * The emote we want to react with.
     *
     * @generated from protobuf field: protocol.emote.v1.Emote emote = 4;
     */
    emote?: Emote;
}
/**
 * Used in `AddReaction` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.AddReactionResponse
 */
export interface AddReactionResponse {
}
/**
 * Used in `RemoveReaction` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.RemoveReactionRequest
 */
export interface RemoveReactionRequest {
    /**
     * Guild ID of the guild where the channel is.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where the message is.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message we want to remove a reaction.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
    /**
     * The emote we want to remove the react of.
     *
     * @generated from protobuf field: protocol.emote.v1.Emote emote = 4;
     */
    emote?: Emote;
}
/**
 * Used in `RemoveReaction` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.RemoveReactionResponse
 */
export interface RemoveReactionResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class Overrides$Type extends MessageType<Overrides> {
    constructor() {
        super("protocol.chat.v1.Overrides", [
            { no: 1, name: "username", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "avatar", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_defined", kind: "scalar", oneof: "reason", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "webhook", kind: "message", oneof: "reason", T: () => Empty },
            { no: 5, name: "system_plurality", kind: "message", oneof: "reason", T: () => Empty },
            { no: 6, name: "system_message", kind: "message", oneof: "reason", T: () => Empty },
            { no: 7, name: "bridge", kind: "message", oneof: "reason", T: () => Empty }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Overrides
 */
export const Overrides = new Overrides$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActionPayload$Type extends MessageType<ActionPayload> {
    constructor() {
        super("protocol.chat.v1.ActionPayload", [
            { no: 1, name: "button", kind: "message", oneof: "payload", T: () => ActionPayload_Button },
            { no: 2, name: "dropdown", kind: "message", oneof: "payload", T: () => ActionPayload_Dropdown },
            { no: 3, name: "input", kind: "message", oneof: "payload", T: () => ActionPayload_Input }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.ActionPayload
 */
export const ActionPayload = new ActionPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActionPayload_Button$Type extends MessageType<ActionPayload_Button> {
    constructor() {
        super("protocol.chat.v1.ActionPayload.Button", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.ActionPayload.Button
 */
export const ActionPayload_Button = new ActionPayload_Button$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActionPayload_Dropdown$Type extends MessageType<ActionPayload_Dropdown> {
    constructor() {
        super("protocol.chat.v1.ActionPayload.Dropdown", [
            { no: 1, name: "choice", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.ActionPayload.Dropdown
 */
export const ActionPayload_Dropdown = new ActionPayload_Dropdown$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActionPayload_Input$Type extends MessageType<ActionPayload_Input> {
    constructor() {
        super("protocol.chat.v1.ActionPayload.Input", [
            { no: 1, name: "input", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.ActionPayload.Input
 */
export const ActionPayload_Input = new ActionPayload_Input$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Action$Type extends MessageType<Action> {
    constructor() {
        super("protocol.chat.v1.Action", [
            { no: 1, name: "action_type", kind: "enum", T: () => ["protocol.chat.v1.Action.Type", Action_Type, "TYPE_"] },
            { no: 2, name: "button", kind: "message", oneof: "kind", T: () => Action_Button },
            { no: 3, name: "dropdown", kind: "message", oneof: "kind", T: () => Action_Dropdown },
            { no: 4, name: "input", kind: "message", oneof: "kind", T: () => Action_Input }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Action
 */
export const Action = new Action$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Action_Button$Type extends MessageType<Action_Button> {
    constructor() {
        super("protocol.chat.v1.Action.Button", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Action.Button
 */
export const Action_Button = new Action_Button$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Action_Dropdown$Type extends MessageType<Action_Dropdown> {
    constructor() {
        super("protocol.chat.v1.Action.Dropdown", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Action_Dropdown_Entry }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Action.Dropdown
 */
export const Action_Dropdown = new Action_Dropdown$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Action_Dropdown_Entry$Type extends MessageType<Action_Dropdown_Entry> {
    constructor() {
        super("protocol.chat.v1.Action.Dropdown.Entry", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Action.Dropdown.Entry
 */
export const Action_Dropdown_Entry = new Action_Dropdown_Entry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Action_Input$Type extends MessageType<Action_Input> {
    constructor() {
        super("protocol.chat.v1.Action.Input", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "multiline", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Action.Input
 */
export const Action_Input = new Action_Input$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Embed$Type extends MessageType<Embed> {
    constructor() {
        super("protocol.chat.v1.Embed", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "body", kind: "message", T: () => FormattedText },
            { no: 3, name: "color", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "header", kind: "message", T: () => Embed_EmbedHeading },
            { no: 5, name: "footer", kind: "message", T: () => Embed_EmbedHeading },
            { no: 6, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Embed_EmbedField }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Embed
 */
export const Embed = new Embed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Embed_EmbedHeading$Type extends MessageType<Embed_EmbedHeading> {
    constructor() {
        super("protocol.chat.v1.Embed.EmbedHeading", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "subtext", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icon", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Embed.EmbedHeading
 */
export const Embed_EmbedHeading = new Embed_EmbedHeading$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Embed_EmbedField$Type extends MessageType<Embed_EmbedField> {
    constructor() {
        super("protocol.chat.v1.Embed.EmbedField", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "subtitle", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "body", kind: "message", T: () => FormattedText },
            { no: 4, name: "image_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "presentation", kind: "enum", T: () => ["protocol.chat.v1.Embed.EmbedField.Presentation", Embed_EmbedField_Presentation, "PRESENTATION_"] },
            { no: 6, name: "actions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Action }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Embed.EmbedField
 */
export const Embed_EmbedField = new Embed_EmbedField$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Minithumbnail$Type extends MessageType<Minithumbnail> {
    constructor() {
        super("protocol.chat.v1.Minithumbnail", [
            { no: 1, name: "width", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "height", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Minithumbnail
 */
export const Minithumbnail = new Minithumbnail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Photo$Type extends MessageType<Photo> {
    constructor() {
        super("protocol.chat.v1.Photo", [
            { no: 1, name: "hmc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "file_size", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "height", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "width", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "caption", kind: "message", T: () => FormattedText },
            { no: 7, name: "minithumbnail", kind: "message", T: () => Minithumbnail }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Photo
 */
export const Photo = new Photo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Attachment$Type extends MessageType<Attachment> {
    constructor() {
        super("protocol.chat.v1.Attachment", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "mimetype", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "size", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "caption", kind: "message", T: () => FormattedText }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Attachment
 */
export const Attachment = new Attachment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Content$Type extends MessageType<Content> {
    constructor() {
        super("protocol.chat.v1.Content", [
            { no: 1, name: "text_message", kind: "message", oneof: "content", T: () => Content_TextContent },
            { no: 2, name: "embed_message", kind: "message", oneof: "content", T: () => Content_EmbedContent },
            { no: 3, name: "attachment_message", kind: "message", oneof: "content", T: () => Content_AttachmentContent },
            { no: 4, name: "photo_message", kind: "message", oneof: "content", T: () => Content_PhotoContent },
            { no: 5, name: "invite_rejected", kind: "message", oneof: "content", T: () => Content_InviteRejected },
            { no: 6, name: "invite_accepted", kind: "message", oneof: "content", T: () => Content_InviteAccepted },
            { no: 7, name: "room_upgraded_to_guild", kind: "message", oneof: "content", T: () => Content_RoomUpgradedToGuild }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Content
 */
export const Content = new Content$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Content_TextContent$Type extends MessageType<Content_TextContent> {
    constructor() {
        super("protocol.chat.v1.Content.TextContent", [
            { no: 1, name: "content", kind: "message", T: () => FormattedText }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Content.TextContent
 */
export const Content_TextContent = new Content_TextContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Content_EmbedContent$Type extends MessageType<Content_EmbedContent> {
    constructor() {
        super("protocol.chat.v1.Content.EmbedContent", [
            { no: 1, name: "embeds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Embed }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Content.EmbedContent
 */
export const Content_EmbedContent = new Content_EmbedContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Content_AttachmentContent$Type extends MessageType<Content_AttachmentContent> {
    constructor() {
        super("protocol.chat.v1.Content.AttachmentContent", [
            { no: 1, name: "files", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Attachment }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Content.AttachmentContent
 */
export const Content_AttachmentContent = new Content_AttachmentContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Content_PhotoContent$Type extends MessageType<Content_PhotoContent> {
    constructor() {
        super("protocol.chat.v1.Content.PhotoContent", [
            { no: 1, name: "photos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Photo }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Content.PhotoContent
 */
export const Content_PhotoContent = new Content_PhotoContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Content_InviteRejected$Type extends MessageType<Content_InviteRejected> {
    constructor() {
        super("protocol.chat.v1.Content.InviteRejected", [
            { no: 1, name: "invitee_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "inviter_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Content.InviteRejected
 */
export const Content_InviteRejected = new Content_InviteRejected$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Content_InviteAccepted$Type extends MessageType<Content_InviteAccepted> {
    constructor() {
        super("protocol.chat.v1.Content.InviteAccepted", [
            { no: 1, name: "invitee_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "inviter_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Content.InviteAccepted
 */
export const Content_InviteAccepted = new Content_InviteAccepted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Content_RoomUpgradedToGuild$Type extends MessageType<Content_RoomUpgradedToGuild> {
    constructor() {
        super("protocol.chat.v1.Content.RoomUpgradedToGuild", [
            { no: 1, name: "upgraded_by", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Content.RoomUpgradedToGuild
 */
export const Content_RoomUpgradedToGuild = new Content_RoomUpgradedToGuild$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Reaction$Type extends MessageType<Reaction> {
    constructor() {
        super("protocol.chat.v1.Reaction", [
            { no: 1, name: "emote", kind: "message", T: () => Emote },
            { no: 2, name: "count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Reaction
 */
export const Reaction = new Reaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Format$Type extends MessageType<Format> {
    constructor() {
        super("protocol.chat.v1.Format", [
            { no: 1, name: "start", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "length", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "bold", kind: "message", oneof: "format", T: () => Format_Bold },
            { no: 4, name: "italic", kind: "message", oneof: "format", T: () => Format_Italic },
            { no: 5, name: "underline", kind: "message", oneof: "format", T: () => Format_Underline },
            { no: 6, name: "monospace", kind: "message", oneof: "format", T: () => Format_Monospace },
            { no: 7, name: "superscript", kind: "message", oneof: "format", T: () => Format_Superscript },
            { no: 8, name: "subscript", kind: "message", oneof: "format", T: () => Format_Subscript },
            { no: 9, name: "code_block", kind: "message", oneof: "format", T: () => Format_CodeBlock },
            { no: 10, name: "user_mention", kind: "message", oneof: "format", T: () => Format_UserMention },
            { no: 11, name: "role_mention", kind: "message", oneof: "format", T: () => Format_RoleMention },
            { no: 12, name: "channel_mention", kind: "message", oneof: "format", T: () => Format_ChannelMention },
            { no: 13, name: "guild_mention", kind: "message", oneof: "format", T: () => Format_GuildMention },
            { no: 14, name: "emoji", kind: "message", oneof: "format", T: () => Format_Emoji },
            { no: 15, name: "color", kind: "message", oneof: "format", T: () => Format_Color },
            { no: 16, name: "localization", kind: "message", oneof: "format", T: () => Format_Localization }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Format
 */
export const Format = new Format$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Format_Bold$Type extends MessageType<Format_Bold> {
    constructor() {
        super("protocol.chat.v1.Format.Bold", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Format.Bold
 */
export const Format_Bold = new Format_Bold$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Format_Italic$Type extends MessageType<Format_Italic> {
    constructor() {
        super("protocol.chat.v1.Format.Italic", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Format.Italic
 */
export const Format_Italic = new Format_Italic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Format_Underline$Type extends MessageType<Format_Underline> {
    constructor() {
        super("protocol.chat.v1.Format.Underline", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Format.Underline
 */
export const Format_Underline = new Format_Underline$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Format_Monospace$Type extends MessageType<Format_Monospace> {
    constructor() {
        super("protocol.chat.v1.Format.Monospace", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Format.Monospace
 */
export const Format_Monospace = new Format_Monospace$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Format_Superscript$Type extends MessageType<Format_Superscript> {
    constructor() {
        super("protocol.chat.v1.Format.Superscript", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Format.Superscript
 */
export const Format_Superscript = new Format_Superscript$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Format_Subscript$Type extends MessageType<Format_Subscript> {
    constructor() {
        super("protocol.chat.v1.Format.Subscript", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Format.Subscript
 */
export const Format_Subscript = new Format_Subscript$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Format_CodeBlock$Type extends MessageType<Format_CodeBlock> {
    constructor() {
        super("protocol.chat.v1.Format.CodeBlock", [
            { no: 1, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Format.CodeBlock
 */
export const Format_CodeBlock = new Format_CodeBlock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Format_UserMention$Type extends MessageType<Format_UserMention> {
    constructor() {
        super("protocol.chat.v1.Format.UserMention", [
            { no: 1, name: "user_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Format.UserMention
 */
export const Format_UserMention = new Format_UserMention$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Format_RoleMention$Type extends MessageType<Format_RoleMention> {
    constructor() {
        super("protocol.chat.v1.Format.RoleMention", [
            { no: 1, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Format.RoleMention
 */
export const Format_RoleMention = new Format_RoleMention$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Format_ChannelMention$Type extends MessageType<Format_ChannelMention> {
    constructor() {
        super("protocol.chat.v1.Format.ChannelMention", [
            { no: 1, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Format.ChannelMention
 */
export const Format_ChannelMention = new Format_ChannelMention$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Format_GuildMention$Type extends MessageType<Format_GuildMention> {
    constructor() {
        super("protocol.chat.v1.Format.GuildMention", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "homeserver", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Format.GuildMention
 */
export const Format_GuildMention = new Format_GuildMention$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Format_Emoji$Type extends MessageType<Format_Emoji> {
    constructor() {
        super("protocol.chat.v1.Format.Emoji", [
            { no: 1, name: "image_hmc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pack_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Format.Emoji
 */
export const Format_Emoji = new Format_Emoji$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Format_Color$Type extends MessageType<Format_Color> {
    constructor() {
        super("protocol.chat.v1.Format.Color", [
            { no: 1, name: "kind", kind: "enum", T: () => ["protocol.chat.v1.Format.Color.Kind", Format_Color_Kind, "KIND_"] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Format.Color
 */
export const Format_Color = new Format_Color$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Format_Localization$Type extends MessageType<Format_Localization> {
    constructor() {
        super("protocol.chat.v1.Format.Localization", [
            { no: 1, name: "i18n_code", kind: "scalar", jsonName: "i18nCode", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Format.Localization
 */
export const Format_Localization = new Format_Localization$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FormattedText$Type extends MessageType<FormattedText> {
    constructor() {
        super("protocol.chat.v1.FormattedText", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "format", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Format }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.FormattedText
 */
export const FormattedText = new FormattedText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
    constructor() {
        super("protocol.chat.v1.Message", [
            { no: 1, name: "metadata", kind: "message", T: () => Metadata },
            { no: 2, name: "overrides", kind: "message", T: () => Overrides },
            { no: 3, name: "author_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "created_at", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "edited_at", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 6, name: "in_reply_to", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 7, name: "content", kind: "message", T: () => Content },
            { no: 8, name: "reactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Reaction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.Message
 */
export const Message = new Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageWithId$Type extends MessageType<MessageWithId> {
    constructor() {
        super("protocol.chat.v1.MessageWithId", [
            { no: 1, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "message", kind: "message", T: () => Message }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.MessageWithId
 */
export const MessageWithId = new MessageWithId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChannelMessagesRequest$Type extends MessageType<GetChannelMessagesRequest> {
    constructor() {
        super("protocol.chat.v1.GetChannelMessagesRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "direction", kind: "enum", opt: true, T: () => ["protocol.chat.v1.GetChannelMessagesRequest.Direction", GetChannelMessagesRequest_Direction, "DIRECTION_"] },
            { no: 5, name: "count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.GetChannelMessagesRequest
 */
export const GetChannelMessagesRequest = new GetChannelMessagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChannelMessagesResponse$Type extends MessageType<GetChannelMessagesResponse> {
    constructor() {
        super("protocol.chat.v1.GetChannelMessagesResponse", [
            { no: 1, name: "reached_top", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "reached_bottom", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MessageWithId }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.GetChannelMessagesResponse
 */
export const GetChannelMessagesResponse = new GetChannelMessagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMessageRequest$Type extends MessageType<GetMessageRequest> {
    constructor() {
        super("protocol.chat.v1.GetMessageRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.GetMessageRequest
 */
export const GetMessageRequest = new GetMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMessageResponse$Type extends MessageType<GetMessageResponse> {
    constructor() {
        super("protocol.chat.v1.GetMessageResponse", [
            { no: 1, name: "message", kind: "message", T: () => Message }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.GetMessageResponse
 */
export const GetMessageResponse = new GetMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteMessageRequest$Type extends MessageType<DeleteMessageRequest> {
    constructor() {
        super("protocol.chat.v1.DeleteMessageRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.DeleteMessageRequest
 */
export const DeleteMessageRequest = new DeleteMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteMessageResponse$Type extends MessageType<DeleteMessageResponse> {
    constructor() {
        super("protocol.chat.v1.DeleteMessageResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.DeleteMessageResponse
 */
export const DeleteMessageResponse = new DeleteMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerActionRequest$Type extends MessageType<TriggerActionRequest> {
    constructor() {
        super("protocol.chat.v1.TriggerActionRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "payload", kind: "message", T: () => ActionPayload }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.TriggerActionRequest
 */
export const TriggerActionRequest = new TriggerActionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerActionResponse$Type extends MessageType<TriggerActionResponse> {
    constructor() {
        super("protocol.chat.v1.TriggerActionResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.TriggerActionResponse
 */
export const TriggerActionResponse = new TriggerActionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessageRequest$Type extends MessageType<SendMessageRequest> {
    constructor() {
        super("protocol.chat.v1.SendMessageRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "content", kind: "message", T: () => Content },
            { no: 4, name: "echo_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 6, name: "overrides", kind: "message", T: () => Overrides },
            { no: 7, name: "in_reply_to", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "metadata", kind: "message", T: () => Metadata }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.SendMessageRequest
 */
export const SendMessageRequest = new SendMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessageResponse$Type extends MessageType<SendMessageResponse> {
    constructor() {
        super("protocol.chat.v1.SendMessageResponse", [
            { no: 1, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.SendMessageResponse
 */
export const SendMessageResponse = new SendMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateMessageTextRequest$Type extends MessageType<UpdateMessageTextRequest> {
    constructor() {
        super("protocol.chat.v1.UpdateMessageTextRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "new_content", kind: "message", T: () => FormattedText }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.UpdateMessageTextRequest
 */
export const UpdateMessageTextRequest = new UpdateMessageTextRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateMessageTextResponse$Type extends MessageType<UpdateMessageTextResponse> {
    constructor() {
        super("protocol.chat.v1.UpdateMessageTextResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.UpdateMessageTextResponse
 */
export const UpdateMessageTextResponse = new UpdateMessageTextResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PinMessageRequest$Type extends MessageType<PinMessageRequest> {
    constructor() {
        super("protocol.chat.v1.PinMessageRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.PinMessageRequest
 */
export const PinMessageRequest = new PinMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PinMessageResponse$Type extends MessageType<PinMessageResponse> {
    constructor() {
        super("protocol.chat.v1.PinMessageResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.PinMessageResponse
 */
export const PinMessageResponse = new PinMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnpinMessageRequest$Type extends MessageType<UnpinMessageRequest> {
    constructor() {
        super("protocol.chat.v1.UnpinMessageRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.UnpinMessageRequest
 */
export const UnpinMessageRequest = new UnpinMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnpinMessageResponse$Type extends MessageType<UnpinMessageResponse> {
    constructor() {
        super("protocol.chat.v1.UnpinMessageResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.UnpinMessageResponse
 */
export const UnpinMessageResponse = new UnpinMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPinnedMessagesRequest$Type extends MessageType<GetPinnedMessagesRequest> {
    constructor() {
        super("protocol.chat.v1.GetPinnedMessagesRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.GetPinnedMessagesRequest
 */
export const GetPinnedMessagesRequest = new GetPinnedMessagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPinnedMessagesResponse$Type extends MessageType<GetPinnedMessagesResponse> {
    constructor() {
        super("protocol.chat.v1.GetPinnedMessagesResponse", [
            { no: 1, name: "pinned_message_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.GetPinnedMessagesResponse
 */
export const GetPinnedMessagesResponse = new GetPinnedMessagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddReactionRequest$Type extends MessageType<AddReactionRequest> {
    constructor() {
        super("protocol.chat.v1.AddReactionRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "emote", kind: "message", T: () => Emote }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.AddReactionRequest
 */
export const AddReactionRequest = new AddReactionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddReactionResponse$Type extends MessageType<AddReactionResponse> {
    constructor() {
        super("protocol.chat.v1.AddReactionResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.AddReactionResponse
 */
export const AddReactionResponse = new AddReactionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveReactionRequest$Type extends MessageType<RemoveReactionRequest> {
    constructor() {
        super("protocol.chat.v1.RemoveReactionRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "emote", kind: "message", T: () => Emote }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.RemoveReactionRequest
 */
export const RemoveReactionRequest = new RemoveReactionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveReactionResponse$Type extends MessageType<RemoveReactionResponse> {
    constructor() {
        super("protocol.chat.v1.RemoveReactionResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message protocol.chat.v1.RemoveReactionResponse
 */
export const RemoveReactionResponse = new RemoveReactionResponse$Type();
