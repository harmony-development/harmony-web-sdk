// @generated by protobuf-ts 1.0.13 with parameters long_type_string,optimize_code_size,generate_dependencies,optimize_code_size
// @generated from protobuf file "chat/v1/messages.proto" (package "protocol.chat.v1", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
import { Override } from "../../harmonytypes/v1/types";
import { Metadata } from "../../harmonytypes/v1/types";
import { Content } from "../../harmonytypes/v1/types";
import { Message } from "../../harmonytypes/v1/types";
/**
 * @generated from protobuf message protocol.chat.v1.GetChannelMessagesRequest
 */
export interface GetChannelMessagesRequest {
    /**
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * The ID of the message that will be used as an "anchor" point to figure out
     * where to get the messages.
     * If not specified, the `direction` will be ignored and the newest messages will be returned.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
    /**
     * On which direction to get the messages.
     *
     * - By default, it is "before", which means you will get messages before the `message_id` message.
     * - If it is "around", you will get the messages around the `message_id` message.
     * This will include the `message_id` message itself, as the middle item of the list returned.
     * - If it is "after", you will get the messages after the `message_id` message.
     *
     * @generated from protobuf field: protocol.chat.v1.GetChannelMessagesRequest.Direction direction = 4;
     */
    direction: GetChannelMessagesRequest_Direction;
    /**
     * How many messages to get.
     *
     * - If `0`, a recommended message count to return is 25. If the direction is "around", the recommended value is 12.
     * - If the direction to get the messages is "around", this count will not be the *total* count
     * of messages to return, but instead the count of messages to return *for each direction*, before and after.
     * - Servers should enforce their own maximum limit, and clamp this value to the limit.
     *
     * @generated from protobuf field: uint32 count = 5;
     */
    count: number;
}
/**
 * The direction relative to the `message_id` message to get messages from.
 *
 * @generated from protobuf enum protocol.chat.v1.GetChannelMessagesRequest.Direction
 */
export enum GetChannelMessagesRequest_Direction {
    /**
     * @generated from protobuf enum value: before = 0;
     */
    before = 0,
    /**
     * @generated from protobuf enum value: around = 1;
     */
    around = 1,
    /**
     * @generated from protobuf enum value: after = 2;
     */
    after = 2
}
/**
 * @generated from protobuf message protocol.chat.v1.GetChannelMessagesResponse
 */
export interface GetChannelMessagesResponse {
    /**
     * @generated from protobuf field: bool reached_top = 1;
     */
    reachedTop: boolean;
    /**
     * @generated from protobuf field: repeated protocol.harmonytypes.v1.Message messages = 2;
     */
    messages: Message[];
}
/**
 * @generated from protobuf message protocol.chat.v1.GetMessageRequest
 */
export interface GetMessageRequest {
    /**
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
}
/**
 * @generated from protobuf message protocol.chat.v1.GetMessageResponse
 */
export interface GetMessageResponse {
    /**
     * @generated from protobuf field: protocol.harmonytypes.v1.Message message = 1;
     */
    message?: Message;
}
/**
 * @generated from protobuf message protocol.chat.v1.DeleteMessageRequest
 */
export interface DeleteMessageRequest {
    /**
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
}
// TRIGGERS

/**
 * @generated from protobuf message protocol.chat.v1.TriggerActionRequest
 */
export interface TriggerActionRequest {
    /**
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string action_id = 4;
     */
    actionId: string;
    /**
     * @generated from protobuf field: string action_data = 5;
     */
    actionData: string;
}
/**
 * SendMessage
 *
 * @generated from protobuf message protocol.chat.v1.SendMessageRequest
 */
export interface SendMessageRequest {
    /**
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * @generated from protobuf field: protocol.harmonytypes.v1.Content content = 3;
     */
    content?: Content;
    /**
     * @generated from protobuf field: uint64 echo_id = 4;
     */
    echoId: string;
    /**
     * @generated from protobuf field: protocol.harmonytypes.v1.Metadata metadata = 5;
     */
    metadata?: Metadata;
    /**
     * @generated from protobuf field: protocol.harmonytypes.v1.Override overrides = 6;
     */
    overrides?: Override;
    /**
     * @generated from protobuf field: uint64 in_reply_to = 7;
     */
    inReplyTo: string;
}
/**
 * @generated from protobuf message protocol.chat.v1.SendMessageResponse
 */
export interface SendMessageResponse {
    /**
     * @generated from protobuf field: uint64 message_id = 1;
     */
    messageId: string;
}
/**
 * @generated from protobuf message protocol.chat.v1.UpdateMessageTextRequest
 */
export interface UpdateMessageTextRequest {
    /**
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string new_content = 4;
     */
    newContent: string;
}
/**
 * Used in the `PinMessage` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.PinMessageRequest
 */
export interface PinMessageRequest {
    /**
     * Guild ID of the guild where the channel is.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where the message is.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message we want to pin.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
}
/**
 * Used in the `UnpinMessage` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.UnpinMessageRequest
 */
export interface UnpinMessageRequest {
    /**
     * Guild ID of the guild where the channel is.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where the message is.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message we want to unpin.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
}
/**
 * Used in the `GetPinnedMessages` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.GetPinnedMessagesRequest
 */
export interface GetPinnedMessagesRequest {
    /**
     * Guild ID of the guild where the channel is.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel we want to get pins of.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
}
/**
 * Used in the `GetPinnedMessages` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.GetPinnedMessagesResponse
 */
export interface GetPinnedMessagesResponse {
    /**
     * The IDs of the pinned messages.
     *
     * @generated from protobuf field: repeated uint64 pinned_message_ids = 1;
     */
    pinnedMessageIds: string[];
}
/**
 * Type for protobuf message protocol.chat.v1.GetChannelMessagesRequest
 */
class GetChannelMessagesRequest$Type extends MessageType<GetChannelMessagesRequest> {
    constructor() {
        super("protocol.chat.v1.GetChannelMessagesRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "direction", kind: "enum", T: () => ["protocol.chat.v1.GetChannelMessagesRequest.Direction", GetChannelMessagesRequest_Direction] },
            { no: 5, name: "count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
export const GetChannelMessagesRequest = new GetChannelMessagesRequest$Type();
/**
 * Type for protobuf message protocol.chat.v1.GetChannelMessagesResponse
 */
class GetChannelMessagesResponse$Type extends MessageType<GetChannelMessagesResponse> {
    constructor() {
        super("protocol.chat.v1.GetChannelMessagesResponse", [
            { no: 1, name: "reached_top", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message }
        ]);
    }
}
export const GetChannelMessagesResponse = new GetChannelMessagesResponse$Type();
/**
 * Type for protobuf message protocol.chat.v1.GetMessageRequest
 */
class GetMessageRequest$Type extends MessageType<GetMessageRequest> {
    constructor() {
        super("protocol.chat.v1.GetMessageRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const GetMessageRequest = new GetMessageRequest$Type();
/**
 * Type for protobuf message protocol.chat.v1.GetMessageResponse
 */
class GetMessageResponse$Type extends MessageType<GetMessageResponse> {
    constructor() {
        super("protocol.chat.v1.GetMessageResponse", [
            { no: 1, name: "message", kind: "message", T: () => Message }
        ]);
    }
}
export const GetMessageResponse = new GetMessageResponse$Type();
/**
 * Type for protobuf message protocol.chat.v1.DeleteMessageRequest
 */
class DeleteMessageRequest$Type extends MessageType<DeleteMessageRequest> {
    constructor() {
        super("protocol.chat.v1.DeleteMessageRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const DeleteMessageRequest = new DeleteMessageRequest$Type();
/**
 * Type for protobuf message protocol.chat.v1.TriggerActionRequest
 */
class TriggerActionRequest$Type extends MessageType<TriggerActionRequest> {
    constructor() {
        super("protocol.chat.v1.TriggerActionRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "action_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "action_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const TriggerActionRequest = new TriggerActionRequest$Type();
/**
 * Type for protobuf message protocol.chat.v1.SendMessageRequest
 */
class SendMessageRequest$Type extends MessageType<SendMessageRequest> {
    constructor() {
        super("protocol.chat.v1.SendMessageRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "content", kind: "message", T: () => Content },
            { no: 4, name: "echo_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "metadata", kind: "message", T: () => Metadata },
            { no: 6, name: "overrides", kind: "message", T: () => Override },
            { no: 7, name: "in_reply_to", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const SendMessageRequest = new SendMessageRequest$Type();
/**
 * Type for protobuf message protocol.chat.v1.SendMessageResponse
 */
class SendMessageResponse$Type extends MessageType<SendMessageResponse> {
    constructor() {
        super("protocol.chat.v1.SendMessageResponse", [
            { no: 1, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const SendMessageResponse = new SendMessageResponse$Type();
/**
 * Type for protobuf message protocol.chat.v1.UpdateMessageTextRequest
 */
class UpdateMessageTextRequest$Type extends MessageType<UpdateMessageTextRequest> {
    constructor() {
        super("protocol.chat.v1.UpdateMessageTextRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "new_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const UpdateMessageTextRequest = new UpdateMessageTextRequest$Type();
/**
 * Type for protobuf message protocol.chat.v1.PinMessageRequest
 */
class PinMessageRequest$Type extends MessageType<PinMessageRequest> {
    constructor() {
        super("protocol.chat.v1.PinMessageRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const PinMessageRequest = new PinMessageRequest$Type();
/**
 * Type for protobuf message protocol.chat.v1.UnpinMessageRequest
 */
class UnpinMessageRequest$Type extends MessageType<UnpinMessageRequest> {
    constructor() {
        super("protocol.chat.v1.UnpinMessageRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const UnpinMessageRequest = new UnpinMessageRequest$Type();
/**
 * Type for protobuf message protocol.chat.v1.GetPinnedMessagesRequest
 */
class GetPinnedMessagesRequest$Type extends MessageType<GetPinnedMessagesRequest> {
    constructor() {
        super("protocol.chat.v1.GetPinnedMessagesRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const GetPinnedMessagesRequest = new GetPinnedMessagesRequest$Type();
/**
 * Type for protobuf message protocol.chat.v1.GetPinnedMessagesResponse
 */
class GetPinnedMessagesResponse$Type extends MessageType<GetPinnedMessagesResponse> {
    constructor() {
        super("protocol.chat.v1.GetPinnedMessagesResponse", [
            { no: 1, name: "pinned_message_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const GetPinnedMessagesResponse = new GetPinnedMessagesResponse$Type();
