// @generated by protobuf-ts 1.0.13 with parameters long_type_string,optimize_code_size,generate_dependencies,optimize_code_size
// @generated from protobuf file "chat/v1/stream.proto" (package "protocol.chat.v1", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
import { Reaction } from "./messages";
import { Permission } from "./permissions";
import { LeaveReason } from "./guilds";
import { Metadata } from "../../harmonytypes/v1/types";
import { ItemPosition } from "../../harmonytypes/v1/types";
import { FormattedText } from "../../harmonytypes/v1/types";
import { Message } from "./messages";
import { StreamEvent as StreamEvent$2 } from "../../profile/v1/stream";
import { StreamEvent as StreamEvent$ } from "../../emote/v1/stream";
/**
 * Request type for use in the `StreamEvents` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEventsRequest
 */
export interface StreamEventsRequest {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "subscribeToGuild";
        /**
         * Subscribe to the guild event source.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEventsRequest.SubscribeToGuild subscribe_to_guild = 1;
         */
        subscribeToGuild: StreamEventsRequest_SubscribeToGuild;
    } | {
        oneofKind: "subscribeToActions";
        /**
         * Subscribe to the action event source.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEventsRequest.SubscribeToActions subscribe_to_actions = 2;
         */
        subscribeToActions: StreamEventsRequest_SubscribeToActions;
    } | {
        oneofKind: "subscribeToHomeserverEvents";
        /**
         * Subscribe to the homeserver event source.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents subscribe_to_homeserver_events = 3;
         */
        subscribeToHomeserverEvents: StreamEventsRequest_SubscribeToHomeserverEvents;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Event source for guilds' events.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEventsRequest.SubscribeToGuild
 */
export interface StreamEventsRequest_SubscribeToGuild {
    /**
     * the guild id to subscribe to
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
}
/**
 * Event source for actions' events.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEventsRequest.SubscribeToActions
 */
export interface StreamEventsRequest_SubscribeToActions {
}
/**
 * Event source for homeserver events.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents
 */
export interface StreamEventsRequest_SubscribeToHomeserverEvents {
}
/**
 * Used in the `StreamEvents` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEventsResponse
 */
export interface StreamEventsResponse {
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "chat";
        /**
         * A chat event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent chat = 1;
         */
        chat: StreamEvent;
    } | {
        oneofKind: "emote";
        /**
         * A emote event.
         *
         * @generated from protobuf field: protocol.emote.v1.StreamEvent emote = 2;
         */
        emote: StreamEvent$;
    } | {
        oneofKind: "profile";
        /**
         * A profile event.
         *
         * @generated from protobuf field: protocol.profile.v1.StreamEvent profile = 3;
         */
        profile: StreamEvent$2;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Describes an event.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent
 */
export interface StreamEvent {
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "guildAddedToList";
        /**
         * Send the guild added to list event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.GuildAddedToList guild_added_to_list = 1;
         */
        guildAddedToList: StreamEvent_GuildAddedToList;
    } | {
        oneofKind: "guildRemovedFromList";
        /**
         * Send the guild removed from list event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.GuildRemovedFromList guild_removed_from_list = 2;
         */
        guildRemovedFromList: StreamEvent_GuildRemovedFromList;
    } | {
        oneofKind: "actionPerformed";
        /**
         * Send the action performed event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.ActionPerformed action_performed = 3;
         */
        actionPerformed: StreamEvent_ActionPerformed;
    } | {
        oneofKind: "sentMessage";
        /**
         * Send the message sent event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.MessageSent sent_message = 4;
         */
        sentMessage: StreamEvent_MessageSent;
    } | {
        oneofKind: "editedMessage";
        /**
         * Send the message updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.MessageUpdated edited_message = 5;
         */
        editedMessage: StreamEvent_MessageUpdated;
    } | {
        oneofKind: "deletedMessage";
        /**
         * Send the message deleted event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.MessageDeleted deleted_message = 6;
         */
        deletedMessage: StreamEvent_MessageDeleted;
    } | {
        oneofKind: "createdChannel";
        /**
         * Send the channel created event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.ChannelCreated created_channel = 7;
         */
        createdChannel: StreamEvent_ChannelCreated;
    } | {
        oneofKind: "editedChannel";
        /**
         * Send the channel updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.ChannelUpdated edited_channel = 8;
         */
        editedChannel: StreamEvent_ChannelUpdated;
    } | {
        oneofKind: "deletedChannel";
        /**
         * Send the channel deleted event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.ChannelDeleted deleted_channel = 9;
         */
        deletedChannel: StreamEvent_ChannelDeleted;
    } | {
        oneofKind: "editedGuild";
        /**
         * Send the guild updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.GuildUpdated edited_guild = 10;
         */
        editedGuild: StreamEvent_GuildUpdated;
    } | {
        oneofKind: "deletedGuild";
        /**
         * Send the guild deleted event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.GuildDeleted deleted_guild = 11;
         */
        deletedGuild: StreamEvent_GuildDeleted;
    } | {
        oneofKind: "joinedMember";
        /**
         * Send the member joined event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.MemberJoined joined_member = 12;
         */
        joinedMember: StreamEvent_MemberJoined;
    } | {
        oneofKind: "leftMember";
        /**
         * Send the member left event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.MemberLeft left_member = 13;
         */
        leftMember: StreamEvent_MemberLeft;
    } | {
        oneofKind: "typing";
        /**
         * Send the typing event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.Typing typing = 14;
         */
        typing: StreamEvent_Typing;
    } | {
        oneofKind: "roleCreated";
        /**
         * Send the role created event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.RoleCreated role_created = 15;
         */
        roleCreated: StreamEvent_RoleCreated;
    } | {
        oneofKind: "roleDeleted";
        /**
         * Send the role deleted event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.RoleDeleted role_deleted = 16;
         */
        roleDeleted: StreamEvent_RoleDeleted;
    } | {
        oneofKind: "roleMoved";
        /**
         * Send the role moved event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.RoleMoved role_moved = 17;
         */
        roleMoved: StreamEvent_RoleMoved;
    } | {
        oneofKind: "roleUpdated";
        /**
         * Send the role updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.RoleUpdated role_updated = 18;
         */
        roleUpdated: StreamEvent_RoleUpdated;
    } | {
        oneofKind: "rolePermsUpdated";
        /**
         * Send the role perms updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.RolePermissionsUpdated role_perms_updated = 19;
         */
        rolePermsUpdated: StreamEvent_RolePermissionsUpdated;
    } | {
        oneofKind: "userRolesUpdated";
        /**
         * Send the user roles updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.UserRolesUpdated user_roles_updated = 20;
         */
        userRolesUpdated: StreamEvent_UserRolesUpdated;
    } | {
        oneofKind: "permissionUpdated";
        /**
         * Send the permission updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.PermissionUpdated permission_updated = 21;
         */
        permissionUpdated: StreamEvent_PermissionUpdated;
    } | {
        oneofKind: "channelsReordered";
        /**
         * The channels have been completely reordered.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.ChannelsReordered channels_reordered = 22;
         */
        channelsReordered: StreamEvent_ChannelsReordered;
    } | {
        oneofKind: "editedChannelPosition";
        /**
         * Send the channel position updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.ChannelPositionUpdated edited_channel_position = 23;
         */
        editedChannelPosition: StreamEvent_ChannelPositionUpdated;
    } | {
        oneofKind: "messagePinned";
        /**
         * Send the message pinned event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.MessagePinned message_pinned = 24;
         */
        messagePinned: StreamEvent_MessagePinned;
    } | {
        oneofKind: "messageUnpinned";
        /**
         * Send the message unpinned event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.MessageUnpinned message_unpinned = 25;
         */
        messageUnpinned: StreamEvent_MessageUnpinned;
    } | {
        oneofKind: "reactionUpdated";
        /**
         * Send the reaction updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEvent.ReactionUpdated reaction_updated = 26;
         */
        reactionUpdated: StreamEvent_ReactionUpdated;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Event sent when a new message is sent.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.MessageSent
 */
export interface StreamEvent_MessageSent {
    /**
     * ID that is sent by your client it can use to confirm that the message is sent.
     *
     * @generated from protobuf field: optional uint64 echo_id = 1;
     */
    echoId?: string;
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 2;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: uint64 channel_id = 3;
     */
    channelId: string;
    /**
     * Message ID of the message that was updated.
     *
     * @generated from protobuf field: uint64 message_id = 4;
     */
    messageId: string;
    /**
     * The actual message.
     *
     * @generated from protobuf field: protocol.chat.v1.Message message = 5;
     */
    message?: Message;
}
/**
 * Event sent when a message's text content is updated.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.MessageUpdated
 */
export interface StreamEvent_MessageUpdated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message that was updated.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
    /**
     * When this message was edited, in milliseconds since unix epoch
     *
     * @generated from protobuf field: uint64 edited_at = 4;
     */
    editedAt: string;
    /**
     * New message content.
     *
     * @generated from protobuf field: protocol.harmonytypes.v1.FormattedText new_content = 5;
     */
    newContent?: FormattedText;
}
/**
 * Event sent when a message is deleted.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.MessageDeleted
 */
export interface StreamEvent_MessageDeleted {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message that was deleted.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
}
/**
 * Event sent when a new channel is created.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.ChannelCreated
 */
export interface StreamEvent_ChannelCreated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Name of this channel.
     *
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * the position in the channel list.
     *
     * @generated from protobuf field: protocol.harmonytypes.v1.ItemPosition position = 4;
     */
    position?: ItemPosition;
    /**
     * Is this channel a category or not.
     *
     * @generated from protobuf field: bool is_category = 5;
     */
    isCategory: boolean;
    /**
     * Metadata for this channel.
     *
     * @generated from protobuf field: optional protocol.harmonytypes.v1.Metadata metadata = 6;
     */
    metadata?: Metadata;
}
/**
 * Event sent when a channel's information is changed.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.ChannelUpdated
 */
export interface StreamEvent_ChannelUpdated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel that was changed.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * The new name of the channel.
     *
     * @generated from protobuf field: optional string new_name = 3;
     */
    newName?: string;
    /**
     * The new metadata of the channel.
     *
     * @generated from protobuf field: optional protocol.harmonytypes.v1.Metadata new_metadata = 4;
     */
    newMetadata?: Metadata;
}
/**
 * Event sent when a channel's position in the channel list is changed.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.ChannelPositionUpdated
 */
export interface StreamEvent_ChannelPositionUpdated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel that was changed.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * The new position of the channel.
     *
     * @generated from protobuf field: optional protocol.harmonytypes.v1.ItemPosition new_position = 3;
     */
    newPosition?: ItemPosition;
}
/**
 * Event sent when all channels have been reordered
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.ChannelsReordered
 */
export interface StreamEvent_ChannelsReordered {
    /**
     * guild_id: the guild whose channels are being reordered
     *
     * @generated from protobuf field: uint64 guild_id = 2;
     */
    guildId: string;
    /**
     * channel_ids: the new order of channel IDs
     *
     * @generated from protobuf field: repeated uint64 channel_ids = 1;
     */
    channelIds: string[];
}
/**
 * Event sent when a channel is deleted.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.ChannelDeleted
 */
export interface StreamEvent_ChannelDeleted {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel that was deleted.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
}
/**
 * Event sent when a guild's information is changed.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.GuildUpdated
 */
export interface StreamEvent_GuildUpdated {
    /**
     * Guild ID of the guild that was changed.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * The new name of the guild.
     *
     * @generated from protobuf field: optional string new_name = 2;
     */
    newName?: string;
    /**
     * The new picture of the guild.
     *
     * @generated from protobuf field: optional string new_picture = 3;
     */
    newPicture?: string;
    /**
     * The new metadata of the guild.
     *
     * @generated from protobuf field: optional protocol.harmonytypes.v1.Metadata new_metadata = 4;
     */
    newMetadata?: Metadata;
}
/**
 * Event sent when a guild is deleted.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.GuildDeleted
 */
export interface StreamEvent_GuildDeleted {
    /**
     * Guild ID of the guild that was deleted.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
}
/**
 * Event sent a user joins to a guild.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.MemberJoined
 */
export interface StreamEvent_MemberJoined {
    /**
     * Member ID of the member that joined the guild.
     *
     * @generated from protobuf field: uint64 member_id = 1;
     */
    memberId: string;
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 2;
     */
    guildId: string;
}
/**
 * Event sent when a member of a guild leaves said guild for whatever reason.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.MemberLeft
 */
export interface StreamEvent_MemberLeft {
    /**
     * User ID of the member that left the guild.
     *
     * @generated from protobuf field: uint64 member_id = 1;
     */
    memberId: string;
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 2;
     */
    guildId: string;
    /**
     * Why this member left the guild.
     *
     * @generated from protobuf field: protocol.chat.v1.LeaveReason leave_reason = 3;
     */
    leaveReason: LeaveReason;
}
/**
 * Event sent when you join a new guild.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.GuildAddedToList
 */
export interface StreamEvent_GuildAddedToList {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * The homeserver this guild is on.
     *
     * @generated from protobuf field: string homeserver = 2;
     */
    homeserver: string;
}
/**
 * Event sent when you leave a guild.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.GuildRemovedFromList
 */
export interface StreamEvent_GuildRemovedFromList {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * The homeserver this guild is on.
     *
     * @generated from protobuf field: string homeserver = 2;
     */
    homeserver: string;
}
/**
 * Event sent when an action is performed.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.ActionPerformed
 */
export interface StreamEvent_ActionPerformed {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID where this event happened.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
    /**
     * Action ID of the action that was performed.
     *
     * @generated from protobuf field: string action_id = 4;
     */
    actionId: string;
    /**
     * Action data.
     *
     * @generated from protobuf field: string action_data = 5;
     */
    actionData: string;
}
/**
 * Event sent when a role's position in the role list is changed.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.RoleMoved
 */
export interface StreamEvent_RoleMoved {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Role ID of the role that was moved.
     *
     * @generated from protobuf field: uint64 role_id = 2;
     */
    roleId: string;
    /**
     * New position of the role.
     *
     * @generated from protobuf field: protocol.harmonytypes.v1.ItemPosition new_position = 3;
     */
    newPosition?: ItemPosition;
}
/**
 * Event sent when a role is deleted.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.RoleDeleted
 */
export interface StreamEvent_RoleDeleted {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Role ID of the role that was deleted.
     *
     * @generated from protobuf field: uint64 role_id = 2;
     */
    roleId: string;
}
/**
 * Event sent when a role is created.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.RoleCreated
 */
export interface StreamEvent_RoleCreated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Role ID of the role that was created.
     *
     * @generated from protobuf field: uint64 role_id = 2;
     */
    roleId: string;
    /**
     * The name of the role.
     *
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * The color of the role.
     *
     * @generated from protobuf field: int32 color = 4;
     */
    color: number;
    /**
     * The hoist status of the role.
     *
     * @generated from protobuf field: bool hoist = 5;
     */
    hoist: boolean;
    /**
     * The pingable status of the role.
     *
     * @generated from protobuf field: bool pingable = 6;
     */
    pingable: boolean;
}
/**
 * Event sent when a role's information is changed.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.RoleUpdated
 */
export interface StreamEvent_RoleUpdated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Role ID of the role that was changed.
     *
     * @generated from protobuf field: uint64 role_id = 2;
     */
    roleId: string;
    /**
     * The new name of the role.
     *
     * @generated from protobuf field: optional string new_name = 3;
     */
    newName?: string;
    /**
     * The new color of the role.
     *
     * @generated from protobuf field: optional int32 new_color = 4;
     */
    newColor?: number;
    /**
     * The new hoist status of the role.
     *
     * @generated from protobuf field: optional bool new_hoist = 5;
     */
    newHoist?: boolean;
    /**
     * The new pingable status of the role.
     *
     * @generated from protobuf field: optional bool new_pingable = 6;
     */
    newPingable?: boolean;
}
/**
 * Event sent when a role's permissions are changed.
 *
 * This event will only be sent to users with the "guild.manage" permission.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.RolePermissionsUpdated
 */
export interface StreamEvent_RolePermissionsUpdated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: optional uint64 channel_id = 2;
     */
    channelId?: string;
    /**
     * Role ID of the role that had it's permissions changed.
     *
     * @generated from protobuf field: uint64 role_id = 3;
     */
    roleId: string;
    /**
     * The new permissions.
     *
     * @generated from protobuf field: repeated protocol.chat.v1.Permission new_perms = 4;
     */
    newPerms: Permission[];
}
/**
 * Event sent when a user's roles are changed.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.UserRolesUpdated
 */
export interface StreamEvent_UserRolesUpdated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * User ID of the user that had it's roles changed.
     *
     * @generated from protobuf field: uint64 user_id = 2;
     */
    userId: string;
    /**
     * The new role IDs.
     *
     * @generated from protobuf field: repeated uint64 new_role_ids = 3;
     */
    newRoleIds: string[];
}
/**
 * Event sent when a user sends a typing notification in a guild channel.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.Typing
 */
export interface StreamEvent_Typing {
    /**
     * User ID of the user that sent the typing notification.
     *
     * @generated from protobuf field: uint64 user_id = 1;
     */
    userId: string;
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 2;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: uint64 channel_id = 3;
     */
    channelId: string;
}
/**
 * Event sent when a permission is changed that matters to you.
 *
 * Servers should calculate which users to send this event to when a permission is set.
 * It should only be sent if a user is subscribed to the guild the permission pertains to.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.PermissionUpdated
 */
export interface StreamEvent_PermissionUpdated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: optional uint64 channel_id = 2;
     */
    channelId?: string;
    /**
     * The permission node that was changed.
     *
     * @generated from protobuf field: string query = 3;
     */
    query: string;
    /**
     * Whether you have the permission or not.
     *
     * @generated from protobuf field: bool ok = 4;
     */
    ok: boolean;
}
/**
 * Sent when a message is pinned in a guild channel.
 *
 * Should only be sent to users who have the "message.view" permission for
 * the guild channel where the message was pinned.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.MessagePinned
 */
export interface StreamEvent_MessagePinned {
    /**
     * Guild ID of the guild where this event occured.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event occured.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message that was pinned.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
}
/**
 * Sent when a message is unpinned in a guild channel.
 *
 * Should only be sent to users who have the "message.view" permission for
 * the guild channel where the message was unpinned.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.MessageUnpinned
 */
export interface StreamEvent_MessageUnpinned {
    /**
     * Guild ID of the guild where this event occured.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event occured.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message that was unpinned.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
}
/**
 * Sent when a message's reaction is changed.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEvent.ReactionUpdated
 */
export interface StreamEvent_ReactionUpdated {
    /**
     * Guild ID of the guild where this event occured.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event occured.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message that had a reaction updated.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
    /**
     * The reaction.
     *
     * @generated from protobuf field: protocol.chat.v1.Reaction reaction = 4;
     */
    reaction?: Reaction;
}
/**
 * Type for protobuf message protocol.chat.v1.StreamEventsRequest
 */
class StreamEventsRequest$Type extends MessageType<StreamEventsRequest> {
    constructor() {
        super("protocol.chat.v1.StreamEventsRequest", [
            { no: 1, name: "subscribe_to_guild", kind: "message", oneof: "request", T: () => StreamEventsRequest_SubscribeToGuild },
            { no: 2, name: "subscribe_to_actions", kind: "message", oneof: "request", T: () => StreamEventsRequest_SubscribeToActions },
            { no: 3, name: "subscribe_to_homeserver_events", kind: "message", oneof: "request", T: () => StreamEventsRequest_SubscribeToHomeserverEvents }
        ]);
    }
}
export const StreamEventsRequest = new StreamEventsRequest$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEventsRequest.SubscribeToGuild
 */
class StreamEventsRequest_SubscribeToGuild$Type extends MessageType<StreamEventsRequest_SubscribeToGuild> {
    constructor() {
        super("protocol.chat.v1.StreamEventsRequest.SubscribeToGuild", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const StreamEventsRequest_SubscribeToGuild = new StreamEventsRequest_SubscribeToGuild$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEventsRequest.SubscribeToActions
 */
class StreamEventsRequest_SubscribeToActions$Type extends MessageType<StreamEventsRequest_SubscribeToActions> {
    constructor() {
        super("protocol.chat.v1.StreamEventsRequest.SubscribeToActions", []);
    }
}
export const StreamEventsRequest_SubscribeToActions = new StreamEventsRequest_SubscribeToActions$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents
 */
class StreamEventsRequest_SubscribeToHomeserverEvents$Type extends MessageType<StreamEventsRequest_SubscribeToHomeserverEvents> {
    constructor() {
        super("protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents", []);
    }
}
export const StreamEventsRequest_SubscribeToHomeserverEvents = new StreamEventsRequest_SubscribeToHomeserverEvents$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEventsResponse
 */
class StreamEventsResponse$Type extends MessageType<StreamEventsResponse> {
    constructor() {
        super("protocol.chat.v1.StreamEventsResponse", [
            { no: 1, name: "chat", kind: "message", oneof: "event", T: () => StreamEvent },
            { no: 2, name: "emote", kind: "message", oneof: "event", T: () => StreamEvent$ },
            { no: 3, name: "profile", kind: "message", oneof: "event", T: () => StreamEvent$2 }
        ]);
    }
}
export const StreamEventsResponse = new StreamEventsResponse$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent
 */
class StreamEvent$Type extends MessageType<StreamEvent> {
    constructor() {
        super("protocol.chat.v1.StreamEvent", [
            { no: 1, name: "guild_added_to_list", kind: "message", oneof: "event", T: () => StreamEvent_GuildAddedToList },
            { no: 2, name: "guild_removed_from_list", kind: "message", oneof: "event", T: () => StreamEvent_GuildRemovedFromList },
            { no: 3, name: "action_performed", kind: "message", oneof: "event", T: () => StreamEvent_ActionPerformed },
            { no: 4, name: "sent_message", kind: "message", oneof: "event", T: () => StreamEvent_MessageSent },
            { no: 5, name: "edited_message", kind: "message", oneof: "event", T: () => StreamEvent_MessageUpdated },
            { no: 6, name: "deleted_message", kind: "message", oneof: "event", T: () => StreamEvent_MessageDeleted },
            { no: 7, name: "created_channel", kind: "message", oneof: "event", T: () => StreamEvent_ChannelCreated },
            { no: 8, name: "edited_channel", kind: "message", oneof: "event", T: () => StreamEvent_ChannelUpdated },
            { no: 9, name: "deleted_channel", kind: "message", oneof: "event", T: () => StreamEvent_ChannelDeleted },
            { no: 10, name: "edited_guild", kind: "message", oneof: "event", T: () => StreamEvent_GuildUpdated },
            { no: 11, name: "deleted_guild", kind: "message", oneof: "event", T: () => StreamEvent_GuildDeleted },
            { no: 12, name: "joined_member", kind: "message", oneof: "event", T: () => StreamEvent_MemberJoined },
            { no: 13, name: "left_member", kind: "message", oneof: "event", T: () => StreamEvent_MemberLeft },
            { no: 14, name: "typing", kind: "message", oneof: "event", T: () => StreamEvent_Typing },
            { no: 15, name: "role_created", kind: "message", oneof: "event", T: () => StreamEvent_RoleCreated },
            { no: 16, name: "role_deleted", kind: "message", oneof: "event", T: () => StreamEvent_RoleDeleted },
            { no: 17, name: "role_moved", kind: "message", oneof: "event", T: () => StreamEvent_RoleMoved },
            { no: 18, name: "role_updated", kind: "message", oneof: "event", T: () => StreamEvent_RoleUpdated },
            { no: 19, name: "role_perms_updated", kind: "message", oneof: "event", T: () => StreamEvent_RolePermissionsUpdated },
            { no: 20, name: "user_roles_updated", kind: "message", oneof: "event", T: () => StreamEvent_UserRolesUpdated },
            { no: 21, name: "permission_updated", kind: "message", oneof: "event", T: () => StreamEvent_PermissionUpdated },
            { no: 22, name: "channels_reordered", kind: "message", oneof: "event", T: () => StreamEvent_ChannelsReordered },
            { no: 23, name: "edited_channel_position", kind: "message", oneof: "event", T: () => StreamEvent_ChannelPositionUpdated },
            { no: 24, name: "message_pinned", kind: "message", oneof: "event", T: () => StreamEvent_MessagePinned },
            { no: 25, name: "message_unpinned", kind: "message", oneof: "event", T: () => StreamEvent_MessageUnpinned },
            { no: 26, name: "reaction_updated", kind: "message", oneof: "event", T: () => StreamEvent_ReactionUpdated }
        ]);
    }
}
export const StreamEvent = new StreamEvent$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.MessageSent
 */
class StreamEvent_MessageSent$Type extends MessageType<StreamEvent_MessageSent> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.MessageSent", [
            { no: 1, name: "echo_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "message", kind: "message", T: () => Message }
        ]);
    }
}
export const StreamEvent_MessageSent = new StreamEvent_MessageSent$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.MessageUpdated
 */
class StreamEvent_MessageUpdated$Type extends MessageType<StreamEvent_MessageUpdated> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.MessageUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "edited_at", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "new_content", kind: "message", T: () => FormattedText }
        ]);
    }
}
export const StreamEvent_MessageUpdated = new StreamEvent_MessageUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.MessageDeleted
 */
class StreamEvent_MessageDeleted$Type extends MessageType<StreamEvent_MessageDeleted> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.MessageDeleted", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const StreamEvent_MessageDeleted = new StreamEvent_MessageDeleted$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.ChannelCreated
 */
class StreamEvent_ChannelCreated$Type extends MessageType<StreamEvent_ChannelCreated> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.ChannelCreated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "position", kind: "message", T: () => ItemPosition },
            { no: 5, name: "is_category", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "metadata", kind: "message", T: () => Metadata }
        ]);
    }
}
export const StreamEvent_ChannelCreated = new StreamEvent_ChannelCreated$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.ChannelUpdated
 */
class StreamEvent_ChannelUpdated$Type extends MessageType<StreamEvent_ChannelUpdated> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.ChannelUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "new_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "new_metadata", kind: "message", T: () => Metadata }
        ]);
    }
}
export const StreamEvent_ChannelUpdated = new StreamEvent_ChannelUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.ChannelPositionUpdated
 */
class StreamEvent_ChannelPositionUpdated$Type extends MessageType<StreamEvent_ChannelPositionUpdated> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.ChannelPositionUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "new_position", kind: "message", T: () => ItemPosition }
        ]);
    }
}
export const StreamEvent_ChannelPositionUpdated = new StreamEvent_ChannelPositionUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.ChannelsReordered
 */
class StreamEvent_ChannelsReordered$Type extends MessageType<StreamEvent_ChannelsReordered> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.ChannelsReordered", [
            { no: 2, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 1, name: "channel_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const StreamEvent_ChannelsReordered = new StreamEvent_ChannelsReordered$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.ChannelDeleted
 */
class StreamEvent_ChannelDeleted$Type extends MessageType<StreamEvent_ChannelDeleted> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.ChannelDeleted", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const StreamEvent_ChannelDeleted = new StreamEvent_ChannelDeleted$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.GuildUpdated
 */
class StreamEvent_GuildUpdated$Type extends MessageType<StreamEvent_GuildUpdated> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.GuildUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "new_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_picture", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "new_metadata", kind: "message", T: () => Metadata }
        ]);
    }
}
export const StreamEvent_GuildUpdated = new StreamEvent_GuildUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.GuildDeleted
 */
class StreamEvent_GuildDeleted$Type extends MessageType<StreamEvent_GuildDeleted> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.GuildDeleted", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const StreamEvent_GuildDeleted = new StreamEvent_GuildDeleted$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.MemberJoined
 */
class StreamEvent_MemberJoined$Type extends MessageType<StreamEvent_MemberJoined> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.MemberJoined", [
            { no: 1, name: "member_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const StreamEvent_MemberJoined = new StreamEvent_MemberJoined$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.MemberLeft
 */
class StreamEvent_MemberLeft$Type extends MessageType<StreamEvent_MemberLeft> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.MemberLeft", [
            { no: 1, name: "member_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "leave_reason", kind: "enum", T: () => ["protocol.chat.v1.LeaveReason", LeaveReason, "LEAVE_REASON_"] }
        ]);
    }
}
export const StreamEvent_MemberLeft = new StreamEvent_MemberLeft$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.GuildAddedToList
 */
class StreamEvent_GuildAddedToList$Type extends MessageType<StreamEvent_GuildAddedToList> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.GuildAddedToList", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "homeserver", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const StreamEvent_GuildAddedToList = new StreamEvent_GuildAddedToList$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.GuildRemovedFromList
 */
class StreamEvent_GuildRemovedFromList$Type extends MessageType<StreamEvent_GuildRemovedFromList> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.GuildRemovedFromList", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "homeserver", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const StreamEvent_GuildRemovedFromList = new StreamEvent_GuildRemovedFromList$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.ActionPerformed
 */
class StreamEvent_ActionPerformed$Type extends MessageType<StreamEvent_ActionPerformed> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.ActionPerformed", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "action_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "action_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const StreamEvent_ActionPerformed = new StreamEvent_ActionPerformed$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.RoleMoved
 */
class StreamEvent_RoleMoved$Type extends MessageType<StreamEvent_RoleMoved> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.RoleMoved", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "new_position", kind: "message", T: () => ItemPosition }
        ]);
    }
}
export const StreamEvent_RoleMoved = new StreamEvent_RoleMoved$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.RoleDeleted
 */
class StreamEvent_RoleDeleted$Type extends MessageType<StreamEvent_RoleDeleted> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.RoleDeleted", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const StreamEvent_RoleDeleted = new StreamEvent_RoleDeleted$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.RoleCreated
 */
class StreamEvent_RoleCreated$Type extends MessageType<StreamEvent_RoleCreated> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.RoleCreated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "color", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "hoist", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "pingable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
export const StreamEvent_RoleCreated = new StreamEvent_RoleCreated$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.RoleUpdated
 */
class StreamEvent_RoleUpdated$Type extends MessageType<StreamEvent_RoleUpdated> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.RoleUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "new_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "new_color", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "new_hoist", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "new_pingable", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
export const StreamEvent_RoleUpdated = new StreamEvent_RoleUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.RolePermissionsUpdated
 */
class StreamEvent_RolePermissionsUpdated$Type extends MessageType<StreamEvent_RolePermissionsUpdated> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.RolePermissionsUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "new_perms", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Permission }
        ]);
    }
}
export const StreamEvent_RolePermissionsUpdated = new StreamEvent_RolePermissionsUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.UserRolesUpdated
 */
class StreamEvent_UserRolesUpdated$Type extends MessageType<StreamEvent_UserRolesUpdated> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.UserRolesUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "new_role_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const StreamEvent_UserRolesUpdated = new StreamEvent_UserRolesUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.Typing
 */
class StreamEvent_Typing$Type extends MessageType<StreamEvent_Typing> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.Typing", [
            { no: 1, name: "user_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const StreamEvent_Typing = new StreamEvent_Typing$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.PermissionUpdated
 */
class StreamEvent_PermissionUpdated$Type extends MessageType<StreamEvent_PermissionUpdated> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.PermissionUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ok", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
export const StreamEvent_PermissionUpdated = new StreamEvent_PermissionUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.MessagePinned
 */
class StreamEvent_MessagePinned$Type extends MessageType<StreamEvent_MessagePinned> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.MessagePinned", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const StreamEvent_MessagePinned = new StreamEvent_MessagePinned$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.MessageUnpinned
 */
class StreamEvent_MessageUnpinned$Type extends MessageType<StreamEvent_MessageUnpinned> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.MessageUnpinned", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const StreamEvent_MessageUnpinned = new StreamEvent_MessageUnpinned$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEvent.ReactionUpdated
 */
class StreamEvent_ReactionUpdated$Type extends MessageType<StreamEvent_ReactionUpdated> {
    constructor() {
        super("protocol.chat.v1.StreamEvent.ReactionUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "reaction", kind: "message", T: () => Reaction }
        ]);
    }
}
export const StreamEvent_ReactionUpdated = new StreamEvent_ReactionUpdated$Type();
