// @generated by protobuf-ts 2.2.2 with parameter long_type_string,optimize_code_size,generate_dependencies,optimize_code_size
// @generated from protobuf file "chat/v1/chat.proto" (package "protocol.chat.v1", syntax proto3)
// tslint:disable
import { GiveUpOwnershipResponse } from "./guilds";
import { GiveUpOwnershipRequest } from "./guilds";
import { GrantOwnershipResponse } from "./guilds";
import { GrantOwnershipRequest } from "./guilds";
import { RemoveReactionResponse } from "./messages";
import { RemoveReactionRequest } from "./messages";
import { AddReactionResponse } from "./messages";
import { AddReactionRequest } from "./messages";
import { StreamEventsResponse } from "./stream";
import { StreamEventsRequest } from "./stream";
import { UnpinMessageResponse } from "./messages";
import { UnpinMessageRequest } from "./messages";
import { PinMessageResponse } from "./messages";
import { PinMessageRequest } from "./messages";
import { GetPinnedMessagesResponse } from "./messages";
import { GetPinnedMessagesRequest } from "./messages";
import { UnbanUserResponse } from "./guilds";
import { UnbanUserRequest } from "./guilds";
import { KickUserResponse } from "./guilds";
import { KickUserRequest } from "./guilds";
import { BanUserResponse } from "./guilds";
import { BanUserRequest } from "./guilds";
import { GetBannedUsersResponse } from "./guilds";
import { GetBannedUsersRequest } from "./guilds";
import { PreviewGuildResponse } from "./guilds";
import { PreviewGuildRequest } from "./guilds";
import { TypingResponse } from "./messages";
import { TypingRequest } from "./messages";
import { GetUserRolesResponse } from "./permissions";
import { GetUserRolesRequest } from "./permissions";
import { ManageUserRolesResponse } from "./permissions";
import { ManageUserRolesRequest } from "./permissions";
import { DeleteGuildRoleResponse } from "./permissions";
import { DeleteGuildRoleRequest } from "./permissions";
import { ModifyGuildRoleResponse } from "./permissions";
import { ModifyGuildRoleRequest } from "./permissions";
import { AddGuildRoleResponse } from "./permissions";
import { AddGuildRoleRequest } from "./permissions";
import { GetGuildRolesResponse } from "./permissions";
import { GetGuildRolesRequest } from "./permissions";
import { MoveRoleResponse } from "./permissions";
import { MoveRoleRequest } from "./permissions";
import { GetPermissionsResponse } from "./permissions";
import { GetPermissionsRequest } from "./permissions";
import { SetPermissionsResponse } from "./permissions";
import { SetPermissionsRequest } from "./permissions";
import { HasPermissionResponse } from "./permissions";
import { HasPermissionRequest } from "./permissions";
import { SendMessageResponse } from "./messages";
import { SendMessageRequest } from "./messages";
import { TriggerActionResponse } from "./messages";
import { TriggerActionRequest } from "./messages";
import { LeaveGuildResponse } from "./guilds";
import { LeaveGuildRequest } from "./guilds";
import { JoinGuildResponse } from "./guilds";
import { JoinGuildRequest } from "./guilds";
import { DeleteMessageResponse } from "./messages";
import { DeleteMessageRequest } from "./messages";
import { DeleteChannelResponse } from "./channels";
import { DeleteChannelRequest } from "./channels";
import { DeleteInviteResponse } from "./guilds";
import { DeleteInviteRequest } from "./guilds";
import { DeleteGuildResponse } from "./guilds";
import { DeleteGuildRequest } from "./guilds";
import { UpdateMessageContentResponse } from "./messages";
import { UpdateMessageContentRequest } from "./messages";
import { UpdateAllChannelOrderResponse } from "./channels";
import { UpdateAllChannelOrderRequest } from "./channels";
import { UpdateChannelOrderResponse } from "./channels";
import { UpdateChannelOrderRequest } from "./channels";
import { UpdateChannelInformationResponse } from "./channels";
import { UpdateChannelInformationRequest } from "./channels";
import { UpdateGuildInformationResponse } from "./guilds";
import { UpdateGuildInformationRequest } from "./guilds";
import { GetMessageResponse } from "./messages";
import { GetMessageRequest } from "./messages";
import { GetChannelMessagesResponse } from "./messages";
import { GetChannelMessagesRequest } from "./messages";
import { GetGuildChannelsResponse } from "./channels";
import { GetGuildChannelsRequest } from "./channels";
import { GetGuildMembersResponse } from "./guilds";
import { GetGuildMembersRequest } from "./guilds";
import { GetGuildInvitesResponse } from "./guilds";
import { GetGuildInvitesRequest } from "./guilds";
import { GetGuildResponse } from "./guilds";
import { GetGuildRequest } from "./guilds";
import { IgnorePendingInviteResponse } from "./guilds";
import { IgnorePendingInviteRequest } from "./guilds";
import { RejectPendingInviteResponse } from "./guilds";
import { RejectPendingInviteRequest } from "./guilds";
import { GetPendingInvitesResponse } from "./guilds";
import { GetPendingInvitesRequest } from "./guilds";
import { InviteUserToGuildResponse } from "./guilds";
import { InviteUserToGuildRequest } from "./guilds";
import { GetPrivateChannelResponse } from "./private_channel";
import { GetPrivateChannelRequest } from "./private_channel";
import { GetPrivateChannelListResponse } from "./private_channel";
import { GetPrivateChannelListRequest } from "./private_channel";
import { GetGuildListResponse } from "./guilds";
import { GetGuildListRequest } from "./guilds";
import { CreateChannelResponse } from "./channels";
import { CreateChannelRequest } from "./channels";
import { CreateInviteResponse } from "./guilds";
import { CreateInviteRequest } from "./guilds";
import { LeavePrivateChannelResponse } from "./private_channel";
import { LeavePrivateChannelRequest } from "./private_channel";
import { JoinPrivateChannelResponse } from "./private_channel";
import { JoinPrivateChannelRequest } from "./private_channel";
import { DeletePrivateChannelResponse } from "./private_channel";
import { DeletePrivateChannelRequest } from "./private_channel";
import { UpdatePrivateChannelNameResponse } from "./private_channel";
import { UpdatePrivateChannelNameRequest } from "./private_channel";
import { UpdatePrivateChannelMembersResponse } from "./private_channel";
import { UpdatePrivateChannelMembersRequest } from "./private_channel";
import { CreatePrivateChannelResponse } from "./private_channel";
import { CreatePrivateChannelRequest } from "./private_channel";
import { CreateGuildResponse } from "./guilds";
import { CreateGuildRequest } from "./guilds";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
/**
 * @generated ServiceType for protobuf service protocol.chat.v1.ChatService
 */
export const ChatService = new ServiceType("protocol.chat.v1.ChatService", [
    { name: "CreateGuild", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: CreateGuildRequest, O: CreateGuildResponse },
    { name: "CreatePrivateChannel", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: CreatePrivateChannelRequest, O: CreatePrivateChannelResponse },
    { name: "UpdatePrivateChannelMembers", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: UpdatePrivateChannelMembersRequest, O: UpdatePrivateChannelMembersResponse },
    { name: "UpdatePrivateChannelName", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: UpdatePrivateChannelNameRequest, O: UpdatePrivateChannelNameResponse },
    { name: "DeletePrivateChannel", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: DeletePrivateChannelRequest, O: DeletePrivateChannelResponse },
    { name: "JoinPrivateChannel", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: JoinPrivateChannelRequest, O: JoinPrivateChannelResponse },
    { name: "LeavePrivateChannel", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: LeavePrivateChannelRequest, O: LeavePrivateChannelResponse },
    { name: "CreateInvite", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "invites.manage.create" } }, I: CreateInviteRequest, O: CreateInviteResponse },
    { name: "CreateChannel", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "channels.manage.create" } }, I: CreateChannelRequest, O: CreateChannelResponse },
    { name: "GetGuildList", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: GetGuildListRequest, O: GetGuildListResponse },
    { name: "GetPrivateChannelList", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: GetPrivateChannelListRequest, O: GetPrivateChannelListResponse },
    { name: "GetPrivateChannel", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: GetPrivateChannelRequest, O: GetPrivateChannelResponse },
    { name: "InviteUserToGuild", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "invites.manage.create" } }, I: InviteUserToGuildRequest, O: InviteUserToGuildResponse },
    { name: "GetPendingInvites", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: GetPendingInvitesRequest, O: GetPendingInvitesResponse },
    { name: "RejectPendingInvite", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: RejectPendingInviteRequest, O: RejectPendingInviteResponse },
    { name: "IgnorePendingInvite", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: IgnorePendingInviteRequest, O: IgnorePendingInviteResponse },
    { name: "GetGuild", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: GetGuildRequest, O: GetGuildResponse },
    { name: "GetGuildInvites", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "invites.view" } }, I: GetGuildInvitesRequest, O: GetGuildInvitesResponse },
    { name: "GetGuildMembers", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: GetGuildMembersRequest, O: GetGuildMembersResponse },
    { name: "GetGuildChannels", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: GetGuildChannelsRequest, O: GetGuildChannelsResponse },
    { name: "GetChannelMessages", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "messages.view" } }, I: GetChannelMessagesRequest, O: GetChannelMessagesResponse },
    { name: "GetMessage", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "messages.view" } }, I: GetMessageRequest, O: GetMessageResponse },
    { name: "UpdateGuildInformation", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "guild.manage.change-information" } }, I: UpdateGuildInformationRequest, O: UpdateGuildInformationResponse },
    { name: "UpdateChannelInformation", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "channels.manage.change-information" } }, I: UpdateChannelInformationRequest, O: UpdateChannelInformationResponse },
    { name: "UpdateChannelOrder", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "channels.manage.move" } }, I: UpdateChannelOrderRequest, O: UpdateChannelOrderResponse },
    { name: "UpdateAllChannelOrder", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "channels.manage.move" } }, I: UpdateAllChannelOrderRequest, O: UpdateAllChannelOrderResponse },
    { name: "UpdateMessageContent", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "messages.send" } }, I: UpdateMessageContentRequest, O: UpdateMessageContentResponse },
    { name: "DeleteGuild", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresOwner: true } }, I: DeleteGuildRequest, O: DeleteGuildResponse },
    { name: "DeleteInvite", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "invites.manage.delete" } }, I: DeleteInviteRequest, O: DeleteInviteResponse },
    { name: "DeleteChannel", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "channels.manage.delete" } }, I: DeleteChannelRequest, O: DeleteChannelResponse },
    { name: "DeleteMessage", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: DeleteMessageRequest, O: DeleteMessageResponse },
    { name: "JoinGuild", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: JoinGuildRequest, O: JoinGuildResponse },
    { name: "LeaveGuild", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: LeaveGuildRequest, O: LeaveGuildResponse },
    { name: "TriggerAction", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "actions.trigger" } }, I: TriggerActionRequest, O: TriggerActionResponse },
    { name: "SendMessage", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "messages.send" } }, I: SendMessageRequest, O: SendMessageResponse },
    { name: "HasPermission", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: HasPermissionRequest, O: HasPermissionResponse },
    { name: "SetPermissions", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "permissions.manage.set" } }, I: SetPermissionsRequest, O: SetPermissionsResponse },
    { name: "GetPermissions", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "permissions.manage.get" } }, I: GetPermissionsRequest, O: GetPermissionsResponse },
    { name: "MoveRole", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "roles.manage" } }, I: MoveRoleRequest, O: MoveRoleResponse },
    { name: "GetGuildRoles", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "roles.get" } }, I: GetGuildRolesRequest, O: GetGuildRolesResponse },
    { name: "AddGuildRole", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "roles.manage" } }, I: AddGuildRoleRequest, O: AddGuildRoleResponse },
    { name: "ModifyGuildRole", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "roles.manage" } }, I: ModifyGuildRoleRequest, O: ModifyGuildRoleResponse },
    { name: "DeleteGuildRole", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "roles.manage" } }, I: DeleteGuildRoleRequest, O: DeleteGuildRoleResponse },
    { name: "ManageUserRoles", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "roles.user.manage" } }, I: ManageUserRolesRequest, O: ManageUserRolesResponse },
    { name: "GetUserRoles", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: GetUserRolesRequest, O: GetUserRolesResponse },
    { name: "Typing", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "messages.send" } }, I: TypingRequest, O: TypingResponse },
    { name: "PreviewGuild", options: { "protocol.harmonytypes.v1.metadata": {} }, I: PreviewGuildRequest, O: PreviewGuildResponse },
    { name: "GetBannedUsers", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "guild.manage.change-information" } }, I: GetBannedUsersRequest, O: GetBannedUsersResponse },
    { name: "BanUser", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "user.manage.ban" } }, I: BanUserRequest, O: BanUserResponse },
    { name: "KickUser", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "user.manage.kick" } }, I: KickUserRequest, O: KickUserResponse },
    { name: "UnbanUser", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "user.manage.unban" } }, I: UnbanUserRequest, O: UnbanUserResponse },
    { name: "GetPinnedMessages", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "messages.view" } }, I: GetPinnedMessagesRequest, O: GetPinnedMessagesResponse },
    { name: "PinMessage", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "messages.pins.add" } }, I: PinMessageRequest, O: PinMessageResponse },
    { name: "UnpinMessage", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "messages.pins.remove" } }, I: UnpinMessageRequest, O: UnpinMessageResponse },
    { name: "StreamEvents", serverStreaming: true, clientStreaming: true, options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: StreamEventsRequest, O: StreamEventsResponse },
    { name: "AddReaction", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "messages.reactions.add" } }, I: AddReactionRequest, O: AddReactionResponse },
    { name: "RemoveReaction", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresPermissionNode: "messages.reactions.remove" } }, I: RemoveReactionRequest, O: RemoveReactionResponse },
    { name: "GrantOwnership", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresOwner: true } }, I: GrantOwnershipRequest, O: GrantOwnershipResponse },
    { name: "GiveUpOwnership", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true, requiresOwner: true } }, I: GiveUpOwnershipRequest, O: GiveUpOwnershipResponse }
]);
