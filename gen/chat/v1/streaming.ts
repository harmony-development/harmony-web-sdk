// @generated by protobuf-ts 1.0.13 with parameters long_type_string,optimize_code_size,generate_dependencies,optimize_code_size
// @generated from protobuf file "chat/v1/streaming.proto" (package "protocol.chat.v1", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
import { Emote } from "./emotes";
import { EmotePack } from "./emotes";
import { UserStatus } from "../../harmonytypes/v1/types";
import { PermissionList } from "./permissions";
import { Role } from "./permissions";
import { Metadata } from "../../harmonytypes/v1/types";
import { ItemPosition } from "../../harmonytypes/v1/types";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Message } from "../../harmonytypes/v1/types";
/**
 * Request type for use in the `StreamEvents` endpoint.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEventsRequest
 */
export interface StreamEventsRequest {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "subscribeToGuild";
        /**
         * Subscribe to the guild event source.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEventsRequest.SubscribeToGuild subscribe_to_guild = 1;
         */
        subscribeToGuild: StreamEventsRequest_SubscribeToGuild;
    } | {
        oneofKind: "subscribeToActions";
        /**
         * Subscribe to the action event source.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEventsRequest.SubscribeToActions subscribe_to_actions = 2;
         */
        subscribeToActions: StreamEventsRequest_SubscribeToActions;
    } | {
        oneofKind: "subscribeToHomeserverEvents";
        /**
         * Subscribe to the homeserver event source.
         *
         * @generated from protobuf field: protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents subscribe_to_homeserver_events = 3;
         */
        subscribeToHomeserverEvents: StreamEventsRequest_SubscribeToHomeserverEvents;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Event source for guilds' events.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEventsRequest.SubscribeToGuild
 */
export interface StreamEventsRequest_SubscribeToGuild {
    /**
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
}
/**
 * Event source for actions' events.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEventsRequest.SubscribeToActions
 */
export interface StreamEventsRequest_SubscribeToActions {
}
/**
 * Event source for homeserver events.
 *
 * @generated from protobuf message protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents
 */
export interface StreamEventsRequest_SubscribeToHomeserverEvents {
}
/**
 * Describes an event.
 *
 * @generated from protobuf message protocol.chat.v1.Event
 */
export interface Event {
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "guildAddedToList";
        /**
         * Send the guild added to list event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.GuildAddedToList guild_added_to_list = 1;
         */
        guildAddedToList: Event_GuildAddedToList;
    } | {
        oneofKind: "guildRemovedFromList";
        /**
         * Send the guild removed from list event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.GuildRemovedFromList guild_removed_from_list = 2;
         */
        guildRemovedFromList: Event_GuildRemovedFromList;
    } | {
        oneofKind: "actionPerformed";
        /**
         * Send the action performed event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.ActionPerformed action_performed = 3;
         */
        actionPerformed: Event_ActionPerformed;
    } | {
        oneofKind: "sentMessage";
        /**
         * Send the message sent event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.MessageSent sent_message = 4;
         */
        sentMessage: Event_MessageSent;
    } | {
        oneofKind: "editedMessage";
        /**
         * Send the message updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.MessageUpdated edited_message = 5;
         */
        editedMessage: Event_MessageUpdated;
    } | {
        oneofKind: "deletedMessage";
        /**
         * Send the message deleted event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.MessageDeleted deleted_message = 6;
         */
        deletedMessage: Event_MessageDeleted;
    } | {
        oneofKind: "createdChannel";
        /**
         * Send the channel created event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.ChannelCreated created_channel = 7;
         */
        createdChannel: Event_ChannelCreated;
    } | {
        oneofKind: "editedChannel";
        /**
         * Send the channel updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.ChannelUpdated edited_channel = 8;
         */
        editedChannel: Event_ChannelUpdated;
    } | {
        oneofKind: "deletedChannel";
        /**
         * Send the channel deleted event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.ChannelDeleted deleted_channel = 9;
         */
        deletedChannel: Event_ChannelDeleted;
    } | {
        oneofKind: "channelsReordered";
        /**
         * The channels have been completely reordered.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.ChannelsReordered channels_reordered = 27;
         */
        channelsReordered: Event_ChannelsReordered;
    } | {
        oneofKind: "editedGuild";
        /**
         * Send the guild updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.GuildUpdated edited_guild = 10;
         */
        editedGuild: Event_GuildUpdated;
    } | {
        oneofKind: "deletedGuild";
        /**
         * Send the guild deleted event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.GuildDeleted deleted_guild = 11;
         */
        deletedGuild: Event_GuildDeleted;
    } | {
        oneofKind: "joinedMember";
        /**
         * Send the member joined event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.MemberJoined joined_member = 12;
         */
        joinedMember: Event_MemberJoined;
    } | {
        oneofKind: "leftMember";
        /**
         * Send the member left event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.MemberLeft left_member = 13;
         */
        leftMember: Event_MemberLeft;
    } | {
        oneofKind: "profileUpdated";
        /**
         * Send the profile updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.ProfileUpdated profile_updated = 14;
         */
        profileUpdated: Event_ProfileUpdated;
    } | {
        oneofKind: "typing";
        /**
         * Send the typing event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.Typing typing = 15;
         */
        typing: Event_Typing;
    } | {
        oneofKind: "roleCreated";
        /**
         * Send the role created event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.RoleCreated role_created = 16;
         */
        roleCreated: Event_RoleCreated;
    } | {
        oneofKind: "roleDeleted";
        /**
         * Send the role deleted event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.RoleDeleted role_deleted = 17;
         */
        roleDeleted: Event_RoleDeleted;
    } | {
        oneofKind: "roleMoved";
        /**
         * Send the role moved event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.RoleMoved role_moved = 18;
         */
        roleMoved: Event_RoleMoved;
    } | {
        oneofKind: "roleUpdated";
        /**
         * Send the role updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.RoleUpdated role_updated = 19;
         */
        roleUpdated: Event_RoleUpdated;
    } | {
        oneofKind: "rolePermsUpdated";
        /**
         * Send the role perms updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.RolePermissionsUpdated role_perms_updated = 20;
         */
        rolePermsUpdated: Event_RolePermissionsUpdated;
    } | {
        oneofKind: "userRolesUpdated";
        /**
         * Send the user roles updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.UserRolesUpdated user_roles_updated = 21;
         */
        userRolesUpdated: Event_UserRolesUpdated;
    } | {
        oneofKind: "permissionUpdated";
        /**
         * Send the permission updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.PermissionUpdated permission_updated = 22;
         */
        permissionUpdated: Event_PermissionUpdated;
    } | {
        oneofKind: "emotePackAdded";
        /**
         * Send the emote pack added event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.EmotePackAdded emote_pack_added = 23;
         */
        emotePackAdded: Event_EmotePackAdded;
    } | {
        oneofKind: "emotePackUpdated";
        /**
         * Send the emote pack updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.EmotePackUpdated emote_pack_updated = 24;
         */
        emotePackUpdated: Event_EmotePackUpdated;
    } | {
        oneofKind: "emotePackDeleted";
        /**
         * Send the emote pack deleted event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.EmotePackDeleted emote_pack_deleted = 25;
         */
        emotePackDeleted: Event_EmotePackDeleted;
    } | {
        oneofKind: "emotePackEmotesUpdated";
        /**
         * Send the emote pack emotes updated event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.EmotePackEmotesUpdated emote_pack_emotes_updated = 26;
         */
        emotePackEmotesUpdated: Event_EmotePackEmotesUpdated;
    } | {
        oneofKind: "messagePinned";
        /**
         * Send the message pinned event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.MessagePinned message_pinned = 28;
         */
        messagePinned: Event_MessagePinned;
    } | {
        oneofKind: "messageUnpinned";
        /**
         * Send the message unpinned event.
         *
         * @generated from protobuf field: protocol.chat.v1.Event.MessageUnpinned message_unpinned = 29;
         */
        messageUnpinned: Event_MessageUnpinned;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Event sent when a new message is sent.
 *
 * @generated from protobuf message protocol.chat.v1.Event.MessageSent
 */
export interface Event_MessageSent {
    /**
     * ID that is sent by your client it can use to confirm that the message is sent.
     *
     * @generated from protobuf field: uint64 echo_id = 1;
     */
    echoId: string;
    /**
     * The actual message.
     *
     * @generated from protobuf field: protocol.harmonytypes.v1.Message message = 2;
     */
    message?: Message;
}
/**
 * Event sent when a message's text content is updated.
 *
 * @generated from protobuf message protocol.chat.v1.Event.MessageUpdated
 */
export interface Event_MessageUpdated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message that was updated.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
    /**
     * When this message was edited.
     *
     * @generated from protobuf field: google.protobuf.Timestamp edited_at = 4;
     */
    editedAt?: Timestamp;
    /**
     * New message content.
     *
     * @generated from protobuf field: string new_content = 5;
     */
    newContent: string;
}
/**
 * Event sent when a message is deleted.
 *
 * @generated from protobuf message protocol.chat.v1.Event.MessageDeleted
 */
export interface Event_MessageDeleted {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message that was deleted.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
}
/**
 * Event sent when a new channel is created.
 *
 * @generated from protobuf message protocol.chat.v1.Event.ChannelCreated
 */
export interface Event_ChannelCreated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Name of this channel.
     *
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * the position in the channel list.
     *
     * @generated from protobuf field: protocol.harmonytypes.v1.ItemPosition position = 4;
     */
    position?: ItemPosition;
    /**
     * Is this channel a category or not.
     *
     * @generated from protobuf field: bool is_category = 5;
     */
    isCategory: boolean;
    /**
     * Metadata for this channel.
     *
     * @generated from protobuf field: protocol.harmonytypes.v1.Metadata metadata = 6;
     */
    metadata?: Metadata;
}
/**
 * Event sent when a channel's information or position in the channel is changed.
 *
 * @generated from protobuf message protocol.chat.v1.Event.ChannelUpdated
 */
export interface Event_ChannelUpdated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * @generated from protobuf field: optional string new_name = 3;
     */
    newName?: string;
    /**
     * @generated from protobuf field: optional protocol.harmonytypes.v1.ItemPosition new_position = 4;
     */
    newPosition?: ItemPosition;
    /**
     * @generated from protobuf field: optional protocol.harmonytypes.v1.Metadata new_metadata = 5;
     */
    newMetadata?: Metadata;
}
/**
 * Event sent when all channels have been reordered
 *
 * @generated from protobuf message protocol.chat.v1.Event.ChannelsReordered
 */
export interface Event_ChannelsReordered {
    /**
     * guild_id: the guild whose channels are being reordered
     *
     * @generated from protobuf field: uint64 guild_id = 2;
     */
    guildId: string;
    /**
     * channel_ids: the new order of channel IDs
     *
     * @generated from protobuf field: repeated uint64 channel_ids = 1;
     */
    channelIds: string[];
}
/**
 * Event sent when a channel is deleted.
 *
 * @generated from protobuf message protocol.chat.v1.Event.ChannelDeleted
 */
export interface Event_ChannelDeleted {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
}
/**
 * Event sent when a guild's information is updated.
 *
 * @generated from protobuf message protocol.chat.v1.Event.GuildUpdated
 */
export interface Event_GuildUpdated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: optional string new_name = 2;
     */
    newName?: string;
    /**
     * @generated from protobuf field: optional string new_picture = 3;
     */
    newPicture?: string;
    /**
     * @generated from protobuf field: optional protocol.harmonytypes.v1.Metadata new_metadata = 4;
     */
    newMetadata?: Metadata;
}
/**
 * Event sent when a guild is deleted.
 *
 * @generated from protobuf message protocol.chat.v1.Event.GuildDeleted
 */
export interface Event_GuildDeleted {
    /**
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
}
/**
 * Event sent a user joins to a guild.
 *
 * @generated from protobuf message protocol.chat.v1.Event.MemberJoined
 */
export interface Event_MemberJoined {
    /**
     * Member ID of the member that joined the guild.
     *
     * @generated from protobuf field: uint64 member_id = 1;
     */
    memberId: string;
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 2;
     */
    guildId: string;
}
/**
 * Event sent when a member of a guild leaves said guild for whatever reason.
 *
 * @generated from protobuf message protocol.chat.v1.Event.MemberLeft
 */
export interface Event_MemberLeft {
    /**
     * User ID of the member that left the guild.
     *
     * @generated from protobuf field: uint64 member_id = 1;
     */
    memberId: string;
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 2;
     */
    guildId: string;
    /**
     * Why this member left the guild.
     *
     * @generated from protobuf field: protocol.chat.v1.Event.LeaveReason leave_reason = 3;
     */
    leaveReason: Event_LeaveReason;
}
/**
 * Event sent when you join a new guild.
 *
 * @generated from protobuf message protocol.chat.v1.Event.GuildAddedToList
 */
export interface Event_GuildAddedToList {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * The homeserver this guild is on.
     *
     * @generated from protobuf field: string homeserver = 2;
     */
    homeserver: string;
}
/**
 * Event sent when you leave a guild.
 *
 * @generated from protobuf message protocol.chat.v1.Event.GuildRemovedFromList
 */
export interface Event_GuildRemovedFromList {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * The homeserver this guild is on.
     *
     * @generated from protobuf field: string homeserver = 2;
     */
    homeserver: string;
}
/**
 * Event sent when an action is performed.
 *
 * @generated from protobuf message protocol.chat.v1.Event.ActionPerformed
 */
export interface Event_ActionPerformed {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID where this event happened.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
    /**
     * Action ID of the action that was performed.
     *
     * @generated from protobuf field: string action_id = 4;
     */
    actionId: string;
    /**
     * Action data.
     *
     * @generated from protobuf field: string action_data = 5;
     */
    actionData: string;
}
/**
 * Event sent when a role's position in the role list is changed.
 *
 * @generated from protobuf message protocol.chat.v1.Event.RoleMoved
 */
export interface Event_RoleMoved {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Role ID of the role that was moved.
     *
     * @generated from protobuf field: uint64 role_id = 2;
     */
    roleId: string;
    /**
     * @generated from protobuf field: protocol.harmonytypes.v1.ItemPosition new_position = 3;
     */
    newPosition?: ItemPosition;
}
/**
 * Event sent when a role is deleted.
 *
 * @generated from protobuf message protocol.chat.v1.Event.RoleDeleted
 */
export interface Event_RoleDeleted {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Role ID of the role that was deleted.
     *
     * @generated from protobuf field: uint64 role_id = 2;
     */
    roleId: string;
}
/**
 * Event sent when a role is created.
 *
 * @generated from protobuf message protocol.chat.v1.Event.RoleCreated
 */
export interface Event_RoleCreated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Role ID of the role that was created.
     *
     * @generated from protobuf field: uint64 role_id = 2;
     */
    roleId: string;
    /**
     * The actual role.
     *
     * @generated from protobuf field: protocol.chat.v1.Role role = 3;
     */
    role?: Role;
}
/**
 * Event sent when a role's information is changed.
 *
 * @generated from protobuf message protocol.chat.v1.Event.RoleUpdated
 */
export interface Event_RoleUpdated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Role ID of the role that was changed.
     *
     * @generated from protobuf field: uint64 role_id = 2;
     */
    roleId: string;
    /**
     * The actual new role.
     *
     * @generated from protobuf field: protocol.chat.v1.Role new_role = 3;
     */
    newRole?: Role;
}
/**
 * Event sent when a role's permissions are changed.
 *
 * This event will only be sent to users with the "guild.manage" permission.
 *
 * @generated from protobuf message protocol.chat.v1.Event.RolePermissionsUpdated
 */
export interface Event_RolePermissionsUpdated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Role ID of the role that had it's permissions changed.
     *
     * @generated from protobuf field: uint64 role_id = 3;
     */
    roleId: string;
    /**
     * The new permissions.
     *
     * @generated from protobuf field: protocol.chat.v1.PermissionList new_perms = 4;
     */
    newPerms?: PermissionList;
}
/**
 * Event sent when a user's roles are changed.
 *
 * @generated from protobuf message protocol.chat.v1.Event.UserRolesUpdated
 */
export interface Event_UserRolesUpdated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * User ID of the user that had it's roles changed.
     *
     * @generated from protobuf field: uint64 user_id = 2;
     */
    userId: string;
    /**
     * The new role IDs.
     *
     * @generated from protobuf field: repeated uint64 new_role_ids = 3;
     */
    newRoleIds: string[];
}
/**
 * Event sent when a user's profile is updated.
 *
 * Servers should sent this event only to users that can "see" (eg. they are
 * in the same guild) the user this event was triggered by.
 *
 * @generated from protobuf message protocol.chat.v1.Event.ProfileUpdated
 */
export interface Event_ProfileUpdated {
    /**
     * User ID of the user that had it's profile updated.
     *
     * @generated from protobuf field: uint64 user_id = 1;
     */
    userId: string;
    /**
     * New username for this user.
     *
     * @generated from protobuf field: optional string new_username = 2;
     */
    newUsername?: string;
    /**
     * New avatar for this user.
     *
     * @generated from protobuf field: optional string new_avatar = 3;
     */
    newAvatar?: string;
    /**
     * New status for this user.
     *
     * @generated from protobuf field: optional protocol.harmonytypes.v1.UserStatus new_status = 4;
     */
    newStatus?: UserStatus;
    /**
     * New is bot or not for this user.
     *
     * @generated from protobuf field: optional bool new_is_bot = 5;
     */
    newIsBot?: boolean;
}
/**
 * Event sent when a user sends a typing notification in a guild channel.
 *
 * @generated from protobuf message protocol.chat.v1.Event.Typing
 */
export interface Event_Typing {
    /**
     * User ID of the user that sent the typing notification.
     *
     * @generated from protobuf field: uint64 user_id = 1;
     */
    userId: string;
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 2;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: uint64 channel_id = 3;
     */
    channelId: string;
}
/**
 * Event sent when a permission is changed that matters to you.
 *
 * Servers should calculate which users to send this event to when a permission is set.
 * It should only be sent if a user is subscribed to the guild the permission pertains to.
 *
 * @generated from protobuf message protocol.chat.v1.Event.PermissionUpdated
 */
export interface Event_PermissionUpdated {
    /**
     * Guild ID of the guild where this event happened.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event happened.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * The permission node that was changed.
     *
     * @generated from protobuf field: string query = 3;
     */
    query: string;
    /**
     * Whether you have the permission or not.
     *
     * @generated from protobuf field: bool ok = 4;
     */
    ok: boolean;
}
/**
 * Event sent when an emote pack's information is changed.
 *
 * Should only be sent to users who have the pack equipped.
 *
 * @generated from protobuf message protocol.chat.v1.Event.EmotePackUpdated
 */
export interface Event_EmotePackUpdated {
    /**
     * ID of the pack that was updated.
     *
     * @generated from protobuf field: uint64 pack_id = 1;
     */
    packId: string;
    /**
     * New pack name of the pack.
     *
     * @generated from protobuf field: optional string new_pack_name = 2;
     */
    newPackName?: string;
}
/**
 * Event sent when an emote pack is deleted.
 *
 * Should only be sent to users who have the pack equipped.
 * Should also be sent if a user dequips an emote pack, only to the user that dequipped it.
 *
 * @generated from protobuf message protocol.chat.v1.Event.EmotePackDeleted
 */
export interface Event_EmotePackDeleted {
    /**
     * ID of the pack that was deleted.
     *
     * @generated from protobuf field: uint64 pack_id = 1;
     */
    packId: string;
}
/**
 * Event sent when an emote pack is added.
 *
 * Should only be sent to the user who equipped the pack.
 *
 * @generated from protobuf message protocol.chat.v1.Event.EmotePackAdded
 */
export interface Event_EmotePackAdded {
    /**
     * Emote pack that was equipped by the user.
     *
     * @generated from protobuf field: protocol.chat.v1.EmotePack pack = 1;
     */
    pack?: EmotePack;
}
/**
 * Event sent when an emote pack's emotes were changed.
 *
 * Should only be sent to users who have the pack equipped.
 *
 * @generated from protobuf message protocol.chat.v1.Event.EmotePackEmotesUpdated
 */
export interface Event_EmotePackEmotesUpdated {
    /**
     * ID of the pack to update the emotes of.
     *
     * @generated from protobuf field: uint64 pack_id = 1;
     */
    packId: string;
    /**
     * The added emotes.
     *
     * @generated from protobuf field: repeated protocol.chat.v1.Emote added_emotes = 2;
     */
    addedEmotes: Emote[];
    /**
     * The image IDs of the deleted emotes.
     *
     * @generated from protobuf field: repeated string deleted_emotes = 3;
     */
    deletedEmotes: string[];
}
/**
 * Sent when a message is pinned in a guild channel.
 *
 * Should only be sent to users who have the "message.view" permission for
 * the guild channel where the message was pinned.
 *
 * @generated from protobuf message protocol.chat.v1.Event.MessagePinned
 */
export interface Event_MessagePinned {
    /**
     * Guild ID of the guild where this event occured.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event occured.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message that was pinned.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
}
/**
 * Sent when a message is unpinned in a guild channel.
 *
 * Should only be sent to users who have the "message.view" permission for
 * the guild channel where the message was unpinned.
 *
 * @generated from protobuf message protocol.chat.v1.Event.MessageUnpinned
 */
export interface Event_MessageUnpinned {
    /**
     * Guild ID of the guild where this event occured.
     *
     * @generated from protobuf field: uint64 guild_id = 1;
     */
    guildId: string;
    /**
     * Channel ID of the channel where this event occured.
     *
     * @generated from protobuf field: uint64 channel_id = 2;
     */
    channelId: string;
    /**
     * Message ID of the message that was unpinned.
     *
     * @generated from protobuf field: uint64 message_id = 3;
     */
    messageId: string;
}
/**
 * A reason for why a user has left a guild.
 *
 * @generated from protobuf enum protocol.chat.v1.Event.LeaveReason
 */
export enum Event_LeaveReason {
    /**
     * The user left the guild willingly.
     *
     * @generated from protobuf enum value: willingly = 0;
     */
    willingly = 0,
    /**
     * The user was banned from the guild.
     *
     * @generated from protobuf enum value: banned = 1;
     */
    banned = 1,
    /**
     * The user was kicked from the guild.
     *
     * @generated from protobuf enum value: kicked = 2;
     */
    kicked = 2
}
/**
 * Type for protobuf message protocol.chat.v1.StreamEventsRequest
 */
class StreamEventsRequest$Type extends MessageType<StreamEventsRequest> {
    constructor() {
        super("protocol.chat.v1.StreamEventsRequest", [
            { no: 1, name: "subscribe_to_guild", kind: "message", oneof: "request", T: () => StreamEventsRequest_SubscribeToGuild },
            { no: 2, name: "subscribe_to_actions", kind: "message", oneof: "request", T: () => StreamEventsRequest_SubscribeToActions },
            { no: 3, name: "subscribe_to_homeserver_events", kind: "message", oneof: "request", T: () => StreamEventsRequest_SubscribeToHomeserverEvents }
        ]);
    }
}
export const StreamEventsRequest = new StreamEventsRequest$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEventsRequest.SubscribeToGuild
 */
class StreamEventsRequest_SubscribeToGuild$Type extends MessageType<StreamEventsRequest_SubscribeToGuild> {
    constructor() {
        super("protocol.chat.v1.StreamEventsRequest.SubscribeToGuild", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const StreamEventsRequest_SubscribeToGuild = new StreamEventsRequest_SubscribeToGuild$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEventsRequest.SubscribeToActions
 */
class StreamEventsRequest_SubscribeToActions$Type extends MessageType<StreamEventsRequest_SubscribeToActions> {
    constructor() {
        super("protocol.chat.v1.StreamEventsRequest.SubscribeToActions", []);
    }
}
export const StreamEventsRequest_SubscribeToActions = new StreamEventsRequest_SubscribeToActions$Type();
/**
 * Type for protobuf message protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents
 */
class StreamEventsRequest_SubscribeToHomeserverEvents$Type extends MessageType<StreamEventsRequest_SubscribeToHomeserverEvents> {
    constructor() {
        super("protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents", []);
    }
}
export const StreamEventsRequest_SubscribeToHomeserverEvents = new StreamEventsRequest_SubscribeToHomeserverEvents$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event
 */
class Event$Type extends MessageType<Event> {
    constructor() {
        super("protocol.chat.v1.Event", [
            { no: 1, name: "guild_added_to_list", kind: "message", oneof: "event", T: () => Event_GuildAddedToList },
            { no: 2, name: "guild_removed_from_list", kind: "message", oneof: "event", T: () => Event_GuildRemovedFromList },
            { no: 3, name: "action_performed", kind: "message", oneof: "event", T: () => Event_ActionPerformed },
            { no: 4, name: "sent_message", kind: "message", oneof: "event", T: () => Event_MessageSent },
            { no: 5, name: "edited_message", kind: "message", oneof: "event", T: () => Event_MessageUpdated },
            { no: 6, name: "deleted_message", kind: "message", oneof: "event", T: () => Event_MessageDeleted },
            { no: 7, name: "created_channel", kind: "message", oneof: "event", T: () => Event_ChannelCreated },
            { no: 8, name: "edited_channel", kind: "message", oneof: "event", T: () => Event_ChannelUpdated },
            { no: 9, name: "deleted_channel", kind: "message", oneof: "event", T: () => Event_ChannelDeleted },
            { no: 27, name: "channels_reordered", kind: "message", oneof: "event", T: () => Event_ChannelsReordered },
            { no: 10, name: "edited_guild", kind: "message", oneof: "event", T: () => Event_GuildUpdated },
            { no: 11, name: "deleted_guild", kind: "message", oneof: "event", T: () => Event_GuildDeleted },
            { no: 12, name: "joined_member", kind: "message", oneof: "event", T: () => Event_MemberJoined },
            { no: 13, name: "left_member", kind: "message", oneof: "event", T: () => Event_MemberLeft },
            { no: 14, name: "profile_updated", kind: "message", oneof: "event", T: () => Event_ProfileUpdated },
            { no: 15, name: "typing", kind: "message", oneof: "event", T: () => Event_Typing },
            { no: 16, name: "role_created", kind: "message", oneof: "event", T: () => Event_RoleCreated },
            { no: 17, name: "role_deleted", kind: "message", oneof: "event", T: () => Event_RoleDeleted },
            { no: 18, name: "role_moved", kind: "message", oneof: "event", T: () => Event_RoleMoved },
            { no: 19, name: "role_updated", kind: "message", oneof: "event", T: () => Event_RoleUpdated },
            { no: 20, name: "role_perms_updated", kind: "message", oneof: "event", T: () => Event_RolePermissionsUpdated },
            { no: 21, name: "user_roles_updated", kind: "message", oneof: "event", T: () => Event_UserRolesUpdated },
            { no: 22, name: "permission_updated", kind: "message", oneof: "event", T: () => Event_PermissionUpdated },
            { no: 23, name: "emote_pack_added", kind: "message", oneof: "event", T: () => Event_EmotePackAdded },
            { no: 24, name: "emote_pack_updated", kind: "message", oneof: "event", T: () => Event_EmotePackUpdated },
            { no: 25, name: "emote_pack_deleted", kind: "message", oneof: "event", T: () => Event_EmotePackDeleted },
            { no: 26, name: "emote_pack_emotes_updated", kind: "message", oneof: "event", T: () => Event_EmotePackEmotesUpdated },
            { no: 28, name: "message_pinned", kind: "message", oneof: "event", T: () => Event_MessagePinned },
            { no: 29, name: "message_unpinned", kind: "message", oneof: "event", T: () => Event_MessageUnpinned }
        ]);
    }
}
export const Event = new Event$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.MessageSent
 */
class Event_MessageSent$Type extends MessageType<Event_MessageSent> {
    constructor() {
        super("protocol.chat.v1.Event.MessageSent", [
            { no: 1, name: "echo_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "message", kind: "message", T: () => Message }
        ]);
    }
}
export const Event_MessageSent = new Event_MessageSent$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.MessageUpdated
 */
class Event_MessageUpdated$Type extends MessageType<Event_MessageUpdated> {
    constructor() {
        super("protocol.chat.v1.Event.MessageUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "edited_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "new_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const Event_MessageUpdated = new Event_MessageUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.MessageDeleted
 */
class Event_MessageDeleted$Type extends MessageType<Event_MessageDeleted> {
    constructor() {
        super("protocol.chat.v1.Event.MessageDeleted", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const Event_MessageDeleted = new Event_MessageDeleted$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.ChannelCreated
 */
class Event_ChannelCreated$Type extends MessageType<Event_ChannelCreated> {
    constructor() {
        super("protocol.chat.v1.Event.ChannelCreated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "position", kind: "message", T: () => ItemPosition },
            { no: 5, name: "is_category", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "metadata", kind: "message", T: () => Metadata }
        ]);
    }
}
export const Event_ChannelCreated = new Event_ChannelCreated$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.ChannelUpdated
 */
class Event_ChannelUpdated$Type extends MessageType<Event_ChannelUpdated> {
    constructor() {
        super("protocol.chat.v1.Event.ChannelUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "new_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "new_position", kind: "message", T: () => ItemPosition },
            { no: 5, name: "new_metadata", kind: "message", T: () => Metadata }
        ]);
    }
}
export const Event_ChannelUpdated = new Event_ChannelUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.ChannelsReordered
 */
class Event_ChannelsReordered$Type extends MessageType<Event_ChannelsReordered> {
    constructor() {
        super("protocol.chat.v1.Event.ChannelsReordered", [
            { no: 2, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 1, name: "channel_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const Event_ChannelsReordered = new Event_ChannelsReordered$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.ChannelDeleted
 */
class Event_ChannelDeleted$Type extends MessageType<Event_ChannelDeleted> {
    constructor() {
        super("protocol.chat.v1.Event.ChannelDeleted", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const Event_ChannelDeleted = new Event_ChannelDeleted$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.GuildUpdated
 */
class Event_GuildUpdated$Type extends MessageType<Event_GuildUpdated> {
    constructor() {
        super("protocol.chat.v1.Event.GuildUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "new_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_picture", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "new_metadata", kind: "message", T: () => Metadata }
        ]);
    }
}
export const Event_GuildUpdated = new Event_GuildUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.GuildDeleted
 */
class Event_GuildDeleted$Type extends MessageType<Event_GuildDeleted> {
    constructor() {
        super("protocol.chat.v1.Event.GuildDeleted", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const Event_GuildDeleted = new Event_GuildDeleted$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.MemberJoined
 */
class Event_MemberJoined$Type extends MessageType<Event_MemberJoined> {
    constructor() {
        super("protocol.chat.v1.Event.MemberJoined", [
            { no: 1, name: "member_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const Event_MemberJoined = new Event_MemberJoined$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.MemberLeft
 */
class Event_MemberLeft$Type extends MessageType<Event_MemberLeft> {
    constructor() {
        super("protocol.chat.v1.Event.MemberLeft", [
            { no: 1, name: "member_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "leave_reason", kind: "enum", T: () => ["protocol.chat.v1.Event.LeaveReason", Event_LeaveReason] }
        ]);
    }
}
export const Event_MemberLeft = new Event_MemberLeft$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.GuildAddedToList
 */
class Event_GuildAddedToList$Type extends MessageType<Event_GuildAddedToList> {
    constructor() {
        super("protocol.chat.v1.Event.GuildAddedToList", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "homeserver", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const Event_GuildAddedToList = new Event_GuildAddedToList$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.GuildRemovedFromList
 */
class Event_GuildRemovedFromList$Type extends MessageType<Event_GuildRemovedFromList> {
    constructor() {
        super("protocol.chat.v1.Event.GuildRemovedFromList", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "homeserver", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const Event_GuildRemovedFromList = new Event_GuildRemovedFromList$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.ActionPerformed
 */
class Event_ActionPerformed$Type extends MessageType<Event_ActionPerformed> {
    constructor() {
        super("protocol.chat.v1.Event.ActionPerformed", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "action_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "action_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const Event_ActionPerformed = new Event_ActionPerformed$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.RoleMoved
 */
class Event_RoleMoved$Type extends MessageType<Event_RoleMoved> {
    constructor() {
        super("protocol.chat.v1.Event.RoleMoved", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "new_position", kind: "message", T: () => ItemPosition }
        ]);
    }
}
export const Event_RoleMoved = new Event_RoleMoved$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.RoleDeleted
 */
class Event_RoleDeleted$Type extends MessageType<Event_RoleDeleted> {
    constructor() {
        super("protocol.chat.v1.Event.RoleDeleted", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const Event_RoleDeleted = new Event_RoleDeleted$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.RoleCreated
 */
class Event_RoleCreated$Type extends MessageType<Event_RoleCreated> {
    constructor() {
        super("protocol.chat.v1.Event.RoleCreated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "role", kind: "message", T: () => Role }
        ]);
    }
}
export const Event_RoleCreated = new Event_RoleCreated$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.RoleUpdated
 */
class Event_RoleUpdated$Type extends MessageType<Event_RoleUpdated> {
    constructor() {
        super("protocol.chat.v1.Event.RoleUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "new_role", kind: "message", T: () => Role }
        ]);
    }
}
export const Event_RoleUpdated = new Event_RoleUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.RolePermissionsUpdated
 */
class Event_RolePermissionsUpdated$Type extends MessageType<Event_RolePermissionsUpdated> {
    constructor() {
        super("protocol.chat.v1.Event.RolePermissionsUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "new_perms", kind: "message", T: () => PermissionList }
        ]);
    }
}
export const Event_RolePermissionsUpdated = new Event_RolePermissionsUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.UserRolesUpdated
 */
class Event_UserRolesUpdated$Type extends MessageType<Event_UserRolesUpdated> {
    constructor() {
        super("protocol.chat.v1.Event.UserRolesUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "new_role_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const Event_UserRolesUpdated = new Event_UserRolesUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.ProfileUpdated
 */
class Event_ProfileUpdated$Type extends MessageType<Event_ProfileUpdated> {
    constructor() {
        super("protocol.chat.v1.Event.ProfileUpdated", [
            { no: 1, name: "user_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "new_username", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_avatar", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "new_status", kind: "enum", opt: true, T: () => ["protocol.harmonytypes.v1.UserStatus", UserStatus, "USER_STATUS_"] },
            { no: 5, name: "new_is_bot", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
export const Event_ProfileUpdated = new Event_ProfileUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.Typing
 */
class Event_Typing$Type extends MessageType<Event_Typing> {
    constructor() {
        super("protocol.chat.v1.Event.Typing", [
            { no: 1, name: "user_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const Event_Typing = new Event_Typing$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.PermissionUpdated
 */
class Event_PermissionUpdated$Type extends MessageType<Event_PermissionUpdated> {
    constructor() {
        super("protocol.chat.v1.Event.PermissionUpdated", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ok", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
export const Event_PermissionUpdated = new Event_PermissionUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.EmotePackUpdated
 */
class Event_EmotePackUpdated$Type extends MessageType<Event_EmotePackUpdated> {
    constructor() {
        super("protocol.chat.v1.Event.EmotePackUpdated", [
            { no: 1, name: "pack_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "new_pack_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const Event_EmotePackUpdated = new Event_EmotePackUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.EmotePackDeleted
 */
class Event_EmotePackDeleted$Type extends MessageType<Event_EmotePackDeleted> {
    constructor() {
        super("protocol.chat.v1.Event.EmotePackDeleted", [
            { no: 1, name: "pack_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const Event_EmotePackDeleted = new Event_EmotePackDeleted$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.EmotePackAdded
 */
class Event_EmotePackAdded$Type extends MessageType<Event_EmotePackAdded> {
    constructor() {
        super("protocol.chat.v1.Event.EmotePackAdded", [
            { no: 1, name: "pack", kind: "message", T: () => EmotePack }
        ]);
    }
}
export const Event_EmotePackAdded = new Event_EmotePackAdded$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.EmotePackEmotesUpdated
 */
class Event_EmotePackEmotesUpdated$Type extends MessageType<Event_EmotePackEmotesUpdated> {
    constructor() {
        super("protocol.chat.v1.Event.EmotePackEmotesUpdated", [
            { no: 1, name: "pack_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "added_emotes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Emote },
            { no: 3, name: "deleted_emotes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
export const Event_EmotePackEmotesUpdated = new Event_EmotePackEmotesUpdated$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.MessagePinned
 */
class Event_MessagePinned$Type extends MessageType<Event_MessagePinned> {
    constructor() {
        super("protocol.chat.v1.Event.MessagePinned", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const Event_MessagePinned = new Event_MessagePinned$Type();
/**
 * Type for protobuf message protocol.chat.v1.Event.MessageUnpinned
 */
class Event_MessageUnpinned$Type extends MessageType<Event_MessageUnpinned> {
    constructor() {
        super("protocol.chat.v1.Event.MessageUnpinned", [
            { no: 1, name: "guild_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
}
export const Event_MessageUnpinned = new Event_MessageUnpinned$Type();
