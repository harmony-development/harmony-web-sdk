// @generated by protobuf-ts 2.2.2 with parameter long_type_string,optimize_code_size,generate_dependencies,optimize_code_size
// @generated from protobuf file "profile/v1/profile.proto" (package "protocol.profile.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ProfileService } from "./profile";
import type { SetAppDataResponse } from "./types";
import type { SetAppDataRequest } from "./types";
import type { GetAppDataResponse } from "./types";
import type { GetAppDataRequest } from "./types";
import type { UpdateStatusResponse } from "./types";
import type { UpdateStatusRequest } from "./types";
import type { UpdateProfileResponse } from "./types";
import type { UpdateProfileRequest } from "./types";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetProfileResponse } from "./types";
import type { GetProfileRequest } from "./types";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Harmony's Profile service manages the profiles of the users.
 *
 * @generated from protobuf service protocol.profile.v1.ProfileService
 */
export interface IProfileServiceClient {
    /**
     * Gets a user's profile.
     *
     * @generated from protobuf rpc: GetProfile(protocol.profile.v1.GetProfileRequest) returns (protocol.profile.v1.GetProfileResponse);
     */
    getProfile(input: GetProfileRequest, options?: RpcOptions): UnaryCall<GetProfileRequest, GetProfileResponse>;
    /**
     * Updates the user's profile.
     *
     * @generated from protobuf rpc: UpdateProfile(protocol.profile.v1.UpdateProfileRequest) returns (protocol.profile.v1.UpdateProfileResponse);
     */
    updateProfile(input: UpdateProfileRequest, options?: RpcOptions): UnaryCall<UpdateProfileRequest, UpdateProfileResponse>;
    /**
     * Updates the user's status.
     *
     * @generated from protobuf rpc: UpdateStatus(protocol.profile.v1.UpdateStatusRequest) returns (protocol.profile.v1.UpdateStatusResponse);
     */
    updateStatus(input: UpdateStatusRequest, options?: RpcOptions): UnaryCall<UpdateStatusRequest, UpdateStatusResponse>;
    /**
     * Gets app data for a user (this can be used to store user preferences which
     * is synchronized across devices).
     *
     * @generated from protobuf rpc: GetAppData(protocol.profile.v1.GetAppDataRequest) returns (protocol.profile.v1.GetAppDataResponse);
     */
    getAppData(input: GetAppDataRequest, options?: RpcOptions): UnaryCall<GetAppDataRequest, GetAppDataResponse>;
    /**
     * Sets the app data for a user.
     *
     * @generated from protobuf rpc: SetAppData(protocol.profile.v1.SetAppDataRequest) returns (protocol.profile.v1.SetAppDataResponse);
     */
    setAppData(input: SetAppDataRequest, options?: RpcOptions): UnaryCall<SetAppDataRequest, SetAppDataResponse>;
}
/**
 * Harmony's Profile service manages the profiles of the users.
 *
 * @generated from protobuf service protocol.profile.v1.ProfileService
 */
export class ProfileServiceClient implements IProfileServiceClient, ServiceInfo {
    typeName = ProfileService.typeName;
    methods = ProfileService.methods;
    options = ProfileService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Gets a user's profile.
     *
     * @generated from protobuf rpc: GetProfile(protocol.profile.v1.GetProfileRequest) returns (protocol.profile.v1.GetProfileResponse);
     */
    getProfile(input: GetProfileRequest, options?: RpcOptions): UnaryCall<GetProfileRequest, GetProfileResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetProfileRequest, GetProfileResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Updates the user's profile.
     *
     * @generated from protobuf rpc: UpdateProfile(protocol.profile.v1.UpdateProfileRequest) returns (protocol.profile.v1.UpdateProfileResponse);
     */
    updateProfile(input: UpdateProfileRequest, options?: RpcOptions): UnaryCall<UpdateProfileRequest, UpdateProfileResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateProfileRequest, UpdateProfileResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Updates the user's status.
     *
     * @generated from protobuf rpc: UpdateStatus(protocol.profile.v1.UpdateStatusRequest) returns (protocol.profile.v1.UpdateStatusResponse);
     */
    updateStatus(input: UpdateStatusRequest, options?: RpcOptions): UnaryCall<UpdateStatusRequest, UpdateStatusResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateStatusRequest, UpdateStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets app data for a user (this can be used to store user preferences which
     * is synchronized across devices).
     *
     * @generated from protobuf rpc: GetAppData(protocol.profile.v1.GetAppDataRequest) returns (protocol.profile.v1.GetAppDataResponse);
     */
    getAppData(input: GetAppDataRequest, options?: RpcOptions): UnaryCall<GetAppDataRequest, GetAppDataResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAppDataRequest, GetAppDataResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Sets the app data for a user.
     *
     * @generated from protobuf rpc: SetAppData(protocol.profile.v1.SetAppDataRequest) returns (protocol.profile.v1.SetAppDataResponse);
     */
    setAppData(input: SetAppDataRequest, options?: RpcOptions): UnaryCall<SetAppDataRequest, SetAppDataResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetAppDataRequest, SetAppDataResponse>("unary", this._transport, method, opt, input);
    }
}
