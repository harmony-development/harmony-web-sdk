// @generated by protobuf-ts 2.2.2 with parameter long_type_string,optimize_code_size,generate_dependencies,optimize_code_size
// @generated from protobuf file "webrtc/v1/webrtc.proto" (package "protocol.webrtc.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { WebRTCService } from "./webrtc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { WebRTCResponse } from "./webrtc";
import type { WebRTCRequest } from "./webrtc";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * The WebRTC Service manages WebRTC sessions between two or more parties.
 *
 * @generated from protobuf service protocol.webrtc.v1.WebRTCService
 */
export interface IWebRTCServiceClient {
    /**
     * WebRTC opens a stream
     *
     * @generated from protobuf rpc: WebRTC(stream protocol.webrtc.v1.WebRTCRequest) returns (stream protocol.webrtc.v1.WebRTCResponse);
     */
    webRTC(options?: RpcOptions): DuplexStreamingCall<WebRTCRequest, WebRTCResponse>;
}
/**
 * The WebRTC Service manages WebRTC sessions between two or more parties.
 *
 * @generated from protobuf service protocol.webrtc.v1.WebRTCService
 */
export class WebRTCServiceClient implements IWebRTCServiceClient, ServiceInfo {
    typeName = WebRTCService.typeName;
    methods = WebRTCService.methods;
    options = WebRTCService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * WebRTC opens a stream
     *
     * @generated from protobuf rpc: WebRTC(stream protocol.webrtc.v1.WebRTCRequest) returns (stream protocol.webrtc.v1.WebRTCResponse);
     */
    webRTC(options?: RpcOptions): DuplexStreamingCall<WebRTCRequest, WebRTCResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<WebRTCRequest, WebRTCResponse>("duplex", this._transport, method, opt);
    }
}
