// @generated by protobuf-ts 2.0.6 with parameter long_type_string,optimize_code_size,generate_dependencies,optimize_code_size
// @generated from protobuf file "mediaproxy/v1/mediaproxy.proto" (package "protocol.mediaproxy.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Object representing the metadata of a website.
 *
 * @generated from protobuf message protocol.mediaproxy.v1.SiteMetadata
 */
export interface SiteMetadata {
    /**
     * Title of the website.
     *
     * @generated from protobuf field: string site_title = 1;
     */
    siteTitle: string;
    /**
     * Page title of the website page.
     *
     * @generated from protobuf field: string page_title = 2;
     */
    pageTitle: string;
    /**
     * Kind of the website.
     *
     * @generated from protobuf field: string kind = 3;
     */
    kind: string;
    /**
     * Description of the website page.
     *
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * URL of the website.
     *
     * @generated from protobuf field: string url = 5;
     */
    url: string;
    /**
     * A thumbnail image of the website.
     *
     * @generated from protobuf field: string image = 6;
     */
    image: string;
}
/**
 * Object represeting the metadata of a media.
 *
 * @generated from protobuf message protocol.mediaproxy.v1.MediaMetadata
 */
export interface MediaMetadata {
    /**
     * Mimetype of the media.
     *
     * @generated from protobuf field: string mimetype = 1;
     */
    mimetype: string;
    /**
     * Filename of the media.
     *
     * @generated from protobuf field: string filename = 2;
     */
    filename: string;
}
/**
 * Used in the `FetchLinkMetadata` endpoint.
 *
 * @generated from protobuf message protocol.mediaproxy.v1.FetchLinkMetadataRequest
 */
export interface FetchLinkMetadataRequest {
    /**
     * URL to fetch metadata from.
     *
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * Used in the `FetchLinkMetadata` endpoint.
 *
 * @generated from protobuf message protocol.mediaproxy.v1.FetchLinkMetadataResponse
 */
export interface FetchLinkMetadataResponse {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "isSite";
        /**
         * Site metadata for the URL.
         *
         * @generated from protobuf field: protocol.mediaproxy.v1.SiteMetadata is_site = 1;
         */
        isSite: SiteMetadata;
    } | {
        oneofKind: "isMedia";
        /**
         * Media metadata for the URL.
         *
         * @generated from protobuf field: protocol.mediaproxy.v1.MediaMetadata is_media = 2;
         */
        isMedia: MediaMetadata;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Used in the `InstantView` endpoint.
 *
 * @generated from protobuf message protocol.mediaproxy.v1.InstantViewRequest
 */
export interface InstantViewRequest {
    /**
     * URL to get instant view for.
     *
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * Used in the `InstantView` endpoint.
 *
 * @generated from protobuf message protocol.mediaproxy.v1.InstantViewResponse
 */
export interface InstantViewResponse {
    /**
     * Site metadata for the URL.
     *
     * @generated from protobuf field: protocol.mediaproxy.v1.SiteMetadata metadata = 1;
     */
    metadata?: SiteMetadata;
    /**
     * Instant view content.
     *
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * Whether the instant view is valid.
     *
     * @generated from protobuf field: bool is_valid = 3;
     */
    isValid: boolean;
}
/**
 * Used in the `CanInstantView` endpoint.
 *
 * @generated from protobuf message protocol.mediaproxy.v1.CanInstantViewRequest
 */
export interface CanInstantViewRequest {
    /**
     * URL to query if server can instant view the website.
     *
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * Used in the `CanInstantView` endpoint.
 *
 * @generated from protobuf message protocol.mediaproxy.v1.CanInstantViewResponse
 */
export interface CanInstantViewResponse {
    /**
     * Whether the server generate an instant view for the URL queried.
     *
     * @generated from protobuf field: bool can_instant_view = 1;
     */
    canInstantView: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class SiteMetadata$Type extends MessageType<SiteMetadata> {
    constructor() {
        super("protocol.mediaproxy.v1.SiteMetadata", [
            { no: 1, name: "site_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "kind", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "image", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.mediaproxy.v1.SiteMetadata
 */
export const SiteMetadata = new SiteMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MediaMetadata$Type extends MessageType<MediaMetadata> {
    constructor() {
        super("protocol.mediaproxy.v1.MediaMetadata", [
            { no: 1, name: "mimetype", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "filename", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.mediaproxy.v1.MediaMetadata
 */
export const MediaMetadata = new MediaMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchLinkMetadataRequest$Type extends MessageType<FetchLinkMetadataRequest> {
    constructor() {
        super("protocol.mediaproxy.v1.FetchLinkMetadataRequest", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.mediaproxy.v1.FetchLinkMetadataRequest
 */
export const FetchLinkMetadataRequest = new FetchLinkMetadataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchLinkMetadataResponse$Type extends MessageType<FetchLinkMetadataResponse> {
    constructor() {
        super("protocol.mediaproxy.v1.FetchLinkMetadataResponse", [
            { no: 1, name: "is_site", kind: "message", oneof: "data", T: () => SiteMetadata },
            { no: 2, name: "is_media", kind: "message", oneof: "data", T: () => MediaMetadata }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.mediaproxy.v1.FetchLinkMetadataResponse
 */
export const FetchLinkMetadataResponse = new FetchLinkMetadataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstantViewRequest$Type extends MessageType<InstantViewRequest> {
    constructor() {
        super("protocol.mediaproxy.v1.InstantViewRequest", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.mediaproxy.v1.InstantViewRequest
 */
export const InstantViewRequest = new InstantViewRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstantViewResponse$Type extends MessageType<InstantViewResponse> {
    constructor() {
        super("protocol.mediaproxy.v1.InstantViewResponse", [
            { no: 1, name: "metadata", kind: "message", T: () => SiteMetadata },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_valid", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.mediaproxy.v1.InstantViewResponse
 */
export const InstantViewResponse = new InstantViewResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CanInstantViewRequest$Type extends MessageType<CanInstantViewRequest> {
    constructor() {
        super("protocol.mediaproxy.v1.CanInstantViewRequest", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.mediaproxy.v1.CanInstantViewRequest
 */
export const CanInstantViewRequest = new CanInstantViewRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CanInstantViewResponse$Type extends MessageType<CanInstantViewResponse> {
    constructor() {
        super("protocol.mediaproxy.v1.CanInstantViewResponse", [
            { no: 1, name: "can_instant_view", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message protocol.mediaproxy.v1.CanInstantViewResponse
 */
export const CanInstantViewResponse = new CanInstantViewResponse$Type();
/**
 * @generated ServiceType for protobuf service protocol.mediaproxy.v1.MediaProxyService
 */
export const MediaProxyService = new ServiceType("protocol.mediaproxy.v1.MediaProxyService", [
    { name: "FetchLinkMetadata", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: FetchLinkMetadataRequest, O: FetchLinkMetadataResponse },
    { name: "InstantView", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: InstantViewRequest, O: InstantViewResponse },
    { name: "CanInstantView", options: { "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true } }, I: CanInstantViewRequest, O: CanInstantViewResponse }
]);
