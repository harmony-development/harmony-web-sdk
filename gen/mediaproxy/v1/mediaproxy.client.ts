// @generated by protobuf-ts 2.2.2 with parameter long_type_string,optimize_code_size,generate_dependencies,optimize_code_size
// @generated from protobuf file "mediaproxy/v1/mediaproxy.proto" (package "protocol.mediaproxy.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MediaProxyService } from "./mediaproxy";
import type { CanInstantViewResponse } from "./mediaproxy";
import type { CanInstantViewRequest } from "./mediaproxy";
import type { InstantViewResponse } from "./mediaproxy";
import type { InstantViewRequest } from "./mediaproxy";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { FetchLinkMetadataResponse } from "./mediaproxy";
import type { FetchLinkMetadataRequest } from "./mediaproxy";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Harmony service for fetching metadata and generating instant view for URLs.
 *
 * @generated from protobuf service protocol.mediaproxy.v1.MediaProxyService
 */
export interface IMediaProxyServiceClient {
    /**
     * Endpoint to fetch metadata for a URL.
     *
     * @generated from protobuf rpc: FetchLinkMetadata(protocol.mediaproxy.v1.FetchLinkMetadataRequest) returns (protocol.mediaproxy.v1.FetchLinkMetadataResponse);
     */
    fetchLinkMetadata(input: FetchLinkMetadataRequest, options?: RpcOptions): UnaryCall<FetchLinkMetadataRequest, FetchLinkMetadataResponse>;
    /**
     * Endpoint to instant view a website URL.
     *
     * @generated from protobuf rpc: InstantView(protocol.mediaproxy.v1.InstantViewRequest) returns (protocol.mediaproxy.v1.InstantViewResponse);
     */
    instantView(input: InstantViewRequest, options?: RpcOptions): UnaryCall<InstantViewRequest, InstantViewResponse>;
    /**
     * Endpoint to query if the server can generate an instant view for a website URL.
     *
     * @generated from protobuf rpc: CanInstantView(protocol.mediaproxy.v1.CanInstantViewRequest) returns (protocol.mediaproxy.v1.CanInstantViewResponse);
     */
    canInstantView(input: CanInstantViewRequest, options?: RpcOptions): UnaryCall<CanInstantViewRequest, CanInstantViewResponse>;
}
/**
 * Harmony service for fetching metadata and generating instant view for URLs.
 *
 * @generated from protobuf service protocol.mediaproxy.v1.MediaProxyService
 */
export class MediaProxyServiceClient implements IMediaProxyServiceClient, ServiceInfo {
    typeName = MediaProxyService.typeName;
    methods = MediaProxyService.methods;
    options = MediaProxyService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Endpoint to fetch metadata for a URL.
     *
     * @generated from protobuf rpc: FetchLinkMetadata(protocol.mediaproxy.v1.FetchLinkMetadataRequest) returns (protocol.mediaproxy.v1.FetchLinkMetadataResponse);
     */
    fetchLinkMetadata(input: FetchLinkMetadataRequest, options?: RpcOptions): UnaryCall<FetchLinkMetadataRequest, FetchLinkMetadataResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<FetchLinkMetadataRequest, FetchLinkMetadataResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Endpoint to instant view a website URL.
     *
     * @generated from protobuf rpc: InstantView(protocol.mediaproxy.v1.InstantViewRequest) returns (protocol.mediaproxy.v1.InstantViewResponse);
     */
    instantView(input: InstantViewRequest, options?: RpcOptions): UnaryCall<InstantViewRequest, InstantViewResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<InstantViewRequest, InstantViewResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Endpoint to query if the server can generate an instant view for a website URL.
     *
     * @generated from protobuf rpc: CanInstantView(protocol.mediaproxy.v1.CanInstantViewRequest) returns (protocol.mediaproxy.v1.CanInstantViewResponse);
     */
    canInstantView(input: CanInstantViewRequest, options?: RpcOptions): UnaryCall<CanInstantViewRequest, CanInstantViewResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CanInstantViewRequest, CanInstantViewResponse>("unary", this._transport, method, opt, input);
    }
}
