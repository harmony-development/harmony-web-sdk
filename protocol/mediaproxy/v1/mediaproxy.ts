// @generated by protobuf-ts 1.0.12 with parameters long_type_string,optimize_code_size,generate_dependencies
// @generated from protobuf file "mediaproxy/v1/mediaproxy.proto" (package "protocol.mediaproxy.v1", syntax proto3)
// tslint:disable
import { RpcTransport } from "@protobuf-ts/runtime-rpc";
import { MethodInfo } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf message protocol.mediaproxy.v1.SiteMetadata
 */
export interface SiteMetadata {
  /**
   * @generated from protobuf field: string site_title = 1;
   */
  siteTitle: string;
  /**
   * @generated from protobuf field: string page_title = 2;
   */
  pageTitle: string;
  /**
   * @generated from protobuf field: string kind = 3;
   */
  kind: string;
  /**
   * @generated from protobuf field: string description = 4;
   */
  description: string;
  /**
   * @generated from protobuf field: string url = 5;
   */
  url: string;
  /**
   * @generated from protobuf field: string image = 6;
   */
  image: string;
}
/**
 * @generated from protobuf message protocol.mediaproxy.v1.MediaMetadata
 */
export interface MediaMetadata {
  /**
   * @generated from protobuf field: string mimetype = 1;
   */
  mimetype: string;
  /**
   * @generated from protobuf field: string filename = 2;
   */
  filename: string;
}
/**
 * @generated from protobuf message protocol.mediaproxy.v1.FetchLinkMetadataRequest
 */
export interface FetchLinkMetadataRequest {
  /**
   * @generated from protobuf field: string url = 1;
   */
  url: string;
}
/**
 * @generated from protobuf message protocol.mediaproxy.v1.FetchLinkMetadataResponse
 */
export interface FetchLinkMetadataResponse {
  /**
   * @generated from protobuf oneof: data
   */
  data:
    | {
        oneofKind: "isSite";
        /**
         * @generated from protobuf field: protocol.mediaproxy.v1.SiteMetadata is_site = 1;
         */
        isSite: SiteMetadata;
      }
    | {
        oneofKind: "isMedia";
        /**
         * @generated from protobuf field: protocol.mediaproxy.v1.MediaMetadata is_media = 2;
         */
        isMedia: MediaMetadata;
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * @generated from protobuf message protocol.mediaproxy.v1.InstantViewRequest
 */
export interface InstantViewRequest {
  /**
   * @generated from protobuf field: string url = 1;
   */
  url: string;
}
/**
 * @generated from protobuf message protocol.mediaproxy.v1.InstantViewResponse
 */
export interface InstantViewResponse {
  /**
   * @generated from protobuf field: protocol.mediaproxy.v1.SiteMetadata metadata = 1;
   */
  metadata?: SiteMetadata;
  /**
   * @generated from protobuf field: string content = 2;
   */
  content: string;
  /**
   * @generated from protobuf field: bool is_valid = 3;
   */
  isValid: boolean;
}
/**
 * @generated from protobuf message protocol.mediaproxy.v1.CanInstantViewResponse
 */
export interface CanInstantViewResponse {
  /**
   * @generated from protobuf field: bool can_instant_view = 1;
   */
  canInstantView: boolean;
}
/**
 * @generated from protobuf service protocol.mediaproxy.v1.MediaProxyService
 */
export interface IMediaProxyServiceClient {
  /**
   * @generated from protobuf rpc: FetchLinkMetadata(protocol.mediaproxy.v1.FetchLinkMetadataRequest) returns (protocol.mediaproxy.v1.FetchLinkMetadataResponse);
   */
  fetchLinkMetadata(
    input: FetchLinkMetadataRequest,
    options?: RpcOptions
  ): UnaryCall<FetchLinkMetadataRequest, FetchLinkMetadataResponse>;
  /**
   * @generated from protobuf rpc: InstantView(protocol.mediaproxy.v1.InstantViewRequest) returns (protocol.mediaproxy.v1.InstantViewResponse);
   */
  instantView(
    input: InstantViewRequest,
    options?: RpcOptions
  ): UnaryCall<InstantViewRequest, InstantViewResponse>;
  /**
   * @generated from protobuf rpc: CanInstantView(protocol.mediaproxy.v1.InstantViewRequest) returns (protocol.mediaproxy.v1.CanInstantViewResponse);
   */
  canInstantView(
    input: InstantViewRequest,
    options?: RpcOptions
  ): UnaryCall<InstantViewRequest, CanInstantViewResponse>;
}
/**
 * Type for protobuf message protocol.mediaproxy.v1.SiteMetadata
 */
class SiteMetadata$Type extends MessageType<SiteMetadata> {
  constructor() {
    super("protocol.mediaproxy.v1.SiteMetadata", [
      { no: 1, name: "site_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "page_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: "kind", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 4,
        name: "description",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 5, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 6, name: "image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
}
export const SiteMetadata = new SiteMetadata$Type();
/**
 * Type for protobuf message protocol.mediaproxy.v1.MediaMetadata
 */
class MediaMetadata$Type extends MessageType<MediaMetadata> {
  constructor() {
    super("protocol.mediaproxy.v1.MediaMetadata", [
      { no: 1, name: "mimetype", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "filename", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
}
export const MediaMetadata = new MediaMetadata$Type();
/**
 * Type for protobuf message protocol.mediaproxy.v1.FetchLinkMetadataRequest
 */
class FetchLinkMetadataRequest$Type extends MessageType<FetchLinkMetadataRequest> {
  constructor() {
    super("protocol.mediaproxy.v1.FetchLinkMetadataRequest", [
      { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
}
export const FetchLinkMetadataRequest = new FetchLinkMetadataRequest$Type();
/**
 * Type for protobuf message protocol.mediaproxy.v1.FetchLinkMetadataResponse
 */
class FetchLinkMetadataResponse$Type extends MessageType<FetchLinkMetadataResponse> {
  constructor() {
    super("protocol.mediaproxy.v1.FetchLinkMetadataResponse", [
      {
        no: 1,
        name: "is_site",
        kind: "message",
        oneof: "data",
        T: () => SiteMetadata,
      },
      {
        no: 2,
        name: "is_media",
        kind: "message",
        oneof: "data",
        T: () => MediaMetadata,
      },
    ]);
  }
}
export const FetchLinkMetadataResponse = new FetchLinkMetadataResponse$Type();
/**
 * Type for protobuf message protocol.mediaproxy.v1.InstantViewRequest
 */
class InstantViewRequest$Type extends MessageType<InstantViewRequest> {
  constructor() {
    super("protocol.mediaproxy.v1.InstantViewRequest", [
      { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
}
export const InstantViewRequest = new InstantViewRequest$Type();
/**
 * Type for protobuf message protocol.mediaproxy.v1.InstantViewResponse
 */
class InstantViewResponse$Type extends MessageType<InstantViewResponse> {
  constructor() {
    super("protocol.mediaproxy.v1.InstantViewResponse", [
      { no: 1, name: "metadata", kind: "message", T: () => SiteMetadata },
      { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: "is_valid", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
    ]);
  }
}
export const InstantViewResponse = new InstantViewResponse$Type();
/**
 * Type for protobuf message protocol.mediaproxy.v1.CanInstantViewResponse
 */
class CanInstantViewResponse$Type extends MessageType<CanInstantViewResponse> {
  constructor() {
    super("protocol.mediaproxy.v1.CanInstantViewResponse", [
      {
        no: 1,
        name: "can_instant_view",
        kind: "scalar",
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
}
export const CanInstantViewResponse = new CanInstantViewResponse$Type();
/**
 * @generated from protobuf service protocol.mediaproxy.v1.MediaProxyService
 */
export class MediaProxyServiceClient implements IMediaProxyServiceClient {
  readonly typeName = "protocol.mediaproxy.v1.MediaProxyService";
  readonly methods: MethodInfo[] = [
    {
      service: this,
      name: "FetchLinkMetadata",
      localName: "fetchLinkMetadata",
      I: FetchLinkMetadataRequest,
      O: FetchLinkMetadataResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "InstantView",
      localName: "instantView",
      I: InstantViewRequest,
      O: InstantViewResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "CanInstantView",
      localName: "canInstantView",
      I: InstantViewRequest,
      O: CanInstantViewResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
  ];
  constructor(private readonly _transport: RpcTransport) {}
  fetchLinkMetadata(
    input: FetchLinkMetadataRequest,
    options?: RpcOptions
  ): UnaryCall<FetchLinkMetadataRequest, FetchLinkMetadataResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<FetchLinkMetadataRequest, FetchLinkMetadataResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  instantView(
    input: InstantViewRequest,
    options?: RpcOptions
  ): UnaryCall<InstantViewRequest, InstantViewResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<InstantViewRequest, InstantViewResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  canInstantView(
    input: InstantViewRequest,
    options?: RpcOptions
  ): UnaryCall<InstantViewRequest, CanInstantViewResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<InstantViewRequest, CanInstantViewResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
}
