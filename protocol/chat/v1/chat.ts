// @generated by protobuf-ts 1.0.12 with parameters long_type_string,optimize_code_size,generate_dependencies
// @generated from protobuf file "chat/v1/chat.proto" (package "protocol.chat.v1", syntax proto3)
// tslint:disable
import { RpcTransport } from "@protobuf-ts/runtime-rpc";
import { MethodInfo } from "@protobuf-ts/runtime-rpc";
import { UnbanUserRequest } from "./guilds";
import { KickUserRequest } from "./guilds";
import { BanUserRequest } from "./guilds";
import { PreviewGuildResponse } from "./guilds";
import { PreviewGuildRequest } from "./guilds";
import { TypingRequest } from "./channels";
import { ProfileUpdateRequest } from "./profile";
import { GetUserMetadataResponse } from "./profile";
import { GetUserMetadataRequest } from "./profile";
import { GetUserBulkResponse } from "./profile";
import { GetUserBulkRequest } from "./profile";
import { GetUserResponse } from "./profile";
import { GetUserRequest } from "./profile";
import { Event } from "./streaming";
import { StreamEventsRequest } from "./streaming";
import { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import { GetUserRolesResponse } from "./permissions";
import { GetUserRolesRequest } from "./permissions";
import { ManageUserRolesRequest } from "./permissions";
import { DeleteGuildRoleRequest } from "./permissions";
import { ModifyGuildRoleRequest } from "./permissions";
import { AddGuildRoleResponse } from "./permissions";
import { AddGuildRoleRequest } from "./permissions";
import { GetGuildRolesResponse } from "./permissions";
import { GetGuildRolesRequest } from "./permissions";
import { MoveRoleResponse } from "./permissions";
import { MoveRoleRequest } from "./permissions";
import { GetPermissionsResponse } from "./permissions";
import { GetPermissionsRequest } from "./permissions";
import { SetPermissionsRequest } from "./permissions";
import { QueryPermissionsResponse } from "./permissions";
import { QueryPermissionsRequest } from "./permissions";
import { SendMessageResponse } from "./messages";
import { SendMessageRequest } from "./messages";
import { TriggerActionRequest } from "./messages";
import { LeaveGuildRequest } from "./guilds";
import { JoinGuildResponse } from "./guilds";
import { JoinGuildRequest } from "./guilds";
import { DequipEmotePackRequest } from "./emotes";
import { DeleteEmotePackRequest } from "./emotes";
import { DeleteEmoteFromPackRequest } from "./emotes";
import { DeleteMessageRequest } from "./messages";
import { DeleteChannelRequest } from "./channels";
import { DeleteInviteRequest } from "./guilds";
import { DeleteGuildRequest } from "./guilds";
import { AddEmoteToPackRequest } from "./emotes";
import { UpdateMessageTextRequest } from "./messages";
import { UpdateChannelOrderRequest } from "./channels";
import { UpdateChannelInformationRequest } from "./channels";
import { Empty } from "../../google/protobuf/empty";
import { UpdateGuildInformationRequest } from "./guilds";
import { GetEmotePackEmotesResponse } from "./emotes";
import { GetEmotePackEmotesRequest } from "./emotes";
import { GetEmotePacksResponse } from "./emotes";
import { GetEmotePacksRequest } from "./emotes";
import { GetMessageResponse } from "./messages";
import { GetMessageRequest } from "./messages";
import { GetChannelMessagesResponse } from "./messages";
import { GetChannelMessagesRequest } from "./messages";
import { GetGuildChannelsResponse } from "./channels";
import { GetGuildChannelsRequest } from "./channels";
import { GetGuildMembersResponse } from "./guilds";
import { GetGuildMembersRequest } from "./guilds";
import { GetGuildInvitesResponse } from "./guilds";
import { GetGuildInvitesRequest } from "./guilds";
import { GetGuildResponse } from "./guilds";
import { GetGuildRequest } from "./guilds";
import { RemoveGuildFromGuildListResponse } from "./guilds";
import { RemoveGuildFromGuildListRequest } from "./guilds";
import { AddGuildToGuildListResponse } from "./guilds";
import { AddGuildToGuildListRequest } from "./guilds";
import { GetGuildListResponse } from "./guilds";
import { GetGuildListRequest } from "./guilds";
import { CreateEmotePackResponse } from "./emotes";
import { CreateEmotePackRequest } from "./emotes";
import { CreateChannelResponse } from "./channels";
import { CreateChannelRequest } from "./channels";
import { CreateInviteResponse } from "./guilds";
import { CreateInviteRequest } from "./guilds";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import { CreateGuildResponse } from "./guilds";
import { CreateGuildRequest } from "./guilds";
import { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service protocol.chat.v1.ChatService
 */
export interface IChatServiceClient {
  /**
   * @generated from protobuf rpc: CreateGuild(protocol.chat.v1.CreateGuildRequest) returns (protocol.chat.v1.CreateGuildResponse);
   */
  createGuild(
    input: CreateGuildRequest,
    options?: RpcOptions
  ): UnaryCall<CreateGuildRequest, CreateGuildResponse>;
  /**
   * @generated from protobuf rpc: CreateInvite(protocol.chat.v1.CreateInviteRequest) returns (protocol.chat.v1.CreateInviteResponse);
   */
  createInvite(
    input: CreateInviteRequest,
    options?: RpcOptions
  ): UnaryCall<CreateInviteRequest, CreateInviteResponse>;
  /**
   * @generated from protobuf rpc: CreateChannel(protocol.chat.v1.CreateChannelRequest) returns (protocol.chat.v1.CreateChannelResponse);
   */
  createChannel(
    input: CreateChannelRequest,
    options?: RpcOptions
  ): UnaryCall<CreateChannelRequest, CreateChannelResponse>;
  /**
   * @generated from protobuf rpc: CreateEmotePack(protocol.chat.v1.CreateEmotePackRequest) returns (protocol.chat.v1.CreateEmotePackResponse);
   */
  createEmotePack(
    input: CreateEmotePackRequest,
    options?: RpcOptions
  ): UnaryCall<CreateEmotePackRequest, CreateEmotePackResponse>;
  /**
   * @generated from protobuf rpc: GetGuildList(protocol.chat.v1.GetGuildListRequest) returns (protocol.chat.v1.GetGuildListResponse);
   */
  getGuildList(
    input: GetGuildListRequest,
    options?: RpcOptions
  ): UnaryCall<GetGuildListRequest, GetGuildListResponse>;
  /**
   * @generated from protobuf rpc: AddGuildToGuildList(protocol.chat.v1.AddGuildToGuildListRequest) returns (protocol.chat.v1.AddGuildToGuildListResponse);
   */
  addGuildToGuildList(
    input: AddGuildToGuildListRequest,
    options?: RpcOptions
  ): UnaryCall<AddGuildToGuildListRequest, AddGuildToGuildListResponse>;
  /**
   * @generated from protobuf rpc: RemoveGuildFromGuildList(protocol.chat.v1.RemoveGuildFromGuildListRequest) returns (protocol.chat.v1.RemoveGuildFromGuildListResponse);
   */
  removeGuildFromGuildList(
    input: RemoveGuildFromGuildListRequest,
    options?: RpcOptions
  ): UnaryCall<
    RemoveGuildFromGuildListRequest,
    RemoveGuildFromGuildListResponse
  >;
  /**
   * @generated from protobuf rpc: GetGuild(protocol.chat.v1.GetGuildRequest) returns (protocol.chat.v1.GetGuildResponse);
   */
  getGuild(
    input: GetGuildRequest,
    options?: RpcOptions
  ): UnaryCall<GetGuildRequest, GetGuildResponse>;
  /**
   * This requires the "invites.view" permission.
   *
   * @generated from protobuf rpc: GetGuildInvites(protocol.chat.v1.GetGuildInvitesRequest) returns (protocol.chat.v1.GetGuildInvitesResponse);
   */
  getGuildInvites(
    input: GetGuildInvitesRequest,
    options?: RpcOptions
  ): UnaryCall<GetGuildInvitesRequest, GetGuildInvitesResponse>;
  /**
   * @generated from protobuf rpc: GetGuildMembers(protocol.chat.v1.GetGuildMembersRequest) returns (protocol.chat.v1.GetGuildMembersResponse);
   */
  getGuildMembers(
    input: GetGuildMembersRequest,
    options?: RpcOptions
  ): UnaryCall<GetGuildMembersRequest, GetGuildMembersResponse>;
  /**
   * You will only be informed of channels you have the "messages.view"
   * permission for.
   *
   * @generated from protobuf rpc: GetGuildChannels(protocol.chat.v1.GetGuildChannelsRequest) returns (protocol.chat.v1.GetGuildChannelsResponse);
   */
  getGuildChannels(
    input: GetGuildChannelsRequest,
    options?: RpcOptions
  ): UnaryCall<GetGuildChannelsRequest, GetGuildChannelsResponse>;
  /**
   * @generated from protobuf rpc: GetChannelMessages(protocol.chat.v1.GetChannelMessagesRequest) returns (protocol.chat.v1.GetChannelMessagesResponse);
   */
  getChannelMessages(
    input: GetChannelMessagesRequest,
    options?: RpcOptions
  ): UnaryCall<GetChannelMessagesRequest, GetChannelMessagesResponse>;
  /**
   * @generated from protobuf rpc: GetMessage(protocol.chat.v1.GetMessageRequest) returns (protocol.chat.v1.GetMessageResponse);
   */
  getMessage(
    input: GetMessageRequest,
    options?: RpcOptions
  ): UnaryCall<GetMessageRequest, GetMessageResponse>;
  /**
   * @generated from protobuf rpc: GetEmotePacks(protocol.chat.v1.GetEmotePacksRequest) returns (protocol.chat.v1.GetEmotePacksResponse);
   */
  getEmotePacks(
    input: GetEmotePacksRequest,
    options?: RpcOptions
  ): UnaryCall<GetEmotePacksRequest, GetEmotePacksResponse>;
  /**
   * @generated from protobuf rpc: GetEmotePackEmotes(protocol.chat.v1.GetEmotePackEmotesRequest) returns (protocol.chat.v1.GetEmotePackEmotesResponse);
   */
  getEmotePackEmotes(
    input: GetEmotePackEmotesRequest,
    options?: RpcOptions
  ): UnaryCall<GetEmotePackEmotesRequest, GetEmotePackEmotesResponse>;
  /**
   * @generated from protobuf rpc: UpdateGuildInformation(protocol.chat.v1.UpdateGuildInformationRequest) returns (google.protobuf.Empty);
   */
  updateGuildInformation(
    input: UpdateGuildInformationRequest,
    options?: RpcOptions
  ): UnaryCall<UpdateGuildInformationRequest, Empty>;
  /**
   * @generated from protobuf rpc: UpdateChannelInformation(protocol.chat.v1.UpdateChannelInformationRequest) returns (google.protobuf.Empty);
   */
  updateChannelInformation(
    input: UpdateChannelInformationRequest,
    options?: RpcOptions
  ): UnaryCall<UpdateChannelInformationRequest, Empty>;
  /**
   * @generated from protobuf rpc: UpdateChannelOrder(protocol.chat.v1.UpdateChannelOrderRequest) returns (google.protobuf.Empty);
   */
  updateChannelOrder(
    input: UpdateChannelOrderRequest,
    options?: RpcOptions
  ): UnaryCall<UpdateChannelOrderRequest, Empty>;
  /**
   * @generated from protobuf rpc: UpdateMessageText(protocol.chat.v1.UpdateMessageTextRequest) returns (google.protobuf.Empty);
   */
  updateMessageText(
    input: UpdateMessageTextRequest,
    options?: RpcOptions
  ): UnaryCall<UpdateMessageTextRequest, Empty>;
  /**
   * @generated from protobuf rpc: AddEmoteToPack(protocol.chat.v1.AddEmoteToPackRequest) returns (google.protobuf.Empty);
   */
  addEmoteToPack(
    input: AddEmoteToPackRequest,
    options?: RpcOptions
  ): UnaryCall<AddEmoteToPackRequest, Empty>;
  /**
   * @generated from protobuf rpc: DeleteGuild(protocol.chat.v1.DeleteGuildRequest) returns (google.protobuf.Empty);
   */
  deleteGuild(
    input: DeleteGuildRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteGuildRequest, Empty>;
  /**
   * @generated from protobuf rpc: DeleteInvite(protocol.chat.v1.DeleteInviteRequest) returns (google.protobuf.Empty);
   */
  deleteInvite(
    input: DeleteInviteRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteInviteRequest, Empty>;
  /**
   * @generated from protobuf rpc: DeleteChannel(protocol.chat.v1.DeleteChannelRequest) returns (google.protobuf.Empty);
   */
  deleteChannel(
    input: DeleteChannelRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteChannelRequest, Empty>;
  /**
   * This requires the "messages.manage.delete" permission if you are not the
   * message author.
   *
   * @generated from protobuf rpc: DeleteMessage(protocol.chat.v1.DeleteMessageRequest) returns (google.protobuf.Empty);
   */
  deleteMessage(
    input: DeleteMessageRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteMessageRequest, Empty>;
  /**
   * @generated from protobuf rpc: DeleteEmoteFromPack(protocol.chat.v1.DeleteEmoteFromPackRequest) returns (google.protobuf.Empty);
   */
  deleteEmoteFromPack(
    input: DeleteEmoteFromPackRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteEmoteFromPackRequest, Empty>;
  /**
   * @generated from protobuf rpc: DeleteEmotePack(protocol.chat.v1.DeleteEmotePackRequest) returns (google.protobuf.Empty);
   */
  deleteEmotePack(
    input: DeleteEmotePackRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteEmotePackRequest, Empty>;
  /**
   * @generated from protobuf rpc: DequipEmotePack(protocol.chat.v1.DequipEmotePackRequest) returns (google.protobuf.Empty);
   */
  dequipEmotePack(
    input: DequipEmotePackRequest,
    options?: RpcOptions
  ): UnaryCall<DequipEmotePackRequest, Empty>;
  /**
   * @generated from protobuf rpc: JoinGuild(protocol.chat.v1.JoinGuildRequest) returns (protocol.chat.v1.JoinGuildResponse);
   */
  joinGuild(
    input: JoinGuildRequest,
    options?: RpcOptions
  ): UnaryCall<JoinGuildRequest, JoinGuildResponse>;
  /**
   * @generated from protobuf rpc: LeaveGuild(protocol.chat.v1.LeaveGuildRequest) returns (google.protobuf.Empty);
   */
  leaveGuild(
    input: LeaveGuildRequest,
    options?: RpcOptions
  ): UnaryCall<LeaveGuildRequest, Empty>;
  /**
   * @generated from protobuf rpc: TriggerAction(protocol.chat.v1.TriggerActionRequest) returns (google.protobuf.Empty);
   */
  triggerAction(
    input: TriggerActionRequest,
    options?: RpcOptions
  ): UnaryCall<TriggerActionRequest, Empty>;
  /**
   * @generated from protobuf rpc: SendMessage(protocol.chat.v1.SendMessageRequest) returns (protocol.chat.v1.SendMessageResponse);
   */
  sendMessage(
    input: SendMessageRequest,
    options?: RpcOptions
  ): UnaryCall<SendMessageRequest, SendMessageResponse>;
  /**
   * @generated from protobuf rpc: QueryHasPermission(protocol.chat.v1.QueryPermissionsRequest) returns (protocol.chat.v1.QueryPermissionsResponse);
   */
  queryHasPermission(
    input: QueryPermissionsRequest,
    options?: RpcOptions
  ): UnaryCall<QueryPermissionsRequest, QueryPermissionsResponse>;
  /**
   * @generated from protobuf rpc: SetPermissions(protocol.chat.v1.SetPermissionsRequest) returns (google.protobuf.Empty);
   */
  setPermissions(
    input: SetPermissionsRequest,
    options?: RpcOptions
  ): UnaryCall<SetPermissionsRequest, Empty>;
  /**
   * @generated from protobuf rpc: GetPermissions(protocol.chat.v1.GetPermissionsRequest) returns (protocol.chat.v1.GetPermissionsResponse);
   */
  getPermissions(
    input: GetPermissionsRequest,
    options?: RpcOptions
  ): UnaryCall<GetPermissionsRequest, GetPermissionsResponse>;
  /**
   * @generated from protobuf rpc: MoveRole(protocol.chat.v1.MoveRoleRequest) returns (protocol.chat.v1.MoveRoleResponse);
   */
  moveRole(
    input: MoveRoleRequest,
    options?: RpcOptions
  ): UnaryCall<MoveRoleRequest, MoveRoleResponse>;
  /**
   * @generated from protobuf rpc: GetGuildRoles(protocol.chat.v1.GetGuildRolesRequest) returns (protocol.chat.v1.GetGuildRolesResponse);
   */
  getGuildRoles(
    input: GetGuildRolesRequest,
    options?: RpcOptions
  ): UnaryCall<GetGuildRolesRequest, GetGuildRolesResponse>;
  /**
   * @generated from protobuf rpc: AddGuildRole(protocol.chat.v1.AddGuildRoleRequest) returns (protocol.chat.v1.AddGuildRoleResponse);
   */
  addGuildRole(
    input: AddGuildRoleRequest,
    options?: RpcOptions
  ): UnaryCall<AddGuildRoleRequest, AddGuildRoleResponse>;
  /**
   * @generated from protobuf rpc: ModifyGuildRole(protocol.chat.v1.ModifyGuildRoleRequest) returns (google.protobuf.Empty);
   */
  modifyGuildRole(
    input: ModifyGuildRoleRequest,
    options?: RpcOptions
  ): UnaryCall<ModifyGuildRoleRequest, Empty>;
  /**
   * @generated from protobuf rpc: DeleteGuildRole(protocol.chat.v1.DeleteGuildRoleRequest) returns (google.protobuf.Empty);
   */
  deleteGuildRole(
    input: DeleteGuildRoleRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteGuildRoleRequest, Empty>;
  /**
   * @generated from protobuf rpc: ManageUserRoles(protocol.chat.v1.ManageUserRolesRequest) returns (google.protobuf.Empty);
   */
  manageUserRoles(
    input: ManageUserRolesRequest,
    options?: RpcOptions
  ): UnaryCall<ManageUserRolesRequest, Empty>;
  /**
   * @generated from protobuf rpc: GetUserRoles(protocol.chat.v1.GetUserRolesRequest) returns (protocol.chat.v1.GetUserRolesResponse);
   */
  getUserRoles(
    input: GetUserRolesRequest,
    options?: RpcOptions
  ): UnaryCall<GetUserRolesRequest, GetUserRolesResponse>;
  /**
   * @generated from protobuf rpc: StreamEvents(stream protocol.chat.v1.StreamEventsRequest) returns (stream protocol.chat.v1.Event);
   */
  streamEvents(
    options?: RpcOptions
  ): DuplexStreamingCall<StreamEventsRequest, Event>;
  /**
   * @generated from protobuf rpc: GetUser(protocol.chat.v1.GetUserRequest) returns (protocol.chat.v1.GetUserResponse);
   */
  getUser(
    input: GetUserRequest,
    options?: RpcOptions
  ): UnaryCall<GetUserRequest, GetUserResponse>;
  /**
   * @generated from protobuf rpc: GetUserBulk(protocol.chat.v1.GetUserBulkRequest) returns (protocol.chat.v1.GetUserBulkResponse);
   */
  getUserBulk(
    input: GetUserBulkRequest,
    options?: RpcOptions
  ): UnaryCall<GetUserBulkRequest, GetUserBulkResponse>;
  /**
   * @generated from protobuf rpc: GetUserMetadata(protocol.chat.v1.GetUserMetadataRequest) returns (protocol.chat.v1.GetUserMetadataResponse);
   */
  getUserMetadata(
    input: GetUserMetadataRequest,
    options?: RpcOptions
  ): UnaryCall<GetUserMetadataRequest, GetUserMetadataResponse>;
  /**
   * @generated from protobuf rpc: ProfileUpdate(protocol.chat.v1.ProfileUpdateRequest) returns (google.protobuf.Empty);
   */
  profileUpdate(
    input: ProfileUpdateRequest,
    options?: RpcOptions
  ): UnaryCall<ProfileUpdateRequest, Empty>;
  /**
   * @generated from protobuf rpc: Typing(protocol.chat.v1.TypingRequest) returns (google.protobuf.Empty);
   */
  typing(
    input: TypingRequest,
    options?: RpcOptions
  ): UnaryCall<TypingRequest, Empty>;
  /**
   * @generated from protobuf rpc: PreviewGuild(protocol.chat.v1.PreviewGuildRequest) returns (protocol.chat.v1.PreviewGuildResponse);
   */
  previewGuild(
    input: PreviewGuildRequest,
    options?: RpcOptions
  ): UnaryCall<PreviewGuildRequest, PreviewGuildResponse>;
  /**
   * @generated from protobuf rpc: BanUser(protocol.chat.v1.BanUserRequest) returns (google.protobuf.Empty);
   */
  banUser(
    input: BanUserRequest,
    options?: RpcOptions
  ): UnaryCall<BanUserRequest, Empty>;
  /**
   * @generated from protobuf rpc: KickUser(protocol.chat.v1.KickUserRequest) returns (google.protobuf.Empty);
   */
  kickUser(
    input: KickUserRequest,
    options?: RpcOptions
  ): UnaryCall<KickUserRequest, Empty>;
  /**
   * @generated from protobuf rpc: UnbanUser(protocol.chat.v1.UnbanUserRequest) returns (google.protobuf.Empty);
   */
  unbanUser(
    input: UnbanUserRequest,
    options?: RpcOptions
  ): UnaryCall<UnbanUserRequest, Empty>;
}
/**
 * @generated from protobuf service protocol.chat.v1.ChatService
 */
export class ChatServiceClient implements IChatServiceClient {
  readonly typeName = "protocol.chat.v1.ChatService";
  readonly methods: MethodInfo[] = [
    {
      service: this,
      name: "CreateGuild",
      localName: "createGuild",
      I: CreateGuildRequest,
      O: CreateGuildResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "CreateInvite",
      localName: "createInvite",
      I: CreateInviteRequest,
      O: CreateInviteResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "invites.manage.create",
        },
      },
    },
    {
      service: this,
      name: "CreateChannel",
      localName: "createChannel",
      I: CreateChannelRequest,
      O: CreateChannelResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "channels.manage.create",
        },
      },
    },
    {
      service: this,
      name: "CreateEmotePack",
      localName: "createEmotePack",
      I: CreateEmotePackRequest,
      O: CreateEmotePackResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "GetGuildList",
      localName: "getGuildList",
      I: GetGuildListRequest,
      O: GetGuildListResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "AddGuildToGuildList",
      localName: "addGuildToGuildList",
      I: AddGuildToGuildListRequest,
      O: AddGuildToGuildListResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresLocal: true,
        },
      },
    },
    {
      service: this,
      name: "RemoveGuildFromGuildList",
      localName: "removeGuildFromGuildList",
      I: RemoveGuildFromGuildListRequest,
      O: RemoveGuildFromGuildListResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresLocal: true,
        },
      },
    },
    {
      service: this,
      name: "GetGuild",
      localName: "getGuild",
      I: GetGuildRequest,
      O: GetGuildResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "GetGuildInvites",
      localName: "getGuildInvites",
      I: GetGuildInvitesRequest,
      O: GetGuildInvitesResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "invites.view",
        },
      },
    },
    {
      service: this,
      name: "GetGuildMembers",
      localName: "getGuildMembers",
      I: GetGuildMembersRequest,
      O: GetGuildMembersResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "GetGuildChannels",
      localName: "getGuildChannels",
      I: GetGuildChannelsRequest,
      O: GetGuildChannelsResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "GetChannelMessages",
      localName: "getChannelMessages",
      I: GetChannelMessagesRequest,
      O: GetChannelMessagesResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "messages.view",
        },
      },
    },
    {
      service: this,
      name: "GetMessage",
      localName: "getMessage",
      I: GetMessageRequest,
      O: GetMessageResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "messages.view",
        },
      },
    },
    {
      service: this,
      name: "GetEmotePacks",
      localName: "getEmotePacks",
      I: GetEmotePacksRequest,
      O: GetEmotePacksResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "GetEmotePackEmotes",
      localName: "getEmotePackEmotes",
      I: GetEmotePackEmotesRequest,
      O: GetEmotePackEmotesResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "UpdateGuildInformation",
      localName: "updateGuildInformation",
      I: UpdateGuildInformationRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "guild.manage.change-information",
        },
      },
    },
    {
      service: this,
      name: "UpdateChannelInformation",
      localName: "updateChannelInformation",
      I: UpdateChannelInformationRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "channels.manage.change-information",
        },
      },
    },
    {
      service: this,
      name: "UpdateChannelOrder",
      localName: "updateChannelOrder",
      I: UpdateChannelOrderRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "channels.manage.move",
        },
      },
    },
    {
      service: this,
      name: "UpdateMessageText",
      localName: "updateMessageText",
      I: UpdateMessageTextRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "messages.send",
        },
      },
    },
    {
      service: this,
      name: "AddEmoteToPack",
      localName: "addEmoteToPack",
      I: AddEmoteToPackRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "DeleteGuild",
      localName: "deleteGuild",
      I: DeleteGuildRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "guild.manage.delete",
        },
      },
    },
    {
      service: this,
      name: "DeleteInvite",
      localName: "deleteInvite",
      I: DeleteInviteRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "invites.manage.delete",
        },
      },
    },
    {
      service: this,
      name: "DeleteChannel",
      localName: "deleteChannel",
      I: DeleteChannelRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "channels.manage.delete",
        },
      },
    },
    {
      service: this,
      name: "DeleteMessage",
      localName: "deleteMessage",
      I: DeleteMessageRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "DeleteEmoteFromPack",
      localName: "deleteEmoteFromPack",
      I: DeleteEmoteFromPackRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "DeleteEmotePack",
      localName: "deleteEmotePack",
      I: DeleteEmotePackRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "DequipEmotePack",
      localName: "dequipEmotePack",
      I: DequipEmotePackRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "JoinGuild",
      localName: "joinGuild",
      I: JoinGuildRequest,
      O: JoinGuildResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "LeaveGuild",
      localName: "leaveGuild",
      I: LeaveGuildRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "TriggerAction",
      localName: "triggerAction",
      I: TriggerActionRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "actions.trigger",
        },
      },
    },
    {
      service: this,
      name: "SendMessage",
      localName: "sendMessage",
      I: SendMessageRequest,
      O: SendMessageResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "messages.send",
        },
      },
    },
    {
      service: this,
      name: "QueryHasPermission",
      localName: "queryHasPermission",
      I: QueryPermissionsRequest,
      O: QueryPermissionsResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "SetPermissions",
      localName: "setPermissions",
      I: SetPermissionsRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "permissions.manage.set",
        },
      },
    },
    {
      service: this,
      name: "GetPermissions",
      localName: "getPermissions",
      I: GetPermissionsRequest,
      O: GetPermissionsResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "permissions.manage.get",
        },
      },
    },
    {
      service: this,
      name: "MoveRole",
      localName: "moveRole",
      I: MoveRoleRequest,
      O: MoveRoleResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "roles.manage",
        },
      },
    },
    {
      service: this,
      name: "GetGuildRoles",
      localName: "getGuildRoles",
      I: GetGuildRolesRequest,
      O: GetGuildRolesResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "roles.get",
        },
      },
    },
    {
      service: this,
      name: "AddGuildRole",
      localName: "addGuildRole",
      I: AddGuildRoleRequest,
      O: AddGuildRoleResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "roles.manage",
        },
      },
    },
    {
      service: this,
      name: "ModifyGuildRole",
      localName: "modifyGuildRole",
      I: ModifyGuildRoleRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "roles.manage",
        },
      },
    },
    {
      service: this,
      name: "DeleteGuildRole",
      localName: "deleteGuildRole",
      I: DeleteGuildRoleRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "roles.manage",
        },
      },
    },
    {
      service: this,
      name: "ManageUserRoles",
      localName: "manageUserRoles",
      I: ManageUserRolesRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "roles.user.manage",
        },
      },
    },
    {
      service: this,
      name: "GetUserRoles",
      localName: "getUserRoles",
      I: GetUserRolesRequest,
      O: GetUserRolesResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "StreamEvents",
      localName: "streamEvents",
      I: StreamEventsRequest,
      O: Event,
      clientStreaming: true,
      serverStreaming: true,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "GetUser",
      localName: "getUser",
      I: GetUserRequest,
      O: GetUserResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "GetUserBulk",
      localName: "getUserBulk",
      I: GetUserBulkRequest,
      O: GetUserBulkResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "GetUserMetadata",
      localName: "getUserMetadata",
      I: GetUserMetadataRequest,
      O: GetUserMetadataResponse,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "ProfileUpdate",
      localName: "profileUpdate",
      I: ProfileUpdateRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": { requiresAuthentication: true },
      },
    },
    {
      service: this,
      name: "Typing",
      localName: "typing",
      I: TypingRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "messages.send",
        },
      },
    },
    {
      service: this,
      name: "PreviewGuild",
      localName: "previewGuild",
      I: PreviewGuildRequest,
      O: PreviewGuildResponse,
      options: { "protocol.harmonytypes.v1.metadata": {} },
    },
    {
      service: this,
      name: "BanUser",
      localName: "banUser",
      I: BanUserRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "user.manage.ban",
        },
      },
    },
    {
      service: this,
      name: "KickUser",
      localName: "kickUser",
      I: KickUserRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "user.manage.kick",
        },
      },
    },
    {
      service: this,
      name: "UnbanUser",
      localName: "unbanUser",
      I: UnbanUserRequest,
      O: Empty,
      options: {
        "protocol.harmonytypes.v1.metadata": {
          requiresAuthentication: true,
          requiresPermissionNode: "user.manage.unban",
        },
      },
    },
  ];
  constructor(private readonly _transport: RpcTransport) {}
  createGuild(
    input: CreateGuildRequest,
    options?: RpcOptions
  ): UnaryCall<CreateGuildRequest, CreateGuildResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<CreateGuildRequest, CreateGuildResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  createInvite(
    input: CreateInviteRequest,
    options?: RpcOptions
  ): UnaryCall<CreateInviteRequest, CreateInviteResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<CreateInviteRequest, CreateInviteResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  createChannel(
    input: CreateChannelRequest,
    options?: RpcOptions
  ): UnaryCall<CreateChannelRequest, CreateChannelResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<CreateChannelRequest, CreateChannelResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  createEmotePack(
    input: CreateEmotePackRequest,
    options?: RpcOptions
  ): UnaryCall<CreateEmotePackRequest, CreateEmotePackResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<CreateEmotePackRequest, CreateEmotePackResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  getGuildList(
    input: GetGuildListRequest,
    options?: RpcOptions
  ): UnaryCall<GetGuildListRequest, GetGuildListResponse> {
    const method = this.methods[4],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<GetGuildListRequest, GetGuildListResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  addGuildToGuildList(
    input: AddGuildToGuildListRequest,
    options?: RpcOptions
  ): UnaryCall<AddGuildToGuildListRequest, AddGuildToGuildListResponse> {
    const method = this.methods[5],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<
      AddGuildToGuildListRequest,
      AddGuildToGuildListResponse
    >("unary", this._transport, method, opt, i);
  }
  removeGuildFromGuildList(
    input: RemoveGuildFromGuildListRequest,
    options?: RpcOptions
  ): UnaryCall<
    RemoveGuildFromGuildListRequest,
    RemoveGuildFromGuildListResponse
  > {
    const method = this.methods[6],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<
      RemoveGuildFromGuildListRequest,
      RemoveGuildFromGuildListResponse
    >("unary", this._transport, method, opt, i);
  }
  getGuild(
    input: GetGuildRequest,
    options?: RpcOptions
  ): UnaryCall<GetGuildRequest, GetGuildResponse> {
    const method = this.methods[7],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<GetGuildRequest, GetGuildResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  getGuildInvites(
    input: GetGuildInvitesRequest,
    options?: RpcOptions
  ): UnaryCall<GetGuildInvitesRequest, GetGuildInvitesResponse> {
    const method = this.methods[8],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<GetGuildInvitesRequest, GetGuildInvitesResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  getGuildMembers(
    input: GetGuildMembersRequest,
    options?: RpcOptions
  ): UnaryCall<GetGuildMembersRequest, GetGuildMembersResponse> {
    const method = this.methods[9],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<GetGuildMembersRequest, GetGuildMembersResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  getGuildChannels(
    input: GetGuildChannelsRequest,
    options?: RpcOptions
  ): UnaryCall<GetGuildChannelsRequest, GetGuildChannelsResponse> {
    const method = this.methods[10],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<GetGuildChannelsRequest, GetGuildChannelsResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  getChannelMessages(
    input: GetChannelMessagesRequest,
    options?: RpcOptions
  ): UnaryCall<GetChannelMessagesRequest, GetChannelMessagesResponse> {
    const method = this.methods[11],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<
      GetChannelMessagesRequest,
      GetChannelMessagesResponse
    >("unary", this._transport, method, opt, i);
  }
  getMessage(
    input: GetMessageRequest,
    options?: RpcOptions
  ): UnaryCall<GetMessageRequest, GetMessageResponse> {
    const method = this.methods[12],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<GetMessageRequest, GetMessageResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  getEmotePacks(
    input: GetEmotePacksRequest,
    options?: RpcOptions
  ): UnaryCall<GetEmotePacksRequest, GetEmotePacksResponse> {
    const method = this.methods[13],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<GetEmotePacksRequest, GetEmotePacksResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  getEmotePackEmotes(
    input: GetEmotePackEmotesRequest,
    options?: RpcOptions
  ): UnaryCall<GetEmotePackEmotesRequest, GetEmotePackEmotesResponse> {
    const method = this.methods[14],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<
      GetEmotePackEmotesRequest,
      GetEmotePackEmotesResponse
    >("unary", this._transport, method, opt, i);
  }
  updateGuildInformation(
    input: UpdateGuildInformationRequest,
    options?: RpcOptions
  ): UnaryCall<UpdateGuildInformationRequest, Empty> {
    const method = this.methods[15],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<UpdateGuildInformationRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  updateChannelInformation(
    input: UpdateChannelInformationRequest,
    options?: RpcOptions
  ): UnaryCall<UpdateChannelInformationRequest, Empty> {
    const method = this.methods[16],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<UpdateChannelInformationRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  updateChannelOrder(
    input: UpdateChannelOrderRequest,
    options?: RpcOptions
  ): UnaryCall<UpdateChannelOrderRequest, Empty> {
    const method = this.methods[17],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<UpdateChannelOrderRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  updateMessageText(
    input: UpdateMessageTextRequest,
    options?: RpcOptions
  ): UnaryCall<UpdateMessageTextRequest, Empty> {
    const method = this.methods[18],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<UpdateMessageTextRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  addEmoteToPack(
    input: AddEmoteToPackRequest,
    options?: RpcOptions
  ): UnaryCall<AddEmoteToPackRequest, Empty> {
    const method = this.methods[19],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<AddEmoteToPackRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  deleteGuild(
    input: DeleteGuildRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteGuildRequest, Empty> {
    const method = this.methods[20],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<DeleteGuildRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  deleteInvite(
    input: DeleteInviteRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteInviteRequest, Empty> {
    const method = this.methods[21],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<DeleteInviteRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  deleteChannel(
    input: DeleteChannelRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteChannelRequest, Empty> {
    const method = this.methods[22],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<DeleteChannelRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  deleteMessage(
    input: DeleteMessageRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteMessageRequest, Empty> {
    const method = this.methods[23],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<DeleteMessageRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  deleteEmoteFromPack(
    input: DeleteEmoteFromPackRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteEmoteFromPackRequest, Empty> {
    const method = this.methods[24],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<DeleteEmoteFromPackRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  deleteEmotePack(
    input: DeleteEmotePackRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteEmotePackRequest, Empty> {
    const method = this.methods[25],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<DeleteEmotePackRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  dequipEmotePack(
    input: DequipEmotePackRequest,
    options?: RpcOptions
  ): UnaryCall<DequipEmotePackRequest, Empty> {
    const method = this.methods[26],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<DequipEmotePackRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  joinGuild(
    input: JoinGuildRequest,
    options?: RpcOptions
  ): UnaryCall<JoinGuildRequest, JoinGuildResponse> {
    const method = this.methods[27],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<JoinGuildRequest, JoinGuildResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  leaveGuild(
    input: LeaveGuildRequest,
    options?: RpcOptions
  ): UnaryCall<LeaveGuildRequest, Empty> {
    const method = this.methods[28],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<LeaveGuildRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  triggerAction(
    input: TriggerActionRequest,
    options?: RpcOptions
  ): UnaryCall<TriggerActionRequest, Empty> {
    const method = this.methods[29],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<TriggerActionRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  sendMessage(
    input: SendMessageRequest,
    options?: RpcOptions
  ): UnaryCall<SendMessageRequest, SendMessageResponse> {
    const method = this.methods[30],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<SendMessageRequest, SendMessageResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  queryHasPermission(
    input: QueryPermissionsRequest,
    options?: RpcOptions
  ): UnaryCall<QueryPermissionsRequest, QueryPermissionsResponse> {
    const method = this.methods[31],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<QueryPermissionsRequest, QueryPermissionsResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  setPermissions(
    input: SetPermissionsRequest,
    options?: RpcOptions
  ): UnaryCall<SetPermissionsRequest, Empty> {
    const method = this.methods[32],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<SetPermissionsRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  getPermissions(
    input: GetPermissionsRequest,
    options?: RpcOptions
  ): UnaryCall<GetPermissionsRequest, GetPermissionsResponse> {
    const method = this.methods[33],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<GetPermissionsRequest, GetPermissionsResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  moveRole(
    input: MoveRoleRequest,
    options?: RpcOptions
  ): UnaryCall<MoveRoleRequest, MoveRoleResponse> {
    const method = this.methods[34],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<MoveRoleRequest, MoveRoleResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  getGuildRoles(
    input: GetGuildRolesRequest,
    options?: RpcOptions
  ): UnaryCall<GetGuildRolesRequest, GetGuildRolesResponse> {
    const method = this.methods[35],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<GetGuildRolesRequest, GetGuildRolesResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  addGuildRole(
    input: AddGuildRoleRequest,
    options?: RpcOptions
  ): UnaryCall<AddGuildRoleRequest, AddGuildRoleResponse> {
    const method = this.methods[36],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<AddGuildRoleRequest, AddGuildRoleResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  modifyGuildRole(
    input: ModifyGuildRoleRequest,
    options?: RpcOptions
  ): UnaryCall<ModifyGuildRoleRequest, Empty> {
    const method = this.methods[37],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<ModifyGuildRoleRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  deleteGuildRole(
    input: DeleteGuildRoleRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteGuildRoleRequest, Empty> {
    const method = this.methods[38],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<DeleteGuildRoleRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  manageUserRoles(
    input: ManageUserRolesRequest,
    options?: RpcOptions
  ): UnaryCall<ManageUserRolesRequest, Empty> {
    const method = this.methods[39],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<ManageUserRolesRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  getUserRoles(
    input: GetUserRolesRequest,
    options?: RpcOptions
  ): UnaryCall<GetUserRolesRequest, GetUserRolesResponse> {
    const method = this.methods[40],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<GetUserRolesRequest, GetUserRolesResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  streamEvents(
    options?: RpcOptions
  ): DuplexStreamingCall<StreamEventsRequest, Event> {
    const method = this.methods[41],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<StreamEventsRequest, Event>(
      "duplex",
      this._transport,
      method,
      opt
    );
  }
  getUser(
    input: GetUserRequest,
    options?: RpcOptions
  ): UnaryCall<GetUserRequest, GetUserResponse> {
    const method = this.methods[42],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<GetUserRequest, GetUserResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  getUserBulk(
    input: GetUserBulkRequest,
    options?: RpcOptions
  ): UnaryCall<GetUserBulkRequest, GetUserBulkResponse> {
    const method = this.methods[43],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<GetUserBulkRequest, GetUserBulkResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  getUserMetadata(
    input: GetUserMetadataRequest,
    options?: RpcOptions
  ): UnaryCall<GetUserMetadataRequest, GetUserMetadataResponse> {
    const method = this.methods[44],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<GetUserMetadataRequest, GetUserMetadataResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  profileUpdate(
    input: ProfileUpdateRequest,
    options?: RpcOptions
  ): UnaryCall<ProfileUpdateRequest, Empty> {
    const method = this.methods[45],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<ProfileUpdateRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  typing(
    input: TypingRequest,
    options?: RpcOptions
  ): UnaryCall<TypingRequest, Empty> {
    const method = this.methods[46],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<TypingRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  previewGuild(
    input: PreviewGuildRequest,
    options?: RpcOptions
  ): UnaryCall<PreviewGuildRequest, PreviewGuildResponse> {
    const method = this.methods[47],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<PreviewGuildRequest, PreviewGuildResponse>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  banUser(
    input: BanUserRequest,
    options?: RpcOptions
  ): UnaryCall<BanUserRequest, Empty> {
    const method = this.methods[48],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<BanUserRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  kickUser(
    input: KickUserRequest,
    options?: RpcOptions
  ): UnaryCall<KickUserRequest, Empty> {
    const method = this.methods[49],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<KickUserRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
  unbanUser(
    input: UnbanUserRequest,
    options?: RpcOptions
  ): UnaryCall<UnbanUserRequest, Empty> {
    const method = this.methods[50],
      opt = this._transport.mergeOptions(options),
      i = method.I.create(input);
    return stackIntercept<UnbanUserRequest, Empty>(
      "unary",
      this._transport,
      method,
      opt,
      i
    );
  }
}
