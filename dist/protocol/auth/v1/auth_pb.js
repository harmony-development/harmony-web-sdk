// source: auth/v1/auth.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var harmonytypes_v1_types_pb = require('../../harmonytypes/v1/types_pb.js');
goog.object.extend(proto, harmonytypes_v1_types_pb);
goog.exportSymbol('proto.protocol.auth.v1.AuthStep', null, global);
goog.exportSymbol('proto.protocol.auth.v1.AuthStep.Choice', null, global);
goog.exportSymbol('proto.protocol.auth.v1.AuthStep.Form', null, global);
goog.exportSymbol('proto.protocol.auth.v1.AuthStep.Form.FormField', null, global);
goog.exportSymbol('proto.protocol.auth.v1.AuthStep.StepCase', null, global);
goog.exportSymbol('proto.protocol.auth.v1.AuthStep.Waiting', null, global);
goog.exportSymbol('proto.protocol.auth.v1.BeginAuthResponse', null, global);
goog.exportSymbol('proto.protocol.auth.v1.FederateReply', null, global);
goog.exportSymbol('proto.protocol.auth.v1.FederateRequest', null, global);
goog.exportSymbol('proto.protocol.auth.v1.KeyReply', null, global);
goog.exportSymbol('proto.protocol.auth.v1.LoginFederatedRequest', null, global);
goog.exportSymbol('proto.protocol.auth.v1.NextStepRequest', null, global);
goog.exportSymbol('proto.protocol.auth.v1.NextStepRequest.Choice', null, global);
goog.exportSymbol('proto.protocol.auth.v1.NextStepRequest.Form', null, global);
goog.exportSymbol('proto.protocol.auth.v1.NextStepRequest.FormFields', null, global);
goog.exportSymbol('proto.protocol.auth.v1.NextStepRequest.FormFields.FieldCase', null, global);
goog.exportSymbol('proto.protocol.auth.v1.NextStepRequest.StepCase', null, global);
goog.exportSymbol('proto.protocol.auth.v1.Session', null, global);
goog.exportSymbol('proto.protocol.auth.v1.StepBackRequest', null, global);
goog.exportSymbol('proto.protocol.auth.v1.StreamStepsRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.BeginAuthResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.auth.v1.BeginAuthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.BeginAuthResponse.displayName = 'proto.protocol.auth.v1.BeginAuthResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.Session = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.auth.v1.Session, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.Session.displayName = 'proto.protocol.auth.v1.Session';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.AuthStep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protocol.auth.v1.AuthStep.oneofGroups_);
};
goog.inherits(proto.protocol.auth.v1.AuthStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.AuthStep.displayName = 'proto.protocol.auth.v1.AuthStep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.AuthStep.Choice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.auth.v1.AuthStep.Choice.repeatedFields_, null);
};
goog.inherits(proto.protocol.auth.v1.AuthStep.Choice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.AuthStep.Choice.displayName = 'proto.protocol.auth.v1.AuthStep.Choice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.AuthStep.Form = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.auth.v1.AuthStep.Form.repeatedFields_, null);
};
goog.inherits(proto.protocol.auth.v1.AuthStep.Form, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.AuthStep.Form.displayName = 'proto.protocol.auth.v1.AuthStep.Form';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.AuthStep.Form.FormField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.auth.v1.AuthStep.Form.FormField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.AuthStep.Form.FormField.displayName = 'proto.protocol.auth.v1.AuthStep.Form.FormField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.AuthStep.Waiting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.auth.v1.AuthStep.Waiting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.AuthStep.Waiting.displayName = 'proto.protocol.auth.v1.AuthStep.Waiting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.NextStepRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protocol.auth.v1.NextStepRequest.oneofGroups_);
};
goog.inherits(proto.protocol.auth.v1.NextStepRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.NextStepRequest.displayName = 'proto.protocol.auth.v1.NextStepRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.NextStepRequest.Choice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.auth.v1.NextStepRequest.Choice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.NextStepRequest.Choice.displayName = 'proto.protocol.auth.v1.NextStepRequest.Choice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.NextStepRequest.FormFields = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protocol.auth.v1.NextStepRequest.FormFields.oneofGroups_);
};
goog.inherits(proto.protocol.auth.v1.NextStepRequest.FormFields, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.NextStepRequest.FormFields.displayName = 'proto.protocol.auth.v1.NextStepRequest.FormFields';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.NextStepRequest.Form = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.auth.v1.NextStepRequest.Form.repeatedFields_, null);
};
goog.inherits(proto.protocol.auth.v1.NextStepRequest.Form, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.NextStepRequest.Form.displayName = 'proto.protocol.auth.v1.NextStepRequest.Form';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.StepBackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.auth.v1.StepBackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.StepBackRequest.displayName = 'proto.protocol.auth.v1.StepBackRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.StreamStepsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.auth.v1.StreamStepsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.StreamStepsRequest.displayName = 'proto.protocol.auth.v1.StreamStepsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.FederateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.auth.v1.FederateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.FederateRequest.displayName = 'proto.protocol.auth.v1.FederateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.FederateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.auth.v1.FederateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.FederateReply.displayName = 'proto.protocol.auth.v1.FederateReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.KeyReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.auth.v1.KeyReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.KeyReply.displayName = 'proto.protocol.auth.v1.KeyReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.auth.v1.LoginFederatedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.auth.v1.LoginFederatedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.auth.v1.LoginFederatedRequest.displayName = 'proto.protocol.auth.v1.LoginFederatedRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.BeginAuthResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.BeginAuthResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.BeginAuthResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.BeginAuthResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    authId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.BeginAuthResponse}
 */
proto.protocol.auth.v1.BeginAuthResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.BeginAuthResponse;
  return proto.protocol.auth.v1.BeginAuthResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.BeginAuthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.BeginAuthResponse}
 */
proto.protocol.auth.v1.BeginAuthResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.BeginAuthResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.BeginAuthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.BeginAuthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.BeginAuthResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string auth_id = 1;
 * @return {string}
 */
proto.protocol.auth.v1.BeginAuthResponse.prototype.getAuthId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.BeginAuthResponse} returns this
 */
proto.protocol.auth.v1.BeginAuthResponse.prototype.setAuthId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.Session.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.Session.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.Session} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.Session.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    sessionToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.Session}
 */
proto.protocol.auth.v1.Session.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.Session;
  return proto.protocol.auth.v1.Session.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.Session} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.Session}
 */
proto.protocol.auth.v1.Session.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.Session.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.Session.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.Session} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.Session.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getSessionToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 user_id = 1;
 * @return {string}
 */
proto.protocol.auth.v1.Session.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.Session} returns this
 */
proto.protocol.auth.v1.Session.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string session_token = 2;
 * @return {string}
 */
proto.protocol.auth.v1.Session.prototype.getSessionToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.Session} returns this
 */
proto.protocol.auth.v1.Session.prototype.setSessionToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protocol.auth.v1.AuthStep.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.protocol.auth.v1.AuthStep.StepCase = {
  STEP_NOT_SET: 0,
  CHOICE: 2,
  FORM: 3,
  SESSION: 4,
  WAITING: 5
};

/**
 * @return {proto.protocol.auth.v1.AuthStep.StepCase}
 */
proto.protocol.auth.v1.AuthStep.prototype.getStepCase = function() {
  return /** @type {proto.protocol.auth.v1.AuthStep.StepCase} */(jspb.Message.computeOneofCase(this, proto.protocol.auth.v1.AuthStep.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.AuthStep.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.AuthStep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.AuthStep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.AuthStep.toObject = function(includeInstance, msg) {
  var f, obj = {
    fallbackUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    choice: (f = msg.getChoice()) && proto.protocol.auth.v1.AuthStep.Choice.toObject(includeInstance, f),
    form: (f = msg.getForm()) && proto.protocol.auth.v1.AuthStep.Form.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.protocol.auth.v1.Session.toObject(includeInstance, f),
    waiting: (f = msg.getWaiting()) && proto.protocol.auth.v1.AuthStep.Waiting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.AuthStep}
 */
proto.protocol.auth.v1.AuthStep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.AuthStep;
  return proto.protocol.auth.v1.AuthStep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.AuthStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.AuthStep}
 */
proto.protocol.auth.v1.AuthStep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFallbackUrl(value);
      break;
    case 2:
      var value = new proto.protocol.auth.v1.AuthStep.Choice;
      reader.readMessage(value,proto.protocol.auth.v1.AuthStep.Choice.deserializeBinaryFromReader);
      msg.setChoice(value);
      break;
    case 3:
      var value = new proto.protocol.auth.v1.AuthStep.Form;
      reader.readMessage(value,proto.protocol.auth.v1.AuthStep.Form.deserializeBinaryFromReader);
      msg.setForm(value);
      break;
    case 4:
      var value = new proto.protocol.auth.v1.Session;
      reader.readMessage(value,proto.protocol.auth.v1.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 5:
      var value = new proto.protocol.auth.v1.AuthStep.Waiting;
      reader.readMessage(value,proto.protocol.auth.v1.AuthStep.Waiting.deserializeBinaryFromReader);
      msg.setWaiting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.AuthStep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.AuthStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.AuthStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.AuthStep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFallbackUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChoice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.auth.v1.AuthStep.Choice.serializeBinaryToWriter
    );
  }
  f = message.getForm();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.auth.v1.AuthStep.Form.serializeBinaryToWriter
    );
  }
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protocol.auth.v1.Session.serializeBinaryToWriter
    );
  }
  f = message.getWaiting();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.protocol.auth.v1.AuthStep.Waiting.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.auth.v1.AuthStep.Choice.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.AuthStep.Choice.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.AuthStep.Choice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.AuthStep.Choice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.AuthStep.Choice.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    optionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.AuthStep.Choice}
 */
proto.protocol.auth.v1.AuthStep.Choice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.AuthStep.Choice;
  return proto.protocol.auth.v1.AuthStep.Choice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.AuthStep.Choice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.AuthStep.Choice}
 */
proto.protocol.auth.v1.AuthStep.Choice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.AuthStep.Choice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.AuthStep.Choice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.AuthStep.Choice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.AuthStep.Choice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOptionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.protocol.auth.v1.AuthStep.Choice.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.AuthStep.Choice} returns this
 */
proto.protocol.auth.v1.AuthStep.Choice.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string options = 2;
 * @return {!Array<string>}
 */
proto.protocol.auth.v1.AuthStep.Choice.prototype.getOptionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.protocol.auth.v1.AuthStep.Choice} returns this
 */
proto.protocol.auth.v1.AuthStep.Choice.prototype.setOptionsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.protocol.auth.v1.AuthStep.Choice} returns this
 */
proto.protocol.auth.v1.AuthStep.Choice.prototype.addOptions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protocol.auth.v1.AuthStep.Choice} returns this
 */
proto.protocol.auth.v1.AuthStep.Choice.prototype.clearOptionsList = function() {
  return this.setOptionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.auth.v1.AuthStep.Form.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.AuthStep.Form.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.AuthStep.Form.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.AuthStep.Form} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.AuthStep.Form.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.protocol.auth.v1.AuthStep.Form.FormField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.AuthStep.Form}
 */
proto.protocol.auth.v1.AuthStep.Form.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.AuthStep.Form;
  return proto.protocol.auth.v1.AuthStep.Form.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.AuthStep.Form} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.AuthStep.Form}
 */
proto.protocol.auth.v1.AuthStep.Form.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = new proto.protocol.auth.v1.AuthStep.Form.FormField;
      reader.readMessage(value,proto.protocol.auth.v1.AuthStep.Form.FormField.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.AuthStep.Form.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.AuthStep.Form.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.AuthStep.Form} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.AuthStep.Form.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protocol.auth.v1.AuthStep.Form.FormField.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.AuthStep.Form.FormField.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.AuthStep.Form.FormField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.AuthStep.Form.FormField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.AuthStep.Form.FormField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.AuthStep.Form.FormField}
 */
proto.protocol.auth.v1.AuthStep.Form.FormField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.AuthStep.Form.FormField;
  return proto.protocol.auth.v1.AuthStep.Form.FormField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.AuthStep.Form.FormField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.AuthStep.Form.FormField}
 */
proto.protocol.auth.v1.AuthStep.Form.FormField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.AuthStep.Form.FormField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.AuthStep.Form.FormField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.AuthStep.Form.FormField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.AuthStep.Form.FormField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.protocol.auth.v1.AuthStep.Form.FormField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.AuthStep.Form.FormField} returns this
 */
proto.protocol.auth.v1.AuthStep.Form.FormField.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.protocol.auth.v1.AuthStep.Form.FormField.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.AuthStep.Form.FormField} returns this
 */
proto.protocol.auth.v1.AuthStep.Form.FormField.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.protocol.auth.v1.AuthStep.Form.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.AuthStep.Form} returns this
 */
proto.protocol.auth.v1.AuthStep.Form.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated FormField fields = 2;
 * @return {!Array<!proto.protocol.auth.v1.AuthStep.Form.FormField>}
 */
proto.protocol.auth.v1.AuthStep.Form.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.protocol.auth.v1.AuthStep.Form.FormField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.auth.v1.AuthStep.Form.FormField, 2));
};


/**
 * @param {!Array<!proto.protocol.auth.v1.AuthStep.Form.FormField>} value
 * @return {!proto.protocol.auth.v1.AuthStep.Form} returns this
*/
proto.protocol.auth.v1.AuthStep.Form.prototype.setFieldsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protocol.auth.v1.AuthStep.Form.FormField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.auth.v1.AuthStep.Form.FormField}
 */
proto.protocol.auth.v1.AuthStep.Form.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.auth.v1.AuthStep.Form.FormField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protocol.auth.v1.AuthStep.Form} returns this
 */
proto.protocol.auth.v1.AuthStep.Form.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.AuthStep.Waiting.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.AuthStep.Waiting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.AuthStep.Waiting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.AuthStep.Waiting.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.AuthStep.Waiting}
 */
proto.protocol.auth.v1.AuthStep.Waiting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.AuthStep.Waiting;
  return proto.protocol.auth.v1.AuthStep.Waiting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.AuthStep.Waiting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.AuthStep.Waiting}
 */
proto.protocol.auth.v1.AuthStep.Waiting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.AuthStep.Waiting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.AuthStep.Waiting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.AuthStep.Waiting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.AuthStep.Waiting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.protocol.auth.v1.AuthStep.Waiting.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.AuthStep.Waiting} returns this
 */
proto.protocol.auth.v1.AuthStep.Waiting.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.protocol.auth.v1.AuthStep.Waiting.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.AuthStep.Waiting} returns this
 */
proto.protocol.auth.v1.AuthStep.Waiting.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string fallback_url = 1;
 * @return {string}
 */
proto.protocol.auth.v1.AuthStep.prototype.getFallbackUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.AuthStep} returns this
 */
proto.protocol.auth.v1.AuthStep.prototype.setFallbackUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Choice choice = 2;
 * @return {?proto.protocol.auth.v1.AuthStep.Choice}
 */
proto.protocol.auth.v1.AuthStep.prototype.getChoice = function() {
  return /** @type{?proto.protocol.auth.v1.AuthStep.Choice} */ (
    jspb.Message.getWrapperField(this, proto.protocol.auth.v1.AuthStep.Choice, 2));
};


/**
 * @param {?proto.protocol.auth.v1.AuthStep.Choice|undefined} value
 * @return {!proto.protocol.auth.v1.AuthStep} returns this
*/
proto.protocol.auth.v1.AuthStep.prototype.setChoice = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.protocol.auth.v1.AuthStep.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.auth.v1.AuthStep} returns this
 */
proto.protocol.auth.v1.AuthStep.prototype.clearChoice = function() {
  return this.setChoice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.auth.v1.AuthStep.prototype.hasChoice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Form form = 3;
 * @return {?proto.protocol.auth.v1.AuthStep.Form}
 */
proto.protocol.auth.v1.AuthStep.prototype.getForm = function() {
  return /** @type{?proto.protocol.auth.v1.AuthStep.Form} */ (
    jspb.Message.getWrapperField(this, proto.protocol.auth.v1.AuthStep.Form, 3));
};


/**
 * @param {?proto.protocol.auth.v1.AuthStep.Form|undefined} value
 * @return {!proto.protocol.auth.v1.AuthStep} returns this
*/
proto.protocol.auth.v1.AuthStep.prototype.setForm = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.protocol.auth.v1.AuthStep.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.auth.v1.AuthStep} returns this
 */
proto.protocol.auth.v1.AuthStep.prototype.clearForm = function() {
  return this.setForm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.auth.v1.AuthStep.prototype.hasForm = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Session session = 4;
 * @return {?proto.protocol.auth.v1.Session}
 */
proto.protocol.auth.v1.AuthStep.prototype.getSession = function() {
  return /** @type{?proto.protocol.auth.v1.Session} */ (
    jspb.Message.getWrapperField(this, proto.protocol.auth.v1.Session, 4));
};


/**
 * @param {?proto.protocol.auth.v1.Session|undefined} value
 * @return {!proto.protocol.auth.v1.AuthStep} returns this
*/
proto.protocol.auth.v1.AuthStep.prototype.setSession = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.protocol.auth.v1.AuthStep.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.auth.v1.AuthStep} returns this
 */
proto.protocol.auth.v1.AuthStep.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.auth.v1.AuthStep.prototype.hasSession = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Waiting waiting = 5;
 * @return {?proto.protocol.auth.v1.AuthStep.Waiting}
 */
proto.protocol.auth.v1.AuthStep.prototype.getWaiting = function() {
  return /** @type{?proto.protocol.auth.v1.AuthStep.Waiting} */ (
    jspb.Message.getWrapperField(this, proto.protocol.auth.v1.AuthStep.Waiting, 5));
};


/**
 * @param {?proto.protocol.auth.v1.AuthStep.Waiting|undefined} value
 * @return {!proto.protocol.auth.v1.AuthStep} returns this
*/
proto.protocol.auth.v1.AuthStep.prototype.setWaiting = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.protocol.auth.v1.AuthStep.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.auth.v1.AuthStep} returns this
 */
proto.protocol.auth.v1.AuthStep.prototype.clearWaiting = function() {
  return this.setWaiting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.auth.v1.AuthStep.prototype.hasWaiting = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protocol.auth.v1.NextStepRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.protocol.auth.v1.NextStepRequest.StepCase = {
  STEP_NOT_SET: 0,
  CHOICE: 2,
  FORM: 3
};

/**
 * @return {proto.protocol.auth.v1.NextStepRequest.StepCase}
 */
proto.protocol.auth.v1.NextStepRequest.prototype.getStepCase = function() {
  return /** @type {proto.protocol.auth.v1.NextStepRequest.StepCase} */(jspb.Message.computeOneofCase(this, proto.protocol.auth.v1.NextStepRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.NextStepRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.NextStepRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.NextStepRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.NextStepRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    choice: (f = msg.getChoice()) && proto.protocol.auth.v1.NextStepRequest.Choice.toObject(includeInstance, f),
    form: (f = msg.getForm()) && proto.protocol.auth.v1.NextStepRequest.Form.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.NextStepRequest}
 */
proto.protocol.auth.v1.NextStepRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.NextStepRequest;
  return proto.protocol.auth.v1.NextStepRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.NextStepRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.NextStepRequest}
 */
proto.protocol.auth.v1.NextStepRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthId(value);
      break;
    case 2:
      var value = new proto.protocol.auth.v1.NextStepRequest.Choice;
      reader.readMessage(value,proto.protocol.auth.v1.NextStepRequest.Choice.deserializeBinaryFromReader);
      msg.setChoice(value);
      break;
    case 3:
      var value = new proto.protocol.auth.v1.NextStepRequest.Form;
      reader.readMessage(value,proto.protocol.auth.v1.NextStepRequest.Form.deserializeBinaryFromReader);
      msg.setForm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.NextStepRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.NextStepRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.NextStepRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.NextStepRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChoice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.auth.v1.NextStepRequest.Choice.serializeBinaryToWriter
    );
  }
  f = message.getForm();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.auth.v1.NextStepRequest.Form.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.NextStepRequest.Choice.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.NextStepRequest.Choice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.NextStepRequest.Choice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.NextStepRequest.Choice.toObject = function(includeInstance, msg) {
  var f, obj = {
    choice: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.NextStepRequest.Choice}
 */
proto.protocol.auth.v1.NextStepRequest.Choice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.NextStepRequest.Choice;
  return proto.protocol.auth.v1.NextStepRequest.Choice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.NextStepRequest.Choice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.NextStepRequest.Choice}
 */
proto.protocol.auth.v1.NextStepRequest.Choice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.NextStepRequest.Choice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.NextStepRequest.Choice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.NextStepRequest.Choice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.NextStepRequest.Choice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChoice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string choice = 1;
 * @return {string}
 */
proto.protocol.auth.v1.NextStepRequest.Choice.prototype.getChoice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.NextStepRequest.Choice} returns this
 */
proto.protocol.auth.v1.NextStepRequest.Choice.prototype.setChoice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.FieldCase = {
  FIELD_NOT_SET: 0,
  BYTES: 1,
  STRING: 2,
  NUMBER: 3
};

/**
 * @return {proto.protocol.auth.v1.NextStepRequest.FormFields.FieldCase}
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.getFieldCase = function() {
  return /** @type {proto.protocol.auth.v1.NextStepRequest.FormFields.FieldCase} */(jspb.Message.computeOneofCase(this, proto.protocol.auth.v1.NextStepRequest.FormFields.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.NextStepRequest.FormFields.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.NextStepRequest.FormFields} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytes: msg.getBytes_asB64(),
    string: jspb.Message.getFieldWithDefault(msg, 2, ""),
    number: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.NextStepRequest.FormFields}
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.NextStepRequest.FormFields;
  return proto.protocol.auth.v1.NextStepRequest.FormFields.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.NextStepRequest.FormFields} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.NextStepRequest.FormFields}
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.NextStepRequest.FormFields.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.NextStepRequest.FormFields} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional bytes bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bytes = 1;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * optional bytes bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protocol.auth.v1.NextStepRequest.FormFields} returns this
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.setBytes = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.protocol.auth.v1.NextStepRequest.FormFields.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.auth.v1.NextStepRequest.FormFields} returns this
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.clearBytes = function() {
  return jspb.Message.setOneofField(this, 1, proto.protocol.auth.v1.NextStepRequest.FormFields.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.hasBytes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string string = 2;
 * @return {string}
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.NextStepRequest.FormFields} returns this
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.setString = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.protocol.auth.v1.NextStepRequest.FormFields.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.auth.v1.NextStepRequest.FormFields} returns this
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.clearString = function() {
  return jspb.Message.setOneofField(this, 2, proto.protocol.auth.v1.NextStepRequest.FormFields.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.hasString = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 number = 3;
 * @return {number}
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.auth.v1.NextStepRequest.FormFields} returns this
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.setNumber = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.protocol.auth.v1.NextStepRequest.FormFields.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.auth.v1.NextStepRequest.FormFields} returns this
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.clearNumber = function() {
  return jspb.Message.setOneofField(this, 3, proto.protocol.auth.v1.NextStepRequest.FormFields.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.auth.v1.NextStepRequest.FormFields.prototype.hasNumber = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.auth.v1.NextStepRequest.Form.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.NextStepRequest.Form.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.NextStepRequest.Form.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.NextStepRequest.Form} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.NextStepRequest.Form.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.protocol.auth.v1.NextStepRequest.FormFields.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.NextStepRequest.Form}
 */
proto.protocol.auth.v1.NextStepRequest.Form.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.NextStepRequest.Form;
  return proto.protocol.auth.v1.NextStepRequest.Form.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.NextStepRequest.Form} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.NextStepRequest.Form}
 */
proto.protocol.auth.v1.NextStepRequest.Form.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.auth.v1.NextStepRequest.FormFields;
      reader.readMessage(value,proto.protocol.auth.v1.NextStepRequest.FormFields.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.NextStepRequest.Form.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.NextStepRequest.Form.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.NextStepRequest.Form} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.NextStepRequest.Form.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protocol.auth.v1.NextStepRequest.FormFields.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FormFields fields = 1;
 * @return {!Array<!proto.protocol.auth.v1.NextStepRequest.FormFields>}
 */
proto.protocol.auth.v1.NextStepRequest.Form.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.protocol.auth.v1.NextStepRequest.FormFields>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.auth.v1.NextStepRequest.FormFields, 1));
};


/**
 * @param {!Array<!proto.protocol.auth.v1.NextStepRequest.FormFields>} value
 * @return {!proto.protocol.auth.v1.NextStepRequest.Form} returns this
*/
proto.protocol.auth.v1.NextStepRequest.Form.prototype.setFieldsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protocol.auth.v1.NextStepRequest.FormFields=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.auth.v1.NextStepRequest.FormFields}
 */
proto.protocol.auth.v1.NextStepRequest.Form.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protocol.auth.v1.NextStepRequest.FormFields, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protocol.auth.v1.NextStepRequest.Form} returns this
 */
proto.protocol.auth.v1.NextStepRequest.Form.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};


/**
 * optional string auth_id = 1;
 * @return {string}
 */
proto.protocol.auth.v1.NextStepRequest.prototype.getAuthId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.NextStepRequest} returns this
 */
proto.protocol.auth.v1.NextStepRequest.prototype.setAuthId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Choice choice = 2;
 * @return {?proto.protocol.auth.v1.NextStepRequest.Choice}
 */
proto.protocol.auth.v1.NextStepRequest.prototype.getChoice = function() {
  return /** @type{?proto.protocol.auth.v1.NextStepRequest.Choice} */ (
    jspb.Message.getWrapperField(this, proto.protocol.auth.v1.NextStepRequest.Choice, 2));
};


/**
 * @param {?proto.protocol.auth.v1.NextStepRequest.Choice|undefined} value
 * @return {!proto.protocol.auth.v1.NextStepRequest} returns this
*/
proto.protocol.auth.v1.NextStepRequest.prototype.setChoice = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.protocol.auth.v1.NextStepRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.auth.v1.NextStepRequest} returns this
 */
proto.protocol.auth.v1.NextStepRequest.prototype.clearChoice = function() {
  return this.setChoice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.auth.v1.NextStepRequest.prototype.hasChoice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Form form = 3;
 * @return {?proto.protocol.auth.v1.NextStepRequest.Form}
 */
proto.protocol.auth.v1.NextStepRequest.prototype.getForm = function() {
  return /** @type{?proto.protocol.auth.v1.NextStepRequest.Form} */ (
    jspb.Message.getWrapperField(this, proto.protocol.auth.v1.NextStepRequest.Form, 3));
};


/**
 * @param {?proto.protocol.auth.v1.NextStepRequest.Form|undefined} value
 * @return {!proto.protocol.auth.v1.NextStepRequest} returns this
*/
proto.protocol.auth.v1.NextStepRequest.prototype.setForm = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.protocol.auth.v1.NextStepRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.auth.v1.NextStepRequest} returns this
 */
proto.protocol.auth.v1.NextStepRequest.prototype.clearForm = function() {
  return this.setForm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.auth.v1.NextStepRequest.prototype.hasForm = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.StepBackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.StepBackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.StepBackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.StepBackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.StepBackRequest}
 */
proto.protocol.auth.v1.StepBackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.StepBackRequest;
  return proto.protocol.auth.v1.StepBackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.StepBackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.StepBackRequest}
 */
proto.protocol.auth.v1.StepBackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.StepBackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.StepBackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.StepBackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.StepBackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string auth_id = 1;
 * @return {string}
 */
proto.protocol.auth.v1.StepBackRequest.prototype.getAuthId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.StepBackRequest} returns this
 */
proto.protocol.auth.v1.StepBackRequest.prototype.setAuthId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.StreamStepsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.StreamStepsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.StreamStepsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.StreamStepsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.StreamStepsRequest}
 */
proto.protocol.auth.v1.StreamStepsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.StreamStepsRequest;
  return proto.protocol.auth.v1.StreamStepsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.StreamStepsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.StreamStepsRequest}
 */
proto.protocol.auth.v1.StreamStepsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.StreamStepsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.StreamStepsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.StreamStepsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.StreamStepsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string auth_id = 1;
 * @return {string}
 */
proto.protocol.auth.v1.StreamStepsRequest.prototype.getAuthId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.StreamStepsRequest} returns this
 */
proto.protocol.auth.v1.StreamStepsRequest.prototype.setAuthId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.FederateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.FederateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.FederateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.FederateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.FederateRequest}
 */
proto.protocol.auth.v1.FederateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.FederateRequest;
  return proto.protocol.auth.v1.FederateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.FederateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.FederateRequest}
 */
proto.protocol.auth.v1.FederateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.FederateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.FederateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.FederateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.FederateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string target = 1;
 * @return {string}
 */
proto.protocol.auth.v1.FederateRequest.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.FederateRequest} returns this
 */
proto.protocol.auth.v1.FederateRequest.prototype.setTarget = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.FederateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.FederateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.FederateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.FederateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.FederateReply}
 */
proto.protocol.auth.v1.FederateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.FederateReply;
  return proto.protocol.auth.v1.FederateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.FederateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.FederateReply}
 */
proto.protocol.auth.v1.FederateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.FederateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.FederateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.FederateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.FederateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.protocol.auth.v1.FederateReply.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.FederateReply} returns this
 */
proto.protocol.auth.v1.FederateReply.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nonce = 2;
 * @return {string}
 */
proto.protocol.auth.v1.FederateReply.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.FederateReply} returns this
 */
proto.protocol.auth.v1.FederateReply.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.KeyReply.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.KeyReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.KeyReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.KeyReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.KeyReply}
 */
proto.protocol.auth.v1.KeyReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.KeyReply;
  return proto.protocol.auth.v1.KeyReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.KeyReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.KeyReply}
 */
proto.protocol.auth.v1.KeyReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.KeyReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.KeyReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.KeyReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.KeyReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.protocol.auth.v1.KeyReply.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.KeyReply} returns this
 */
proto.protocol.auth.v1.KeyReply.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.auth.v1.LoginFederatedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.auth.v1.LoginFederatedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.auth.v1.LoginFederatedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.LoginFederatedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.auth.v1.LoginFederatedRequest}
 */
proto.protocol.auth.v1.LoginFederatedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.auth.v1.LoginFederatedRequest;
  return proto.protocol.auth.v1.LoginFederatedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.auth.v1.LoginFederatedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.auth.v1.LoginFederatedRequest}
 */
proto.protocol.auth.v1.LoginFederatedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.auth.v1.LoginFederatedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.auth.v1.LoginFederatedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.auth.v1.LoginFederatedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.auth.v1.LoginFederatedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string auth_token = 1;
 * @return {string}
 */
proto.protocol.auth.v1.LoginFederatedRequest.prototype.getAuthToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.LoginFederatedRequest} returns this
 */
proto.protocol.auth.v1.LoginFederatedRequest.prototype.setAuthToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string domain = 2;
 * @return {string}
 */
proto.protocol.auth.v1.LoginFederatedRequest.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.auth.v1.LoginFederatedRequest} returns this
 */
proto.protocol.auth.v1.LoginFederatedRequest.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.protocol.auth.v1);
