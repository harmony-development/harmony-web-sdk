// source: chat/v1/streaming.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var harmonytypes_v1_types_pb = require('../../harmonytypes/v1/types_pb.js');
goog.object.extend(proto, harmonytypes_v1_types_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.protocol.chat.v1.Event', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.ActionPerformed', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.ChannelCreated', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.ChannelDeleted', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.ChannelUpdated', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.EventCase', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.GuildAddedToList', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.GuildDeleted', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.GuildRemovedFromList', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.GuildUpdated', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.MemberJoined', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.MemberLeft', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.MessageDeleted', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.MessageSent', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.MessageUpdated', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.ProfileUpdated', null, global);
goog.exportSymbol('proto.protocol.chat.v1.Event.RoleMoved', null, global);
goog.exportSymbol('proto.protocol.chat.v1.StreamEventsRequest', null, global);
goog.exportSymbol('proto.protocol.chat.v1.StreamEventsRequest.RequestCase', null, global);
goog.exportSymbol('proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions', null, global);
goog.exportSymbol('proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild', null, global);
goog.exportSymbol('proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.StreamEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protocol.chat.v1.StreamEventsRequest.oneofGroups_);
};
goog.inherits(proto.protocol.chat.v1.StreamEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.StreamEventsRequest.displayName = 'proto.protocol.chat.v1.StreamEventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.displayName = 'proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions.displayName = 'proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents.displayName = 'proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protocol.chat.v1.Event.oneofGroups_);
};
goog.inherits(proto.protocol.chat.v1.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.displayName = 'proto.protocol.chat.v1.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event.MessageSent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.Event.MessageSent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.MessageSent.displayName = 'proto.protocol.chat.v1.Event.MessageSent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event.MessageUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.chat.v1.Event.MessageUpdated.repeatedFields_, null);
};
goog.inherits(proto.protocol.chat.v1.Event.MessageUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.MessageUpdated.displayName = 'proto.protocol.chat.v1.Event.MessageUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event.MessageDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.Event.MessageDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.MessageDeleted.displayName = 'proto.protocol.chat.v1.Event.MessageDeleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event.ChannelCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.Event.ChannelCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.ChannelCreated.displayName = 'proto.protocol.chat.v1.Event.ChannelCreated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event.ChannelUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.Event.ChannelUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.ChannelUpdated.displayName = 'proto.protocol.chat.v1.Event.ChannelUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event.ChannelDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.Event.ChannelDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.ChannelDeleted.displayName = 'proto.protocol.chat.v1.Event.ChannelDeleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event.GuildUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.Event.GuildUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.GuildUpdated.displayName = 'proto.protocol.chat.v1.Event.GuildUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event.GuildDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.Event.GuildDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.GuildDeleted.displayName = 'proto.protocol.chat.v1.Event.GuildDeleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event.MemberJoined = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.Event.MemberJoined, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.MemberJoined.displayName = 'proto.protocol.chat.v1.Event.MemberJoined';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event.MemberLeft = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.Event.MemberLeft, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.MemberLeft.displayName = 'proto.protocol.chat.v1.Event.MemberLeft';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event.GuildAddedToList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.Event.GuildAddedToList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.GuildAddedToList.displayName = 'proto.protocol.chat.v1.Event.GuildAddedToList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event.GuildRemovedFromList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.Event.GuildRemovedFromList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.GuildRemovedFromList.displayName = 'proto.protocol.chat.v1.Event.GuildRemovedFromList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event.ActionPerformed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.Event.ActionPerformed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.ActionPerformed.displayName = 'proto.protocol.chat.v1.Event.ActionPerformed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event.RoleMoved = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.Event.RoleMoved, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.RoleMoved.displayName = 'proto.protocol.chat.v1.Event.RoleMoved';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.chat.v1.Event.ProfileUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.chat.v1.Event.ProfileUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.chat.v1.Event.ProfileUpdated.displayName = 'proto.protocol.chat.v1.Event.ProfileUpdated';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protocol.chat.v1.StreamEventsRequest.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.protocol.chat.v1.StreamEventsRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  SUBSCRIBE_TO_GUILD: 1,
  SUBSCRIBE_TO_ACTIONS: 2,
  SUBSCRIBE_TO_HOMESERVER_EVENTS: 3
};

/**
 * @return {proto.protocol.chat.v1.StreamEventsRequest.RequestCase}
 */
proto.protocol.chat.v1.StreamEventsRequest.prototype.getRequestCase = function() {
  return /** @type {proto.protocol.chat.v1.StreamEventsRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.protocol.chat.v1.StreamEventsRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.StreamEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.StreamEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.StreamEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.StreamEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscribeToGuild: (f = msg.getSubscribeToGuild()) && proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.toObject(includeInstance, f),
    subscribeToActions: (f = msg.getSubscribeToActions()) && proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions.toObject(includeInstance, f),
    subscribeToHomeserverEvents: (f = msg.getSubscribeToHomeserverEvents()) && proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.StreamEventsRequest}
 */
proto.protocol.chat.v1.StreamEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.StreamEventsRequest;
  return proto.protocol.chat.v1.StreamEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.StreamEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.StreamEventsRequest}
 */
proto.protocol.chat.v1.StreamEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild;
      reader.readMessage(value,proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.deserializeBinaryFromReader);
      msg.setSubscribeToGuild(value);
      break;
    case 2:
      var value = new proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions;
      reader.readMessage(value,proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions.deserializeBinaryFromReader);
      msg.setSubscribeToActions(value);
      break;
    case 3:
      var value = new proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents;
      reader.readMessage(value,proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents.deserializeBinaryFromReader);
      msg.setSubscribeToHomeserverEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.StreamEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.StreamEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.StreamEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.StreamEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscribeToGuild();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.serializeBinaryToWriter
    );
  }
  f = message.getSubscribeToActions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions.serializeBinaryToWriter
    );
  }
  f = message.getSubscribeToHomeserverEvents();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.toObject = function(includeInstance, msg) {
  var f, obj = {
    guildId: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild}
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild;
  return proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild}
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGuildId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuildId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
};


/**
 * optional uint64 guild_id = 1;
 * @return {string}
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.prototype.getGuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild} returns this
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.prototype.setGuildId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions}
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions;
  return proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions}
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents}
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents;
  return proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents}
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional SubscribeToGuild subscribe_to_guild = 1;
 * @return {?proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild}
 */
proto.protocol.chat.v1.StreamEventsRequest.prototype.getSubscribeToGuild = function() {
  return /** @type{?proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild, 1));
};


/**
 * @param {?proto.protocol.chat.v1.StreamEventsRequest.SubscribeToGuild|undefined} value
 * @return {!proto.protocol.chat.v1.StreamEventsRequest} returns this
*/
proto.protocol.chat.v1.StreamEventsRequest.prototype.setSubscribeToGuild = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.protocol.chat.v1.StreamEventsRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.StreamEventsRequest} returns this
 */
proto.protocol.chat.v1.StreamEventsRequest.prototype.clearSubscribeToGuild = function() {
  return this.setSubscribeToGuild(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.StreamEventsRequest.prototype.hasSubscribeToGuild = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SubscribeToActions subscribe_to_actions = 2;
 * @return {?proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions}
 */
proto.protocol.chat.v1.StreamEventsRequest.prototype.getSubscribeToActions = function() {
  return /** @type{?proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions, 2));
};


/**
 * @param {?proto.protocol.chat.v1.StreamEventsRequest.SubscribeToActions|undefined} value
 * @return {!proto.protocol.chat.v1.StreamEventsRequest} returns this
*/
proto.protocol.chat.v1.StreamEventsRequest.prototype.setSubscribeToActions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.protocol.chat.v1.StreamEventsRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.StreamEventsRequest} returns this
 */
proto.protocol.chat.v1.StreamEventsRequest.prototype.clearSubscribeToActions = function() {
  return this.setSubscribeToActions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.StreamEventsRequest.prototype.hasSubscribeToActions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SubscribeToHomeserverEvents subscribe_to_homeserver_events = 3;
 * @return {?proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents}
 */
proto.protocol.chat.v1.StreamEventsRequest.prototype.getSubscribeToHomeserverEvents = function() {
  return /** @type{?proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents, 3));
};


/**
 * @param {?proto.protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents|undefined} value
 * @return {!proto.protocol.chat.v1.StreamEventsRequest} returns this
*/
proto.protocol.chat.v1.StreamEventsRequest.prototype.setSubscribeToHomeserverEvents = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.protocol.chat.v1.StreamEventsRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.StreamEventsRequest} returns this
 */
proto.protocol.chat.v1.StreamEventsRequest.prototype.clearSubscribeToHomeserverEvents = function() {
  return this.setSubscribeToHomeserverEvents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.StreamEventsRequest.prototype.hasSubscribeToHomeserverEvents = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protocol.chat.v1.Event.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]];

/**
 * @enum {number}
 */
proto.protocol.chat.v1.Event.EventCase = {
  EVENT_NOT_SET: 0,
  GUILD_ADDED_TO_LIST: 1,
  GUILD_REMOVED_FROM_LIST: 2,
  ACTION_PERFORMED: 3,
  SENT_MESSAGE: 4,
  EDITED_MESSAGE: 5,
  DELETED_MESSAGE: 6,
  CREATED_CHANNEL: 7,
  EDITED_CHANNEL: 8,
  DELETED_CHANNEL: 9,
  EDITED_GUILD: 10,
  DELETED_GUILD: 11,
  JOINED_MEMBER: 12,
  LEFT_MEMBER: 13,
  ROLE_MOVED: 14,
  PROFILE_UPDATED: 15
};

/**
 * @return {proto.protocol.chat.v1.Event.EventCase}
 */
proto.protocol.chat.v1.Event.prototype.getEventCase = function() {
  return /** @type {proto.protocol.chat.v1.Event.EventCase} */(jspb.Message.computeOneofCase(this, proto.protocol.chat.v1.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    guildAddedToList: (f = msg.getGuildAddedToList()) && proto.protocol.chat.v1.Event.GuildAddedToList.toObject(includeInstance, f),
    guildRemovedFromList: (f = msg.getGuildRemovedFromList()) && proto.protocol.chat.v1.Event.GuildRemovedFromList.toObject(includeInstance, f),
    actionPerformed: (f = msg.getActionPerformed()) && proto.protocol.chat.v1.Event.ActionPerformed.toObject(includeInstance, f),
    sentMessage: (f = msg.getSentMessage()) && proto.protocol.chat.v1.Event.MessageSent.toObject(includeInstance, f),
    editedMessage: (f = msg.getEditedMessage()) && proto.protocol.chat.v1.Event.MessageUpdated.toObject(includeInstance, f),
    deletedMessage: (f = msg.getDeletedMessage()) && proto.protocol.chat.v1.Event.MessageDeleted.toObject(includeInstance, f),
    createdChannel: (f = msg.getCreatedChannel()) && proto.protocol.chat.v1.Event.ChannelCreated.toObject(includeInstance, f),
    editedChannel: (f = msg.getEditedChannel()) && proto.protocol.chat.v1.Event.ChannelUpdated.toObject(includeInstance, f),
    deletedChannel: (f = msg.getDeletedChannel()) && proto.protocol.chat.v1.Event.ChannelDeleted.toObject(includeInstance, f),
    editedGuild: (f = msg.getEditedGuild()) && proto.protocol.chat.v1.Event.GuildUpdated.toObject(includeInstance, f),
    deletedGuild: (f = msg.getDeletedGuild()) && proto.protocol.chat.v1.Event.GuildDeleted.toObject(includeInstance, f),
    joinedMember: (f = msg.getJoinedMember()) && proto.protocol.chat.v1.Event.MemberJoined.toObject(includeInstance, f),
    leftMember: (f = msg.getLeftMember()) && proto.protocol.chat.v1.Event.MemberLeft.toObject(includeInstance, f),
    roleMoved: (f = msg.getRoleMoved()) && proto.protocol.chat.v1.Event.RoleMoved.toObject(includeInstance, f),
    profileUpdated: (f = msg.getProfileUpdated()) && proto.protocol.chat.v1.Event.ProfileUpdated.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event}
 */
proto.protocol.chat.v1.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event;
  return proto.protocol.chat.v1.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event}
 */
proto.protocol.chat.v1.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.chat.v1.Event.GuildAddedToList;
      reader.readMessage(value,proto.protocol.chat.v1.Event.GuildAddedToList.deserializeBinaryFromReader);
      msg.setGuildAddedToList(value);
      break;
    case 2:
      var value = new proto.protocol.chat.v1.Event.GuildRemovedFromList;
      reader.readMessage(value,proto.protocol.chat.v1.Event.GuildRemovedFromList.deserializeBinaryFromReader);
      msg.setGuildRemovedFromList(value);
      break;
    case 3:
      var value = new proto.protocol.chat.v1.Event.ActionPerformed;
      reader.readMessage(value,proto.protocol.chat.v1.Event.ActionPerformed.deserializeBinaryFromReader);
      msg.setActionPerformed(value);
      break;
    case 4:
      var value = new proto.protocol.chat.v1.Event.MessageSent;
      reader.readMessage(value,proto.protocol.chat.v1.Event.MessageSent.deserializeBinaryFromReader);
      msg.setSentMessage(value);
      break;
    case 5:
      var value = new proto.protocol.chat.v1.Event.MessageUpdated;
      reader.readMessage(value,proto.protocol.chat.v1.Event.MessageUpdated.deserializeBinaryFromReader);
      msg.setEditedMessage(value);
      break;
    case 6:
      var value = new proto.protocol.chat.v1.Event.MessageDeleted;
      reader.readMessage(value,proto.protocol.chat.v1.Event.MessageDeleted.deserializeBinaryFromReader);
      msg.setDeletedMessage(value);
      break;
    case 7:
      var value = new proto.protocol.chat.v1.Event.ChannelCreated;
      reader.readMessage(value,proto.protocol.chat.v1.Event.ChannelCreated.deserializeBinaryFromReader);
      msg.setCreatedChannel(value);
      break;
    case 8:
      var value = new proto.protocol.chat.v1.Event.ChannelUpdated;
      reader.readMessage(value,proto.protocol.chat.v1.Event.ChannelUpdated.deserializeBinaryFromReader);
      msg.setEditedChannel(value);
      break;
    case 9:
      var value = new proto.protocol.chat.v1.Event.ChannelDeleted;
      reader.readMessage(value,proto.protocol.chat.v1.Event.ChannelDeleted.deserializeBinaryFromReader);
      msg.setDeletedChannel(value);
      break;
    case 10:
      var value = new proto.protocol.chat.v1.Event.GuildUpdated;
      reader.readMessage(value,proto.protocol.chat.v1.Event.GuildUpdated.deserializeBinaryFromReader);
      msg.setEditedGuild(value);
      break;
    case 11:
      var value = new proto.protocol.chat.v1.Event.GuildDeleted;
      reader.readMessage(value,proto.protocol.chat.v1.Event.GuildDeleted.deserializeBinaryFromReader);
      msg.setDeletedGuild(value);
      break;
    case 12:
      var value = new proto.protocol.chat.v1.Event.MemberJoined;
      reader.readMessage(value,proto.protocol.chat.v1.Event.MemberJoined.deserializeBinaryFromReader);
      msg.setJoinedMember(value);
      break;
    case 13:
      var value = new proto.protocol.chat.v1.Event.MemberLeft;
      reader.readMessage(value,proto.protocol.chat.v1.Event.MemberLeft.deserializeBinaryFromReader);
      msg.setLeftMember(value);
      break;
    case 14:
      var value = new proto.protocol.chat.v1.Event.RoleMoved;
      reader.readMessage(value,proto.protocol.chat.v1.Event.RoleMoved.deserializeBinaryFromReader);
      msg.setRoleMoved(value);
      break;
    case 15:
      var value = new proto.protocol.chat.v1.Event.ProfileUpdated;
      reader.readMessage(value,proto.protocol.chat.v1.Event.ProfileUpdated.deserializeBinaryFromReader);
      msg.setProfileUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuildAddedToList();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.chat.v1.Event.GuildAddedToList.serializeBinaryToWriter
    );
  }
  f = message.getGuildRemovedFromList();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.chat.v1.Event.GuildRemovedFromList.serializeBinaryToWriter
    );
  }
  f = message.getActionPerformed();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.chat.v1.Event.ActionPerformed.serializeBinaryToWriter
    );
  }
  f = message.getSentMessage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protocol.chat.v1.Event.MessageSent.serializeBinaryToWriter
    );
  }
  f = message.getEditedMessage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.protocol.chat.v1.Event.MessageUpdated.serializeBinaryToWriter
    );
  }
  f = message.getDeletedMessage();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.protocol.chat.v1.Event.MessageDeleted.serializeBinaryToWriter
    );
  }
  f = message.getCreatedChannel();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.protocol.chat.v1.Event.ChannelCreated.serializeBinaryToWriter
    );
  }
  f = message.getEditedChannel();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.protocol.chat.v1.Event.ChannelUpdated.serializeBinaryToWriter
    );
  }
  f = message.getDeletedChannel();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.protocol.chat.v1.Event.ChannelDeleted.serializeBinaryToWriter
    );
  }
  f = message.getEditedGuild();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.protocol.chat.v1.Event.GuildUpdated.serializeBinaryToWriter
    );
  }
  f = message.getDeletedGuild();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.protocol.chat.v1.Event.GuildDeleted.serializeBinaryToWriter
    );
  }
  f = message.getJoinedMember();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.protocol.chat.v1.Event.MemberJoined.serializeBinaryToWriter
    );
  }
  f = message.getLeftMember();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.protocol.chat.v1.Event.MemberLeft.serializeBinaryToWriter
    );
  }
  f = message.getRoleMoved();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.protocol.chat.v1.Event.RoleMoved.serializeBinaryToWriter
    );
  }
  f = message.getProfileUpdated();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.protocol.chat.v1.Event.ProfileUpdated.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.MessageSent.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.MessageSent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event.MessageSent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.MessageSent.toObject = function(includeInstance, msg) {
  var f, obj = {
    echoId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: (f = msg.getMessage()) && harmonytypes_v1_types_pb.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event.MessageSent}
 */
proto.protocol.chat.v1.Event.MessageSent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event.MessageSent;
  return proto.protocol.chat.v1.Event.MessageSent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event.MessageSent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event.MessageSent}
 */
proto.protocol.chat.v1.Event.MessageSent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEchoId(value);
      break;
    case 2:
      var value = new harmonytypes_v1_types_pb.Message;
      reader.readMessage(value,harmonytypes_v1_types_pb.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.MessageSent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.MessageSent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event.MessageSent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.MessageSent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEchoId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      harmonytypes_v1_types_pb.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 echo_id = 1;
 * @return {number}
 */
proto.protocol.chat.v1.Event.MessageSent.prototype.getEchoId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.chat.v1.Event.MessageSent} returns this
 */
proto.protocol.chat.v1.Event.MessageSent.prototype.setEchoId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional protocol.harmonytypes.v1.Message message = 2;
 * @return {?proto.protocol.harmonytypes.v1.Message}
 */
proto.protocol.chat.v1.Event.MessageSent.prototype.getMessage = function() {
  return /** @type{?proto.protocol.harmonytypes.v1.Message} */ (
    jspb.Message.getWrapperField(this, harmonytypes_v1_types_pb.Message, 2));
};


/**
 * @param {?proto.protocol.harmonytypes.v1.Message|undefined} value
 * @return {!proto.protocol.chat.v1.Event.MessageSent} returns this
*/
proto.protocol.chat.v1.Event.MessageSent.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event.MessageSent} returns this
 */
proto.protocol.chat.v1.Event.MessageSent.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.MessageSent.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.chat.v1.Event.MessageUpdated.repeatedFields_ = [7,9,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.MessageUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event.MessageUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.MessageUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    guildId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    messageId: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    editedAt: (f = msg.getEditedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    content: jspb.Message.getFieldWithDefault(msg, 5, ""),
    updateContent: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    embedsList: jspb.Message.toObjectList(msg.getEmbedsList(),
    harmonytypes_v1_types_pb.Embed.toObject, includeInstance),
    updateEmbeds: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    harmonytypes_v1_types_pb.Action.toObject, includeInstance),
    updateActions: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    attachmentsList: jspb.Message.toObjectList(msg.getAttachmentsList(),
    harmonytypes_v1_types_pb.Attachment.toObject, includeInstance),
    updateAttachments: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    overrides: (f = msg.getOverrides()) && harmonytypes_v1_types_pb.Override.toObject(includeInstance, f),
    updateOverrides: jspb.Message.getBooleanFieldWithDefault(msg, 14, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated}
 */
proto.protocol.chat.v1.Event.MessageUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event.MessageUpdated;
  return proto.protocol.chat.v1.Event.MessageUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event.MessageUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated}
 */
proto.protocol.chat.v1.Event.MessageUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGuildId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMessageId(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEditedAt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdateContent(value);
      break;
    case 7:
      var value = new harmonytypes_v1_types_pb.Embed;
      reader.readMessage(value,harmonytypes_v1_types_pb.Embed.deserializeBinaryFromReader);
      msg.addEmbeds(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdateEmbeds(value);
      break;
    case 9:
      var value = new harmonytypes_v1_types_pb.Action;
      reader.readMessage(value,harmonytypes_v1_types_pb.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdateActions(value);
      break;
    case 11:
      var value = new harmonytypes_v1_types_pb.Attachment;
      reader.readMessage(value,harmonytypes_v1_types_pb.Attachment.deserializeBinaryFromReader);
      msg.addAttachments(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdateAttachments(value);
      break;
    case 13:
      var value = new harmonytypes_v1_types_pb.Override;
      reader.readMessage(value,harmonytypes_v1_types_pb.Override.deserializeBinaryFromReader);
      msg.setOverrides(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdateOverrides(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.MessageUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event.MessageUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.MessageUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuildId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getMessageId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = message.getEditedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUpdateContent();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getEmbedsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      harmonytypes_v1_types_pb.Embed.serializeBinaryToWriter
    );
  }
  f = message.getUpdateEmbeds();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      harmonytypes_v1_types_pb.Action.serializeBinaryToWriter
    );
  }
  f = message.getUpdateActions();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getAttachmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      harmonytypes_v1_types_pb.Attachment.serializeBinaryToWriter
    );
  }
  f = message.getUpdateAttachments();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getOverrides();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      harmonytypes_v1_types_pb.Override.serializeBinaryToWriter
    );
  }
  f = message.getUpdateOverrides();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional uint64 guild_id = 1;
 * @return {string}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.getGuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.setGuildId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 channel_id = 2;
 * @return {string}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional uint64 message_id = 3;
 * @return {string}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.setMessageId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp edited_at = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.getEditedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
*/
proto.protocol.chat.v1.Event.MessageUpdated.prototype.setEditedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.clearEditedAt = function() {
  return this.setEditedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.hasEditedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string content = 5;
 * @return {string}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool update_content = 6;
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.getUpdateContent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.setUpdateContent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * repeated protocol.harmonytypes.v1.Embed embeds = 7;
 * @return {!Array<!proto.protocol.harmonytypes.v1.Embed>}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.getEmbedsList = function() {
  return /** @type{!Array<!proto.protocol.harmonytypes.v1.Embed>} */ (
    jspb.Message.getRepeatedWrapperField(this, harmonytypes_v1_types_pb.Embed, 7));
};


/**
 * @param {!Array<!proto.protocol.harmonytypes.v1.Embed>} value
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
*/
proto.protocol.chat.v1.Event.MessageUpdated.prototype.setEmbedsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.protocol.harmonytypes.v1.Embed=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.harmonytypes.v1.Embed}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.addEmbeds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.protocol.harmonytypes.v1.Embed, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.clearEmbedsList = function() {
  return this.setEmbedsList([]);
};


/**
 * optional bool update_embeds = 8;
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.getUpdateEmbeds = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.setUpdateEmbeds = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * repeated protocol.harmonytypes.v1.Action actions = 9;
 * @return {!Array<!proto.protocol.harmonytypes.v1.Action>}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.protocol.harmonytypes.v1.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, harmonytypes_v1_types_pb.Action, 9));
};


/**
 * @param {!Array<!proto.protocol.harmonytypes.v1.Action>} value
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
*/
proto.protocol.chat.v1.Event.MessageUpdated.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.protocol.harmonytypes.v1.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.harmonytypes.v1.Action}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.protocol.harmonytypes.v1.Action, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};


/**
 * optional bool update_actions = 10;
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.getUpdateActions = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.setUpdateActions = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * repeated protocol.harmonytypes.v1.Attachment attachments = 11;
 * @return {!Array<!proto.protocol.harmonytypes.v1.Attachment>}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.getAttachmentsList = function() {
  return /** @type{!Array<!proto.protocol.harmonytypes.v1.Attachment>} */ (
    jspb.Message.getRepeatedWrapperField(this, harmonytypes_v1_types_pb.Attachment, 11));
};


/**
 * @param {!Array<!proto.protocol.harmonytypes.v1.Attachment>} value
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
*/
proto.protocol.chat.v1.Event.MessageUpdated.prototype.setAttachmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.protocol.harmonytypes.v1.Attachment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.harmonytypes.v1.Attachment}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.addAttachments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.protocol.harmonytypes.v1.Attachment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.clearAttachmentsList = function() {
  return this.setAttachmentsList([]);
};


/**
 * optional bool update_attachments = 12;
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.getUpdateAttachments = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.setUpdateAttachments = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional protocol.harmonytypes.v1.Override overrides = 13;
 * @return {?proto.protocol.harmonytypes.v1.Override}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.getOverrides = function() {
  return /** @type{?proto.protocol.harmonytypes.v1.Override} */ (
    jspb.Message.getWrapperField(this, harmonytypes_v1_types_pb.Override, 13));
};


/**
 * @param {?proto.protocol.harmonytypes.v1.Override|undefined} value
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
*/
proto.protocol.chat.v1.Event.MessageUpdated.prototype.setOverrides = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.clearOverrides = function() {
  return this.setOverrides(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.hasOverrides = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool update_overrides = 14;
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.getUpdateOverrides = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protocol.chat.v1.Event.MessageUpdated} returns this
 */
proto.protocol.chat.v1.Event.MessageUpdated.prototype.setUpdateOverrides = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.MessageDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.MessageDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event.MessageDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.MessageDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    guildId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    messageId: jspb.Message.getFieldWithDefault(msg, 3, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event.MessageDeleted}
 */
proto.protocol.chat.v1.Event.MessageDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event.MessageDeleted;
  return proto.protocol.chat.v1.Event.MessageDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event.MessageDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event.MessageDeleted}
 */
proto.protocol.chat.v1.Event.MessageDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGuildId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMessageId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.MessageDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.MessageDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event.MessageDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.MessageDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuildId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getMessageId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
};


/**
 * optional uint64 guild_id = 1;
 * @return {string}
 */
proto.protocol.chat.v1.Event.MessageDeleted.prototype.getGuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.MessageDeleted} returns this
 */
proto.protocol.chat.v1.Event.MessageDeleted.prototype.setGuildId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 channel_id = 2;
 * @return {string}
 */
proto.protocol.chat.v1.Event.MessageDeleted.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.MessageDeleted} returns this
 */
proto.protocol.chat.v1.Event.MessageDeleted.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional uint64 message_id = 3;
 * @return {string}
 */
proto.protocol.chat.v1.Event.MessageDeleted.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.MessageDeleted} returns this
 */
proto.protocol.chat.v1.Event.MessageDeleted.prototype.setMessageId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.ChannelCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.ChannelCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event.ChannelCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.ChannelCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    guildId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    previousId: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    nextId: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    isCategory: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event.ChannelCreated}
 */
proto.protocol.chat.v1.Event.ChannelCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event.ChannelCreated;
  return proto.protocol.chat.v1.Event.ChannelCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event.ChannelCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event.ChannelCreated}
 */
proto.protocol.chat.v1.Event.ChannelCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGuildId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setPreviousId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setNextId(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCategory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.ChannelCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.ChannelCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event.ChannelCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.ChannelCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuildId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPreviousId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      4,
      f
    );
  }
  f = message.getNextId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      5,
      f
    );
  }
  f = message.getIsCategory();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional uint64 guild_id = 1;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ChannelCreated.prototype.getGuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ChannelCreated} returns this
 */
proto.protocol.chat.v1.Event.ChannelCreated.prototype.setGuildId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 channel_id = 2;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ChannelCreated.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ChannelCreated} returns this
 */
proto.protocol.chat.v1.Event.ChannelCreated.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ChannelCreated.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ChannelCreated} returns this
 */
proto.protocol.chat.v1.Event.ChannelCreated.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 previous_id = 4;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ChannelCreated.prototype.getPreviousId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ChannelCreated} returns this
 */
proto.protocol.chat.v1.Event.ChannelCreated.prototype.setPreviousId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional uint64 next_id = 5;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ChannelCreated.prototype.getNextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ChannelCreated} returns this
 */
proto.protocol.chat.v1.Event.ChannelCreated.prototype.setNextId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional bool is_category = 6;
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.ChannelCreated.prototype.getIsCategory = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protocol.chat.v1.Event.ChannelCreated} returns this
 */
proto.protocol.chat.v1.Event.ChannelCreated.prototype.setIsCategory = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.ChannelUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event.ChannelUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.ChannelUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    guildId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    updateName: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    previousId: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    nextId: jspb.Message.getFieldWithDefault(msg, 6, "0"),
    updateOrder: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event.ChannelUpdated}
 */
proto.protocol.chat.v1.Event.ChannelUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event.ChannelUpdated;
  return proto.protocol.chat.v1.Event.ChannelUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event.ChannelUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event.ChannelUpdated}
 */
proto.protocol.chat.v1.Event.ChannelUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGuildId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdateName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setPreviousId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setNextId(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdateOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.ChannelUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event.ChannelUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.ChannelUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuildId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUpdateName();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPreviousId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      5,
      f
    );
  }
  f = message.getNextId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      6,
      f
    );
  }
  f = message.getUpdateOrder();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional uint64 guild_id = 1;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.getGuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ChannelUpdated} returns this
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.setGuildId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 channel_id = 2;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ChannelUpdated} returns this
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ChannelUpdated} returns this
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool update_name = 4;
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.getUpdateName = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protocol.chat.v1.Event.ChannelUpdated} returns this
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.setUpdateName = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint64 previous_id = 5;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.getPreviousId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ChannelUpdated} returns this
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.setPreviousId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional uint64 next_id = 6;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.getNextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ChannelUpdated} returns this
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.setNextId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 6, value);
};


/**
 * optional bool update_order = 7;
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.getUpdateOrder = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protocol.chat.v1.Event.ChannelUpdated} returns this
 */
proto.protocol.chat.v1.Event.ChannelUpdated.prototype.setUpdateOrder = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.ChannelDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.ChannelDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event.ChannelDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.ChannelDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    guildId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event.ChannelDeleted}
 */
proto.protocol.chat.v1.Event.ChannelDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event.ChannelDeleted;
  return proto.protocol.chat.v1.Event.ChannelDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event.ChannelDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event.ChannelDeleted}
 */
proto.protocol.chat.v1.Event.ChannelDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGuildId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setChannelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.ChannelDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.ChannelDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event.ChannelDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.ChannelDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuildId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
};


/**
 * optional uint64 guild_id = 1;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ChannelDeleted.prototype.getGuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ChannelDeleted} returns this
 */
proto.protocol.chat.v1.Event.ChannelDeleted.prototype.setGuildId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 channel_id = 2;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ChannelDeleted.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ChannelDeleted} returns this
 */
proto.protocol.chat.v1.Event.ChannelDeleted.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.GuildUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.GuildUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event.GuildUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.GuildUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    guildId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    updateName: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event.GuildUpdated}
 */
proto.protocol.chat.v1.Event.GuildUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event.GuildUpdated;
  return proto.protocol.chat.v1.Event.GuildUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event.GuildUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event.GuildUpdated}
 */
proto.protocol.chat.v1.Event.GuildUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGuildId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdateName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.GuildUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.GuildUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event.GuildUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.GuildUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuildId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpdateName();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional uint64 guild_id = 1;
 * @return {string}
 */
proto.protocol.chat.v1.Event.GuildUpdated.prototype.getGuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.GuildUpdated} returns this
 */
proto.protocol.chat.v1.Event.GuildUpdated.prototype.setGuildId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.protocol.chat.v1.Event.GuildUpdated.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.GuildUpdated} returns this
 */
proto.protocol.chat.v1.Event.GuildUpdated.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool update_name = 3;
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.GuildUpdated.prototype.getUpdateName = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protocol.chat.v1.Event.GuildUpdated} returns this
 */
proto.protocol.chat.v1.Event.GuildUpdated.prototype.setUpdateName = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.GuildDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.GuildDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event.GuildDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.GuildDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    guildId: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event.GuildDeleted}
 */
proto.protocol.chat.v1.Event.GuildDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event.GuildDeleted;
  return proto.protocol.chat.v1.Event.GuildDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event.GuildDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event.GuildDeleted}
 */
proto.protocol.chat.v1.Event.GuildDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGuildId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.GuildDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.GuildDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event.GuildDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.GuildDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuildId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
};


/**
 * optional uint64 guild_id = 1;
 * @return {string}
 */
proto.protocol.chat.v1.Event.GuildDeleted.prototype.getGuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.GuildDeleted} returns this
 */
proto.protocol.chat.v1.Event.GuildDeleted.prototype.setGuildId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.MemberJoined.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.MemberJoined.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event.MemberJoined} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.MemberJoined.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    guildId: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event.MemberJoined}
 */
proto.protocol.chat.v1.Event.MemberJoined.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event.MemberJoined;
  return proto.protocol.chat.v1.Event.MemberJoined.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event.MemberJoined} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event.MemberJoined}
 */
proto.protocol.chat.v1.Event.MemberJoined.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMemberId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGuildId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.MemberJoined.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.MemberJoined.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event.MemberJoined} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.MemberJoined.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getGuildId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
};


/**
 * optional uint64 member_id = 1;
 * @return {string}
 */
proto.protocol.chat.v1.Event.MemberJoined.prototype.getMemberId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.MemberJoined} returns this
 */
proto.protocol.chat.v1.Event.MemberJoined.prototype.setMemberId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 guild_id = 2;
 * @return {string}
 */
proto.protocol.chat.v1.Event.MemberJoined.prototype.getGuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.MemberJoined} returns this
 */
proto.protocol.chat.v1.Event.MemberJoined.prototype.setGuildId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.MemberLeft.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.MemberLeft.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event.MemberLeft} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.MemberLeft.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    guildId: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event.MemberLeft}
 */
proto.protocol.chat.v1.Event.MemberLeft.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event.MemberLeft;
  return proto.protocol.chat.v1.Event.MemberLeft.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event.MemberLeft} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event.MemberLeft}
 */
proto.protocol.chat.v1.Event.MemberLeft.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMemberId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGuildId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.MemberLeft.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.MemberLeft.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event.MemberLeft} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.MemberLeft.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getGuildId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
};


/**
 * optional uint64 member_id = 1;
 * @return {string}
 */
proto.protocol.chat.v1.Event.MemberLeft.prototype.getMemberId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.MemberLeft} returns this
 */
proto.protocol.chat.v1.Event.MemberLeft.prototype.setMemberId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 guild_id = 2;
 * @return {string}
 */
proto.protocol.chat.v1.Event.MemberLeft.prototype.getGuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.MemberLeft} returns this
 */
proto.protocol.chat.v1.Event.MemberLeft.prototype.setGuildId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.GuildAddedToList.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.GuildAddedToList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event.GuildAddedToList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.GuildAddedToList.toObject = function(includeInstance, msg) {
  var f, obj = {
    guildId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    homeserver: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event.GuildAddedToList}
 */
proto.protocol.chat.v1.Event.GuildAddedToList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event.GuildAddedToList;
  return proto.protocol.chat.v1.Event.GuildAddedToList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event.GuildAddedToList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event.GuildAddedToList}
 */
proto.protocol.chat.v1.Event.GuildAddedToList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGuildId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHomeserver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.GuildAddedToList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.GuildAddedToList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event.GuildAddedToList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.GuildAddedToList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuildId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getHomeserver();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 guild_id = 1;
 * @return {string}
 */
proto.protocol.chat.v1.Event.GuildAddedToList.prototype.getGuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.GuildAddedToList} returns this
 */
proto.protocol.chat.v1.Event.GuildAddedToList.prototype.setGuildId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string homeserver = 2;
 * @return {string}
 */
proto.protocol.chat.v1.Event.GuildAddedToList.prototype.getHomeserver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.GuildAddedToList} returns this
 */
proto.protocol.chat.v1.Event.GuildAddedToList.prototype.setHomeserver = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.GuildRemovedFromList.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.GuildRemovedFromList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event.GuildRemovedFromList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.GuildRemovedFromList.toObject = function(includeInstance, msg) {
  var f, obj = {
    guildId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    homeserver: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event.GuildRemovedFromList}
 */
proto.protocol.chat.v1.Event.GuildRemovedFromList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event.GuildRemovedFromList;
  return proto.protocol.chat.v1.Event.GuildRemovedFromList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event.GuildRemovedFromList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event.GuildRemovedFromList}
 */
proto.protocol.chat.v1.Event.GuildRemovedFromList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGuildId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHomeserver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.GuildRemovedFromList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.GuildRemovedFromList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event.GuildRemovedFromList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.GuildRemovedFromList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuildId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getHomeserver();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 guild_id = 1;
 * @return {string}
 */
proto.protocol.chat.v1.Event.GuildRemovedFromList.prototype.getGuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.GuildRemovedFromList} returns this
 */
proto.protocol.chat.v1.Event.GuildRemovedFromList.prototype.setGuildId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string homeserver = 2;
 * @return {string}
 */
proto.protocol.chat.v1.Event.GuildRemovedFromList.prototype.getHomeserver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.GuildRemovedFromList} returns this
 */
proto.protocol.chat.v1.Event.GuildRemovedFromList.prototype.setHomeserver = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.ActionPerformed.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.ActionPerformed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event.ActionPerformed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.ActionPerformed.toObject = function(includeInstance, msg) {
  var f, obj = {
    guildId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    messageId: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    actionId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    actionData: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event.ActionPerformed}
 */
proto.protocol.chat.v1.Event.ActionPerformed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event.ActionPerformed;
  return proto.protocol.chat.v1.Event.ActionPerformed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event.ActionPerformed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event.ActionPerformed}
 */
proto.protocol.chat.v1.Event.ActionPerformed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGuildId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMessageId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.ActionPerformed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.ActionPerformed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event.ActionPerformed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.ActionPerformed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuildId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getMessageId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = message.getActionId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getActionData();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 guild_id = 1;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ActionPerformed.prototype.getGuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ActionPerformed} returns this
 */
proto.protocol.chat.v1.Event.ActionPerformed.prototype.setGuildId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 channel_id = 2;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ActionPerformed.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ActionPerformed} returns this
 */
proto.protocol.chat.v1.Event.ActionPerformed.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional uint64 message_id = 3;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ActionPerformed.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ActionPerformed} returns this
 */
proto.protocol.chat.v1.Event.ActionPerformed.prototype.setMessageId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional string action_id = 4;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ActionPerformed.prototype.getActionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ActionPerformed} returns this
 */
proto.protocol.chat.v1.Event.ActionPerformed.prototype.setActionId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string action_data = 5;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ActionPerformed.prototype.getActionData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ActionPerformed} returns this
 */
proto.protocol.chat.v1.Event.ActionPerformed.prototype.setActionData = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.RoleMoved.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.RoleMoved.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event.RoleMoved} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.RoleMoved.toObject = function(includeInstance, msg) {
  var f, obj = {
    guildId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    roleId: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event.RoleMoved}
 */
proto.protocol.chat.v1.Event.RoleMoved.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event.RoleMoved;
  return proto.protocol.chat.v1.Event.RoleMoved.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event.RoleMoved} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event.RoleMoved}
 */
proto.protocol.chat.v1.Event.RoleMoved.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setGuildId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setRoleId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.RoleMoved.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.RoleMoved.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event.RoleMoved} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.RoleMoved.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuildId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getRoleId();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
};


/**
 * optional uint64 guild_id = 1;
 * @return {string}
 */
proto.protocol.chat.v1.Event.RoleMoved.prototype.getGuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.RoleMoved} returns this
 */
proto.protocol.chat.v1.Event.RoleMoved.prototype.setGuildId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 role_id = 2;
 * @return {string}
 */
proto.protocol.chat.v1.Event.RoleMoved.prototype.getRoleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.RoleMoved} returns this
 */
proto.protocol.chat.v1.Event.RoleMoved.prototype.setRoleId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.chat.v1.Event.ProfileUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.chat.v1.Event.ProfileUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.chat.v1.Event.ProfileUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.ProfileUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    newUsername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    updateUsername: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    newAvatar: jspb.Message.getFieldWithDefault(msg, 3, ""),
    updateAvatar: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    newStatus: jspb.Message.getFieldWithDefault(msg, 5, 0),
    updateStatus: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.chat.v1.Event.ProfileUpdated}
 */
proto.protocol.chat.v1.Event.ProfileUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.chat.v1.Event.ProfileUpdated;
  return proto.protocol.chat.v1.Event.ProfileUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.chat.v1.Event.ProfileUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.chat.v1.Event.ProfileUpdated}
 */
proto.protocol.chat.v1.Event.ProfileUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewUsername(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdateUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewAvatar(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdateAvatar(value);
      break;
    case 5:
      var value = /** @type {!proto.protocol.harmonytypes.v1.UserStatus} */ (reader.readEnum());
      msg.setNewStatus(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdateStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.chat.v1.Event.ProfileUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.chat.v1.Event.ProfileUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.chat.v1.Event.ProfileUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.chat.v1.Event.ProfileUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUpdateUsername();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getNewAvatar();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUpdateAvatar();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getNewStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getUpdateStatus();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string new_username = 1;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ProfileUpdated.prototype.getNewUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ProfileUpdated} returns this
 */
proto.protocol.chat.v1.Event.ProfileUpdated.prototype.setNewUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool update_username = 2;
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.ProfileUpdated.prototype.getUpdateUsername = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protocol.chat.v1.Event.ProfileUpdated} returns this
 */
proto.protocol.chat.v1.Event.ProfileUpdated.prototype.setUpdateUsername = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string new_avatar = 3;
 * @return {string}
 */
proto.protocol.chat.v1.Event.ProfileUpdated.prototype.getNewAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.chat.v1.Event.ProfileUpdated} returns this
 */
proto.protocol.chat.v1.Event.ProfileUpdated.prototype.setNewAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool update_avatar = 4;
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.ProfileUpdated.prototype.getUpdateAvatar = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protocol.chat.v1.Event.ProfileUpdated} returns this
 */
proto.protocol.chat.v1.Event.ProfileUpdated.prototype.setUpdateAvatar = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional protocol.harmonytypes.v1.UserStatus new_status = 5;
 * @return {!proto.protocol.harmonytypes.v1.UserStatus}
 */
proto.protocol.chat.v1.Event.ProfileUpdated.prototype.getNewStatus = function() {
  return /** @type {!proto.protocol.harmonytypes.v1.UserStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.protocol.harmonytypes.v1.UserStatus} value
 * @return {!proto.protocol.chat.v1.Event.ProfileUpdated} returns this
 */
proto.protocol.chat.v1.Event.ProfileUpdated.prototype.setNewStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional bool update_status = 6;
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.ProfileUpdated.prototype.getUpdateStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protocol.chat.v1.Event.ProfileUpdated} returns this
 */
proto.protocol.chat.v1.Event.ProfileUpdated.prototype.setUpdateStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional GuildAddedToList guild_added_to_list = 1;
 * @return {?proto.protocol.chat.v1.Event.GuildAddedToList}
 */
proto.protocol.chat.v1.Event.prototype.getGuildAddedToList = function() {
  return /** @type{?proto.protocol.chat.v1.Event.GuildAddedToList} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.Event.GuildAddedToList, 1));
};


/**
 * @param {?proto.protocol.chat.v1.Event.GuildAddedToList|undefined} value
 * @return {!proto.protocol.chat.v1.Event} returns this
*/
proto.protocol.chat.v1.Event.prototype.setGuildAddedToList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.protocol.chat.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event} returns this
 */
proto.protocol.chat.v1.Event.prototype.clearGuildAddedToList = function() {
  return this.setGuildAddedToList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.prototype.hasGuildAddedToList = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GuildRemovedFromList guild_removed_from_list = 2;
 * @return {?proto.protocol.chat.v1.Event.GuildRemovedFromList}
 */
proto.protocol.chat.v1.Event.prototype.getGuildRemovedFromList = function() {
  return /** @type{?proto.protocol.chat.v1.Event.GuildRemovedFromList} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.Event.GuildRemovedFromList, 2));
};


/**
 * @param {?proto.protocol.chat.v1.Event.GuildRemovedFromList|undefined} value
 * @return {!proto.protocol.chat.v1.Event} returns this
*/
proto.protocol.chat.v1.Event.prototype.setGuildRemovedFromList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.protocol.chat.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event} returns this
 */
proto.protocol.chat.v1.Event.prototype.clearGuildRemovedFromList = function() {
  return this.setGuildRemovedFromList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.prototype.hasGuildRemovedFromList = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ActionPerformed action_performed = 3;
 * @return {?proto.protocol.chat.v1.Event.ActionPerformed}
 */
proto.protocol.chat.v1.Event.prototype.getActionPerformed = function() {
  return /** @type{?proto.protocol.chat.v1.Event.ActionPerformed} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.Event.ActionPerformed, 3));
};


/**
 * @param {?proto.protocol.chat.v1.Event.ActionPerformed|undefined} value
 * @return {!proto.protocol.chat.v1.Event} returns this
*/
proto.protocol.chat.v1.Event.prototype.setActionPerformed = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.protocol.chat.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event} returns this
 */
proto.protocol.chat.v1.Event.prototype.clearActionPerformed = function() {
  return this.setActionPerformed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.prototype.hasActionPerformed = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MessageSent sent_message = 4;
 * @return {?proto.protocol.chat.v1.Event.MessageSent}
 */
proto.protocol.chat.v1.Event.prototype.getSentMessage = function() {
  return /** @type{?proto.protocol.chat.v1.Event.MessageSent} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.Event.MessageSent, 4));
};


/**
 * @param {?proto.protocol.chat.v1.Event.MessageSent|undefined} value
 * @return {!proto.protocol.chat.v1.Event} returns this
*/
proto.protocol.chat.v1.Event.prototype.setSentMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.protocol.chat.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event} returns this
 */
proto.protocol.chat.v1.Event.prototype.clearSentMessage = function() {
  return this.setSentMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.prototype.hasSentMessage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MessageUpdated edited_message = 5;
 * @return {?proto.protocol.chat.v1.Event.MessageUpdated}
 */
proto.protocol.chat.v1.Event.prototype.getEditedMessage = function() {
  return /** @type{?proto.protocol.chat.v1.Event.MessageUpdated} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.Event.MessageUpdated, 5));
};


/**
 * @param {?proto.protocol.chat.v1.Event.MessageUpdated|undefined} value
 * @return {!proto.protocol.chat.v1.Event} returns this
*/
proto.protocol.chat.v1.Event.prototype.setEditedMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.protocol.chat.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event} returns this
 */
proto.protocol.chat.v1.Event.prototype.clearEditedMessage = function() {
  return this.setEditedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.prototype.hasEditedMessage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional MessageDeleted deleted_message = 6;
 * @return {?proto.protocol.chat.v1.Event.MessageDeleted}
 */
proto.protocol.chat.v1.Event.prototype.getDeletedMessage = function() {
  return /** @type{?proto.protocol.chat.v1.Event.MessageDeleted} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.Event.MessageDeleted, 6));
};


/**
 * @param {?proto.protocol.chat.v1.Event.MessageDeleted|undefined} value
 * @return {!proto.protocol.chat.v1.Event} returns this
*/
proto.protocol.chat.v1.Event.prototype.setDeletedMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.protocol.chat.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event} returns this
 */
proto.protocol.chat.v1.Event.prototype.clearDeletedMessage = function() {
  return this.setDeletedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.prototype.hasDeletedMessage = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ChannelCreated created_channel = 7;
 * @return {?proto.protocol.chat.v1.Event.ChannelCreated}
 */
proto.protocol.chat.v1.Event.prototype.getCreatedChannel = function() {
  return /** @type{?proto.protocol.chat.v1.Event.ChannelCreated} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.Event.ChannelCreated, 7));
};


/**
 * @param {?proto.protocol.chat.v1.Event.ChannelCreated|undefined} value
 * @return {!proto.protocol.chat.v1.Event} returns this
*/
proto.protocol.chat.v1.Event.prototype.setCreatedChannel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.protocol.chat.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event} returns this
 */
proto.protocol.chat.v1.Event.prototype.clearCreatedChannel = function() {
  return this.setCreatedChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.prototype.hasCreatedChannel = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ChannelUpdated edited_channel = 8;
 * @return {?proto.protocol.chat.v1.Event.ChannelUpdated}
 */
proto.protocol.chat.v1.Event.prototype.getEditedChannel = function() {
  return /** @type{?proto.protocol.chat.v1.Event.ChannelUpdated} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.Event.ChannelUpdated, 8));
};


/**
 * @param {?proto.protocol.chat.v1.Event.ChannelUpdated|undefined} value
 * @return {!proto.protocol.chat.v1.Event} returns this
*/
proto.protocol.chat.v1.Event.prototype.setEditedChannel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.protocol.chat.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event} returns this
 */
proto.protocol.chat.v1.Event.prototype.clearEditedChannel = function() {
  return this.setEditedChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.prototype.hasEditedChannel = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ChannelDeleted deleted_channel = 9;
 * @return {?proto.protocol.chat.v1.Event.ChannelDeleted}
 */
proto.protocol.chat.v1.Event.prototype.getDeletedChannel = function() {
  return /** @type{?proto.protocol.chat.v1.Event.ChannelDeleted} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.Event.ChannelDeleted, 9));
};


/**
 * @param {?proto.protocol.chat.v1.Event.ChannelDeleted|undefined} value
 * @return {!proto.protocol.chat.v1.Event} returns this
*/
proto.protocol.chat.v1.Event.prototype.setDeletedChannel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.protocol.chat.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event} returns this
 */
proto.protocol.chat.v1.Event.prototype.clearDeletedChannel = function() {
  return this.setDeletedChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.prototype.hasDeletedChannel = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional GuildUpdated edited_guild = 10;
 * @return {?proto.protocol.chat.v1.Event.GuildUpdated}
 */
proto.protocol.chat.v1.Event.prototype.getEditedGuild = function() {
  return /** @type{?proto.protocol.chat.v1.Event.GuildUpdated} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.Event.GuildUpdated, 10));
};


/**
 * @param {?proto.protocol.chat.v1.Event.GuildUpdated|undefined} value
 * @return {!proto.protocol.chat.v1.Event} returns this
*/
proto.protocol.chat.v1.Event.prototype.setEditedGuild = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.protocol.chat.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event} returns this
 */
proto.protocol.chat.v1.Event.prototype.clearEditedGuild = function() {
  return this.setEditedGuild(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.prototype.hasEditedGuild = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional GuildDeleted deleted_guild = 11;
 * @return {?proto.protocol.chat.v1.Event.GuildDeleted}
 */
proto.protocol.chat.v1.Event.prototype.getDeletedGuild = function() {
  return /** @type{?proto.protocol.chat.v1.Event.GuildDeleted} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.Event.GuildDeleted, 11));
};


/**
 * @param {?proto.protocol.chat.v1.Event.GuildDeleted|undefined} value
 * @return {!proto.protocol.chat.v1.Event} returns this
*/
proto.protocol.chat.v1.Event.prototype.setDeletedGuild = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.protocol.chat.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event} returns this
 */
proto.protocol.chat.v1.Event.prototype.clearDeletedGuild = function() {
  return this.setDeletedGuild(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.prototype.hasDeletedGuild = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional MemberJoined joined_member = 12;
 * @return {?proto.protocol.chat.v1.Event.MemberJoined}
 */
proto.protocol.chat.v1.Event.prototype.getJoinedMember = function() {
  return /** @type{?proto.protocol.chat.v1.Event.MemberJoined} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.Event.MemberJoined, 12));
};


/**
 * @param {?proto.protocol.chat.v1.Event.MemberJoined|undefined} value
 * @return {!proto.protocol.chat.v1.Event} returns this
*/
proto.protocol.chat.v1.Event.prototype.setJoinedMember = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.protocol.chat.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event} returns this
 */
proto.protocol.chat.v1.Event.prototype.clearJoinedMember = function() {
  return this.setJoinedMember(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.prototype.hasJoinedMember = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional MemberLeft left_member = 13;
 * @return {?proto.protocol.chat.v1.Event.MemberLeft}
 */
proto.protocol.chat.v1.Event.prototype.getLeftMember = function() {
  return /** @type{?proto.protocol.chat.v1.Event.MemberLeft} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.Event.MemberLeft, 13));
};


/**
 * @param {?proto.protocol.chat.v1.Event.MemberLeft|undefined} value
 * @return {!proto.protocol.chat.v1.Event} returns this
*/
proto.protocol.chat.v1.Event.prototype.setLeftMember = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.protocol.chat.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event} returns this
 */
proto.protocol.chat.v1.Event.prototype.clearLeftMember = function() {
  return this.setLeftMember(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.prototype.hasLeftMember = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional RoleMoved role_moved = 14;
 * @return {?proto.protocol.chat.v1.Event.RoleMoved}
 */
proto.protocol.chat.v1.Event.prototype.getRoleMoved = function() {
  return /** @type{?proto.protocol.chat.v1.Event.RoleMoved} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.Event.RoleMoved, 14));
};


/**
 * @param {?proto.protocol.chat.v1.Event.RoleMoved|undefined} value
 * @return {!proto.protocol.chat.v1.Event} returns this
*/
proto.protocol.chat.v1.Event.prototype.setRoleMoved = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.protocol.chat.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event} returns this
 */
proto.protocol.chat.v1.Event.prototype.clearRoleMoved = function() {
  return this.setRoleMoved(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.prototype.hasRoleMoved = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional ProfileUpdated profile_updated = 15;
 * @return {?proto.protocol.chat.v1.Event.ProfileUpdated}
 */
proto.protocol.chat.v1.Event.prototype.getProfileUpdated = function() {
  return /** @type{?proto.protocol.chat.v1.Event.ProfileUpdated} */ (
    jspb.Message.getWrapperField(this, proto.protocol.chat.v1.Event.ProfileUpdated, 15));
};


/**
 * @param {?proto.protocol.chat.v1.Event.ProfileUpdated|undefined} value
 * @return {!proto.protocol.chat.v1.Event} returns this
*/
proto.protocol.chat.v1.Event.prototype.setProfileUpdated = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.protocol.chat.v1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.chat.v1.Event} returns this
 */
proto.protocol.chat.v1.Event.prototype.clearProfileUpdated = function() {
  return this.setProfileUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.chat.v1.Event.prototype.hasProfileUpdated = function() {
  return jspb.Message.getField(this, 15) != null;
};


goog.object.extend(exports, proto.protocol.chat.v1);
